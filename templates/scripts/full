#!/usr/bin/env bash
# ----------------------------------------------------------------------
# Copyright (c) 2013-2015 Simon Arjuna Erat (sea)  <erat.simon@gmail.com>
# All rights reserved.
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANT ABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>
# ----------------------------------------------------------------------
source tuirc

cat > "$DEST" << EOF
#!/usr/bin/env bash
# ------------------------------------------------------------------------
#
# Copyright (c) $(date +'%Y') by $USER_NAME, $USER_EMAIL
# All rights reserved.
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the $DEFAULT_LICENSE as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# $DEFAULT_LICENSE for more details.
#
# You should have received a copy of the $DEFAULT_LICENSE
# along with this program.  If not, see $DEFAULT_LICENSE_URL
#
# ------------------------------------------------------------------------
#
#	Description:
#	TODO: Your text here ....
#
#
#
#	TUI
#
	missing_tui() { 
	# Checks if tui is installed, if not, downloads it either using git or curl/wget
	# Returns true (0) if tuirc was found or was installed with success
		# Lazy function
		function is_there() { which "\$1" 2>/dev/zero 1>/dev/zero ; return \$? ;}
		local tarball=tui.tar.gz
		# Check for existence
		if is_there tuirc
		then 	return 0
		else 	# Check for write access temp path
			if [ -w /tmp ]
			then 	cd /tmp
			else	# Check for write access in home dir, existin paths
				for D in cache temp tmp .temp .tmp .cache
				do 	for H in "\$HOME" "\$HOME/.local" "\$HOME/local"
					do 	[ -d "\$H/\$D" ] && cd "\$H/\$D" && break
					done
				done
			fi
			# Download TUI
			if is_there git
			then 	# Latest master contains latest bugfixes
				git clone git://git.savannah.nongnu.org/tui.git
				cd tui
			elif is_there wget
			then 	wget -O "\$tarball"
			else 	curl -O "\$tarball"
			fi
			# Extract tarball if required
			[ -f "\$tarball" ] && \\
				tar -axf "\$tarball" && \\
				rm -f "\$tarball" && \\
				cd tui
			# Dont require root acces
			# Using default fallback mode for root user = /usr/local
			# If its a regular user, dont be too visible
			[ 0 -eq \${UID:-0} ] && \\
				./configure || \\
				./configure --prefix="\$HOME/.local"
			./make-install && return 0
		fi
	}
	missing_tui && source tuirc || { echo "Installation of TUI (Text User Interface, framework for scripts) failed!" ; exit 0 ; }
	script_name="\${0##*/}"
	script_name="\${script_name/.sh/}"
	script_title="${DEST##*/}"
	script_author="$USER_NAME"
	script_contact="$USER_EMAIL"
	script_url="$USER_HOMEPAGE"
	script_license="$DEFAULT_LICENSE"
	script_created="$(date +'%Y.%m.%d')"
	script_changed="$(date +'%Y.%m.%d')"
	script_version=0.1
	# Optional
	script_config="\$HOME/.config/\$script_name/\$script_name.conf"
	[ ! "." = "\$(dirname \$0)" ] && \\
		script_dir="\$(dirname \$0)" || \\
		script_dir="\$(pwd)"
	# Shorts
	CFG="\$script_config"
	LOG="\$TUI_DIR_LOGS/\${script_name}.log"
	TMP="\${TMPDIR}/\${script_name}-\$\$.tmp~"
	REQUIRES="awk ls grep sed"
#
#	Gettext
#
	source gettext.sh
	TEXTDOMAIN="\$script_name"
	TEXTDOMAINDIR="\${TUI_DIR_SYSTEM/tui/locale}"	# Should not be changed, it applies to properly installed project
	export TEXTDOMAIN TEXTDOMAINDIR
#
#	Variable Defaults
#
	default_var="default value"
#
#	Variable Inits
#
	var=""
#
#	Messages to translate:
#
	MSG_XY="\$(gettext 'Hello world!')"
	MSG_TR_CONFIG_BY="\$(gettext 'Configuration file written by')"
	MSG_TR_VERSION="\$(eval_gettext '\${script_name}\${script_package_txt}, Version \$script_version
Copyright (C) $(date +'%Y') $USER_NAME
License $DEFAULT_LICENSE or later <$DEFAULT_LICENSE_URL>

This is free software; you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
')"
	MSG_TR_HELP="\$(eval_gettext 'SYNTAX
	\$script_name [options] arguments ...

OPTIONS
	-h|--help		Shows this screen and exits
	--version		Shows the version and exits
	
	--YOUROPT ARG		Sets \"opt_str\" to ARG
	-L|--log		Shows the logfile and exits
	-C|--config		Opens the configuration editor
	

Please report command bugs (in english, with LC_ALL=C) to: <$USER_EMAIL>
\${script_package}Homepage: <$USER_HOMEPAGE>
For more help on how to use GNU-Software: <http://www.gnu.org/gethelp/>
')"
	MSG_TR_XY="\$(gettext '')"
	MSG_TR_XX="\$(gettext '')"
	MSG_TR_YY="\$(eval_gettext '')"
#
#	Functions
#
	first_use() {
	# Write the initial configuration file
	# Starting with a comment line indicating the author, script name and script version
		tui-bol-dir "\$(dirname "\$script_config")"
		cat > "\$script_config" <<-EOF
		# \$MSG_TR_CONFIG_BY: \$script_name (\$script_version)
		reqs_checked=false
		var1="val1"
		EOF
	}
	check_requirements() {
	# Simply checks if required packages were already attempted to install
	# If reqs_checked is unset or false, it'll try next time.
		reqs_todo=\$(tui-conf-get "\$script_config" "reqs_checked")
		if ! "\$reqs_todo"
		then	tui-install -v \$REQUIRES
			tui-conf-set "\$script_config" "reqs_checked" "\$(tui-str-bol-conv \$?)"
		fi
	}
	cleanup() { 
	# Removes all known tempfiles and exits
	# Is called at the end of the script and by the trap
		declare -a arr_CLEANUP=(
			"\$TMP"
			# Add your tempfiles
			# here
			)
		for remove in "\${arr_CLEANUP[@]}"
		do 	( [ -f "\$remove" ] || [ -p "\$remove" ] ) && rm -f "\$remove"
		done
	}
	show_help() {
	# Prints the helpscreen
	# and exits
		echo "\$MSG_TR_HELP_LONG"
		exit 99
	}
	show_version() {
	# Prints the version of the script
	# and exits
		echo "\$MSG_TR_VERSION"
		exit 111
	}
	show_help() {
	# Prints the helpscreen	
	# and exits
		echo "\$MSG_TR_HELP"
		exit 99
	}
#
#	Traps are cool!
#
	# TRAP FUNCTION/"COMMAND" MODE's ...
	trap cleanup INT ERR QUIT KILL ABRT
#
#	Get options
#
	# -a|--alternative ; to allow longoptions with a single leading '-'
	GETOPT=\$(getopt \\
		--options	"hCL" \\
		--longoptions	"help,version,log,config,YOUROPT:" \\
		--name 		"\${0##*/}" -- "\${@}" \\
	)
	eval set -- "\${GETOPT}";
	while true
	do 	case "\$1" in
		-h|--help)	show_help	;;
		--version)	show_version	;;
		--)		shift ; break	;;
		-C|--config)	tui-conf-editor	"\$script_config"
				exit \$?
				;;
		-L|--log)	tui-cat "\$LOG"
				tui-press
				exit 0
				;;
		# -----------------------------------------------
		--YOUROPT)	opt_str="\$2"
				shift 2
				;;
		esac
	done
#
#	Action & Display
#
	[ -f "\$script_config" ] || first_use
	check_requirements
	tui-header "\$script_name (\$script_version)" "\$(date +'%F %T')"
	tui-title "\$script_title"
	tui-echo "\$MSG_XY"
	
#
# 	Clean up & exit
#
	cleanup
	exit 0
EOF
