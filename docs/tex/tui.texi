\input texinfo   @c -*-texinfo-*-
@comment %**start of header
@setfilename tui.info
@include _version.texi
@settitle Manual 1.0 for Text User Interface (TUI)
@syncodeindex pg cp
@comment %**end of header
@copying
This manual is for TUI (version @value{VERSION}, @value{UPDATED})
Copyright @copyright{} 2011-2015 Simon Arjuna Erat
TUI is licensed as GPLv3.
The manual is licensed as GFDL.

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
Texts.  A copy of the license is included in the section entitled
``GNU Free Documentation License''.
@end quotation
@end copying

@documentdescription
gnu,linux,script,bash,ash,csh,zsh,tui,cli
@end documentdescription

@comment ## --------------------------------------------------------------- ##

@titlepage
@title Table of Content
@subtitle for version @value{VERSION}, @value{UPDATED}
@author Simon Arjuna Erat (@email{erat.simon@@gmail.com})
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage


@comment ## --------------------------------------------------------------- ##

@ifnottex
@node Top
@top TUI - GNU Project - Free Software Foundation (FSF)
This manual is for TUI (version @value{VERSION}, @value{UPDATED}).
@end ifnottex

main page text juhuuu

@menu
* Introduction to TUI :: 
* Installation ::
* Configuration :: 
* Display Commands :: The definition of Interface
* Interactive Commands :: Convenience for author and user
* Advanced Commands :: Tools for the crazy lazy geeks with great ideas
@end menu
@contents

@comment ## --------------------------------------------------------------- ##

@node Introduction to TUI
@chapter Introduction to TUI
@i {TUI is a bash framework to write scripts with a Text User Interface.}

It is a command based framework which wraps the task (executed command name represents task or 
description) into an adaptive Text User Interface (TUI).
It is a framework to be used in the shell or shell scripts, though the usage of scripts is recommended 
to preserve the interface feeling.

It was the core display part of another script-dream I have, and it took me almost 2.5 years 
until i figured that extracting all these displaying functions, provide its very own project.
TUI was born, a command based framework to give scripts an interface like feeling.

This said, when executed alone, a single tui-<command>, it doesn't look that much like an interface.
However, as soon you append a few tui-echo after another or use tui-cat to print a small text file to
the screen, you will feel the difference.

Many script authors write their collection of code helpers, display features or task assistants.
As such functions, they have to copy them to each of the scripts, 
and manually maintain and adjust the function inside that script, 
or update all those scripts just to be sure that function is updated.

TUI jumps in here, providing a 3-Way-Interface between the Author of a script, 
the System (and its installed software) and the User who is executing it.

In fact, TUI is tui!

'tui' is meant to make a directory a simple but highly configurable script menu, and display its 
sub-directories as sections and browse among the tree structure, with its entrance point as root.
All the other commands, are merely the code helpers, display tools, list library, variable providers,
gathered as commands for easy availability, so you can access them straight forward like any command 
in your scripts.

You as the author of the script, don't have to worry about software the user has installed, 
instead you call: tui-edit, tui-filemgr, tui-web or tui-terminal (tui-terimnal is GUI only), 
or which distribution the user is using, simply call tui-install to cover package manager 
installations from Arch, over *BSD and Debian to Fedora/Red-Hat to Slackware or Tizen.


It brings together the best of two worlds, the power of the console and the convenience of a graphical
environment.


@comment ## --------------------------------------------------------------- ##
@node Installation
@chapter Installation
After getting the source code like:
@example
    su
    cd /usr/src
    git clone https://github.com/sri-arjuna/tui.git
    cd tui
@end example

A basic installation procedure looks like:
@example
    ./configure --prefix=/
    make
    make install
@end example
	
By default this will install TUI using the default prefix /usr/local, so the binaries will be available in PREFIX/bin.

This way, uninstall is very easy:
@example
    su
    cd /usr/src/tui
    make uninstall
@end example

@node Configuration
@chapter Configuration
Is done either by the (End-)User, the applications installed and the system the user is using.
Default themes are 'default' for the user, and 'default-red' for root.

First and for the most, you can change the theme.
A theme defines the left and right border, the font and background color of tui-header and tui-title,
as well as the input character for tui-select.

Application invokes by either one of tui-edit, tui-filemgr, tui-web or tui-terminal which will search through
a list of known applications, diverted by cli or gui abilities if the default applications are not found.
If you have WINE installed, it may happend that 'notepad' is started as editor rather than 'scribes'.

If your favorite application is missing on its list, please contact the author of TUI to append it/them.

Calling
@example
    tuirc config
@end example
will bring up a screen to select which conf file to edit.

@section Apps / @sc {$TUI_FILE_USER_CONF}
Upon first call, you will probably see the values listed as variable names with a '$'-prefix.
This setting will use the system defaults set in /etc/tui/apps.conf.
If you are calling the above command as root, you will edit the system defaults, and not the user preferences.
CURLWGET will be 'curl' or 'wget' if found, if neither is found, tui-download will ask to install either one.

@section Loadlist
Can only be edited, but should not be changed or expaned.
This file defines the order in which the user configs are read.
You may add custom entries, but be aware these functions or values will not be available if you share your scripts using them.

@section Settings / @sc {$TUI_FILE_USER_SETTINGS}
Here, the behaviour or default values for tui-commands is defined.


@section Idea
In todays world, everything is about presenting. There are many tasks that can be faster accomplished using a script rather than writing an application for it as others require to use it.
This said, it is known many end-users dont like the terminal screen. That is usualy because the commands in terminals have their output not very well structured, usualy just text-by-text-by-newline-by-text.
This is if you need/want/have to provide scripts for users to use, and make it (a little) easier for them to 'read' the terminal, without to have to write 'presentation' handlers.
Thus user.conf in ~/.config/tui provides variables that may be used for any script that sources tui, same goes for apps.conf, which will provide EDITOR, BROWSER, FILEMGR, TERMINAL with your set favorite applications.
Now in the combination with tui-edit, you dont even need to source tuirc to have tui-edit open the given filename with your favorite editor.


@part Commands

@node Display Commands
@chapter Display Commands
Usualy scripts not only summarizes several commands into a single file, it also enables us to display 'selected information'.

So lets start with the 4 core elements:

tui-printf, replace current printed line (no tailing new line)


* tui-echo, print output and go new line

* tui-header, fills the full line with (default) blue background and will write with white font.

* tui-title, fills the inlay border with (default) white background and will write with blue font.



@c * tui-status :: 
@c * tui-progress :: 
@c * tui-list :: 
@c * tui-cat :: 




@node Interactive Commands
d


@node Advanced Commands

d


@bye
