This is tui.info, produced by texi2any version 6.0 from tui.texi.

This manual is for TUI (version 0.9.0, 2015.12.05) Copyright (C)
2011-2015 Simon Arjuna Erat TUI is licensed as GPLv3.  The manual is
licensed as GFDL.

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.3 or any later version published by the Free Software
     Foundation; with no Invariant Sections, with no Front-Cover Texts,
     and with no Back-Cover Texts.  A copy of the license is included in
     the section entitled "GNU Free Documentation License".


File: tui.info,  Node: Top,  Next: Introduction to TUI,  Up: (dir)

TUI
***

This manual is for TUI (version 0.9.0, 2015.12.05).

   TUI is a command based Text User Interface framework for scripts.

   Although it requires BASH to be installed, the commands can be called
from other SHELLS as well.  But be aware of their differences, such as
string formatting and possible exit codes as examples.

* Menu:

* Introduction to TUI :: 
* Installation :: Optimal installation & de-installation
* Configuration :: What is where done
* Usage :: Some basic description
* Appendix :: 


File: tui.info,  Node: Introduction to TUI,  Next: Installation,  Prev: Top,  Up: Top

1 Introduction to TUI
*********************

TUI is a bash framework to write scripts with a Text User Interface.

1.1 Idea
========

In today's world, everything is about presenting.  There are many tasks
that can be faster accomplished using a script rather than writing an
application for it as others require to use it.  This said, it is known
many end-users don't like the terminal screen.  That is usually because
the commands in terminals have their output not very well structured,
usually just text-by-text-by-newline-by-text.  This is if you
need/want/have to provide scripts for users to use, and make it (a
little) easier for them to 'read' the terminal, without to have to write
'presentation' handlers.  Thus user.conf in ~/.config/tui provides
variables that may be used for any script that sources tui, same goes
for apps.conf, which will provide EDITOR, BROWSER, FILEMGR, TERMINAL
with your set favorite applications.  Now in the combination with
tui-edit, you don't even need to source tuirc to have tui-edit open the
given filename with your favorite editor.

1.1.1 What is TUI?
------------------

It is a command based framework which wraps the task (executed command
name represents task or description) into an adaptive Text User
Interface (TUI). It is a framework to be used in the shell or shell
scripts, though the usage of scripts is recommended to preserve the
interface feeling.

   It was the core display part of another script-dream I have, and it
took me almost 2.5 years until i figured that extracting all these
displaying functions, provide its very own project.  TUI was born, a
command based framework to give scripts an interface like feeling.

   This said, when executed alone, a single tui-<command>, it doesn't
look that much like an interface.  However, as soon you append a few
tui-print after another or use tui-printfile to print a small text file
to the screen, you will feel the difference.

1.1.2 Why TUI?
--------------

Many script authors write their collection of code helpers, display
features or task assistants.  As such functions, they have to copy them
to each of the scripts, and manually maintain and adjust the function
inside that script, or update all those scripts just to be sure that
function is updated.

   TUI jumps in here, providing a 3-Way-Interface between the Author of
a script, the System (and its installed software) and the User who is
executing it.

1.1.3 What TUI is about
-----------------------

In fact, TUI is tui!

   'tui' is meant to make a directory a simple but highly configurable
script menu, and display its sub-directories as sections and browse
among the tree structure, with its entrance point as root.  All the
other commands, are merely the code helpers, display tools, list
library, variable providers, gathered as commands for easy availability,
so you can access them straight forward like any command in your
scripts.

   You as the author of the script, don't have to worry about software
the user has installed, instead you call: tui-edit, tui-filemgr, tui-web
or tui-terminal (tui-terminal is GUI only), or which distribution the
user is using, simply call tui-install to cover package manager
installations from *BSD, Debian over Fedora/Red-Hat to Trisquel.

   It brings together the best of two worlds, the power of the console
and the convenience of a graphical environment.


File: tui.info,  Node: Installation,  Next: Configuration,  Prev: Introduction to TUI,  Up: Top

2 Installation
**************

2.1 Getting the code
====================

It is recommended by FHS
(http://www.pathname.com/fhs/pub/fhs-2.3.html#USRSRCSOURCECODE) to save
source code in /usr/src.
         su
         cd /usr/src
         git clone https://github.com/sri-arjuna/tui.git
         cd tui

2.2 A basic installation procedure looks like:
==============================================

         ./configure --prefix=/
         make
         make install

   By default this will install TUI using the default prefix /usr/local,
so the binaries will be available in PREFIX/bin.

2.3 Uninstall
=============

         su
         cd /usr/src/tui
         make uninstall


File: tui.info,  Node: Configuration,  Next: Usage,  Prev: Installation,  Up: Top

3 Configuration
***************

Is done either by the (End-)User, the applications installed and the
system the user is using.  Default themes are 'default' for the user,
and 'default-red' for root.

   First and for the most, you can change the theme.  A theme defines
the left and right border, the font and background color of tui-header
and tui-title, as well as the input character for tui-select.

   Application invokes by either one of tui-edit, tui-filemgr, tui-web
or tui-terminal which will search through a list of known applications,
diverted by cli or gui abilities if the default applications are not
found.  If you have WINE installed, it may happened that 'notepad' is
started as editor rather than 'scribes'.

   If your favorite application is missing on its list, please contact
the author of TUI to append it/them.

   Calling
         tuirc config
   will bring up a screen to select which conf file to edit.

3.1 Apps / $TUI_FILE_USER_CONF
==============================

Upon first call, you will probably see the values listed as variable
names with a '$'-prefix.  This setting will use the system defaults set
in /etc/tui/apps.conf.  If you are calling the above command as root,
you will edit the system defaults, and not the user preferences.
CURLWGET will be 'curl' or 'wget' if found, if neither is found,
tui-download will ask to install either one.

3.2 Loadlist
============

Can only be edited, but should not be changed or expanded.  This file
defines the order in which the user configuration files are read.  You
may add custom entries, but be aware these functions or values will not
be available if you share your scripts using them.

3.3 Settings / $TUI_FILE_USER_SETTINGS
======================================

Here, the behavior or default values for tui-commands is defined.  Like
your prefered shell, the byteisze used or how the tui-new-<COMMAND>s
behave.

3.4 User / $TUI_FILE_USER
=========================

Here you can set or change your USER_NAME, your USER_EMAIL you'd like to
use for your scripts, as well as the USER_HOMEPAGE. Moreover, you could
change the default license DEFAULT_LICENSE and DEFAULT_LICENSE_URL.


File: tui.info,  Node: Usage,  Next: Appendix,  Prev: Configuration,  Up: Top

4 Usage
*******

This is a summary description of each command, grouped into different
categories.

   If you are looking for code samples, try:
         tuirc samples

4.1 Display Commands
====================

Usually scripts not only summaries several commands into a single file,
it also enables us to display 'selected information'.

   This handles the commands that are used to display information to the
user.

4.1.1 tui-printline
-------------------

This is the heart of TUI, as it provides the core functionality to
display everything TUI will display.  But usually you will use it to
update the current printed line of the previous/initial call of
tui-printline.

   It handles up to three (3) quoted strings, printing the first one on
the left side.  If there are 2 strings passed, the 2nd will be on the
right side.  If there are 3 strings passed, the 2nd will be in the
center, and the 3rd on the right side.

   This said, tui-printline provides the core display functionality for
all the other core display command's, such as tui-print, tui-header,
tui-title, tui-printfile, tui-status and tui-progress.

   Only the 2 optical dividers, tui-header and tui-title are colored
according to the set theme.

   Please see tui-print for a simple example.

4.1.2 tui-print
---------------

Like its regular counterpart echo, but provides the same output
alignment as tui-printline.

   Example:
         tui-print
         tui-print one
         tui-print one two
         tui-print one two three

   Which would then output as:
         # |                                                                      | #
         # | one                                                                  | #
         # | one                                                              two | #
         # | one                             two                            three | #

4.1.3 tui-header
----------------

With its full line background color, tui-header is meant - where
applicable - as 'constant' header/footer of a loop based script.  Or
just as a one time application information header.

4.1.4 tui-title
---------------

Is using the inverted colors of tui-header, having only the inlay line
with a background.

   tui-title handles the first string argument differently, as it
centers it.  With any further string argument, it behaves like the
others.

4.1.5 tui-list
--------------

Is nice handy tool to print different kinds of list.  * no numbering *
Arabic numbering (regular) * roman numbering (from 1 to 9999) *
alphabetic numbering

   Examples Lets see how a default call handles an array containing 3
strings
     	array=("Some value" "Another one" "Watch out")
     	tui-list "${array[@]}"

   Looks like:
     	# | 1) Some value               2) Another one              3) Watch out | #

   Lets keep the array, and just use the roman toggle (**-r**), which
looks like:
     	array=("Some value" "Another one" "Watch out" "Some value" "Another one" "Watch out")
     	tui-list -r "${array[@]}"
     	# | I. Some value             II. Another one             III. Watch out | #
     	# | IV. Some value              V. Another one             VI. Watch out | #

   To print a list with only one column, or just two, simply use the
number as an option.  The option -1 is great for list with long entry
strings.
     	$ tui-list -1 "${array[@]}"
     	# | Some value                                   | #
     	# | Another one                                  | #
     	# | Watch out                                    | #

     	$ tui-list -2r "${array[@]}"
     	# | I. Some value                II. Another one | #
     	# | III. Watch out                  IV. a fourth | #

4.1.6 tui-printfile
-------------------

This command simply prints the content of a file within TUI borders.

   To print the content of a file, simply pass its name or full path as
argument.
     	tui-printfile /etc/os-release

   As an Easter egg it also provides a typewriter mode, which accepts
strings as well.
     	tui-printfile -t message_file.txt
     	tui-printfile -t "some string"
     	tui-printfile -d 0.5 "Message string" ~/message_file.txt "Another string" ...

   One can even pipe output:
     	echo "$(uname -a)" | tui-printfile -t
     	# | Linux cyberdyne.ocean 4.1.2-2-ARCH #1 SMP PRE| #
     	# | EMPT Wed Jul 15 08:30:32 UTC 2015 x86_64 GNU/| #
     	# | Linux                                        | #

4.1.7 tui-progress
------------------

A very powerful tool to display several kinds of different progress
indications.

   From a single animated dash, simple numbering, numbering up to a max
value, and even a progress bar with additional percent display.

   Its default animation is an animated dash.  This setup allows to show
an animation with an unknown maximum by either time or invokes.
     	for entry in $list
     	do 	tui-progress "Working with:" 	"$entry"
     	done

   Which will be seen as:
     	# | Working with:                     entry                     [  |   ] | #

   For a more professional look and feel, one needs also a bit more
preparations:
     	declare -a list
     	list=$(ls)
     	count=${#list[@]}
     	tui-print "Updating the file its timestamp"
     	tui-progress -r

     	for file in "${#list[@]}"
     	do 	tui-progress -m $count "Working on file:" 	"$file"
     		touch "$file"
     		sleep 0.3
     	done

   Which will be shown as:
     	# | Working on file:                     file                     7 / 20 | #

   Last but not least, the one view you do expect of a progress - a bar:
     	cur=1
     	max=87
     	while [ $cur -le $max ]
     	do	# Optionally, you could use/add '-l' to display the progress percentage.
     		tui-progress -b -m $max -c $cur "Working on XY..."
     		((cur++))
     		echo ""
     	done

   Would output (each as a single line):
     	# | Working on XY...     [                     ] | #
     	# | Working on XY...     [=                    ] | #
     	# | Working on XY...     [===                  ] | #
     	# | Working on XY...     [====                 ] | #


     	# | Working on XY...     [=          ][ 16.09% ] | #
     	# | Working on XY...     [=====      ][ 45.97% ] | #
     	# | Working on XY...     [========== ][ 98.85% ] | #

4.1.8 tui-status
----------------

A nice and handy tool to display the exit code of the previous
condition.

   Although thought to help to display either success or failure of a
task, it provides much more.

   Lets display a simple check if a file exist:
     	[ -f filename ]
     	tui-status $? "File exists"
   Which would output as either of the 2 lines:
     	# | File exists                        [  ✓   ] | #
     	# | File exists                        [  ✗   ] | #

   It could also be used for wizard like scripts:
     	tui-yesno "Do you want to do XY?" && ret=0 || ret=4
     	if tui-status "$ret" "Doing XY"
     	then	echo todo
     	fi
   Which would return the following output, depending on your answer:
     	# | Do you want to do XY? (y/n)                y | #
     	# | Doing XY                            [  ✓  ] | #
     	todo

     	# | Do you want to do XY? (y/n)                n | #
     	# | Doing XY                            [  »   ] | #

   If you start another command which takes some time before it displays
anything, you could use:
     	 tui-status -r 2 "Starting something" ; sleep 4 && tui-status $? "Started something now..."

4.2 Interactive Commands
========================

Ever wanted to start an editor at a users computer, but he had not
installed it?

   Do not worry, the interactive tools provide a solution for this, and
more.

4.2.1 tui-yesno
---------------

One of the most used tools in TUI, a simple bool returning command
showing a question to the user.  And easy for the coder to handle.

   But see for yourself:
     	tui-yesno "Show grub defaults?" && cat /etc/default/grub

     	if tui-yesno "Show grub defaults?"
     	then	cat /etc/default/grub
     	fi

     	tui-yesno "Continue (y) or close terminal window (n)?" || exit 0

4.2.2 tui-download
------------------

Has the user curl or wget installed, both or none?  Do not worry, this
tool handles this, it selects the first command found (or set in the
configuration) to download.  While it does show how much data it
downloaded (filesize), it cant show a progress bar - this is in plan but
very low priority.

   Basically one call it simply like this:
     	tui-download "http://download.server.com/file.zip"

4.2.3 tui-edit
--------------

So, you want the user to edit a file, but do not know which editor he
has installed?

   Call tui-edit, it looks for default editors, if none is found, it
searches a list of known ones, if none is found it asks the user to
install one of the known ones.

   Usually, one simply uses:
     	tui-edit ./somedir/file.txt

4.2.4 tui-filemgr
-----------------

So, you want the user to see some file, but do not know which file
manager he has installed?

   Call tui-filemgr, it looks for default file managers, if none is
found, it searches a list of known ones, if none is found it asks the
user to install one of the known ones.

   Usually, one simply uses:
     	tui-filemgr "$HOME/projects/this"

4.2.5 tui-press
---------------

Does what it says, asks the user to 'press enter to continue'.

     	tui-press

   Looks like:
     	# | Press [ENTER] to continue     Press [ENTER] to continue | #

4.2.6 tui-read
--------------

Well, it reads the user input

   Usually this is to get a string of a user, like either one of these:
     	answer=$(tui-read "What is your hometown?")
     	tui-read "What is your hometown?" > /tmp/answer
   So you then can work with either the variable or the file.

4.2.7 tui-select
----------------

Select an item from passed arguments.  If your 'read' supports it, it
wont require 'enter' to select an item which its digit count is as long
as the digit count of the arguments passed (ex:: item 10 of 99) If you
want to select item 1 out of 11, you will have to press 'enter' though.

   By default, it prints up to 3 values per line and lets you select
among it.
     	choice=$(tui-select 1 2 3)
     	tui-select 1 2 3 > /tmp/choice

   Either of these, look like:
     	# | 1) 1               2) 2                 3) 3 | #
     	# | > 2

   However, if you want a only a single column, or just two, you may
pass -1 or -2.  Specially for long menu name selection, this can be a
nice trick:

     	choice=$(tui-select -1 1 2 3)
   Will look like:
     	# | 1) 1                                         | #
     	# | 2) 2                                         | #
     	# | 3) 3                                         | #
     	# | >

   Also there might be situation, specially if you are working with
dynamically generated lists, that only 1 entry is available.

   You might auto select that single entry by:
     	answer=$(tui-select -a "I'm all alone!")
     	echo $answer

4.2.8 tui-terminal
------------------

Obviously this will only work in GUI mode and will open the
selected/preferred terminal emulator.

     	tui-terminal "tui-conf-editor $HOME/.config/user-dirs.dirs"

4.2.9 tui-wait
--------------

Waits given time (s/m/h), counting down and showing optional message.
This is good to indicate passed times, in case of a timeout or planned
delay.

   One could be crazy and wait several hours:
     	tui-wait 5h "I need to clean up my desktop icons!"
   Showing the full countdown:
     	# | I need to clean up my desktop icons!                         4:59:58 | #

   Or some more practical delay between an attempt:
     	tui-wait 5m "Could not reach host, trying again in:"
   Showing the full countdown:
     	# | Could not reach host, trying again in:                          4:58 | #

4.2.10 tui-web
--------------

Not everyone might have Icecat or Midori installed, tui-web will search
for installed web browser and open the passed URL in the first it finds.

   If none is found, it asks the user to either install one from the
list, or to manualy type the name of the browser (s)he uses.  Just like
tui-edit, tui-filemgr, and tui-terminal.

     	tui-web "http://www.gnu.org"

4.3 Code Helpers (groups)
=========================

Small things to make your life easier, sorted by groups.

4.3.1 tui-bol-dir
-----------------

Returns true if passed dir was found or could be created.  If verbose
mode is enabled, it shows tui-status.

   As in:
     	tui-bol-dir -v bin
   Prints output as:
     	# | Found: bin                          [  ✓   ] | #

   Likewise for a path that can be created:
     	tui-bol-dir -v tmp
   Prints output as:
     	# | Created: tmp                        [  ✓   ] | #

   And a path that can not be created (due to missing rights):
     	tui-bol-dir -v /a/new/path  || exit 1
   Prints output as:
     	# | Created: /a/new/path                [  ✗   ] | #

4.3.2 tui-bol-gui
-----------------

Returns true if the user is in GUI mode.  Returns DE name if verbose.

   A basic example could be:
     	if tui-bol-gui
     	then	filezilla
     	else	ftp
     	fi

   One could also display which DE the user is running:
     	tui-print "Your GUI/DE is:" "$(tui-bol-gui -v)"
   Which outputs like:
     	# | Your GUI/DE is:                      awesome | #

4.3.3 tui-bol-root
------------------

Returns true if user is root.

     	tui-bol-root && \
     		echo "You're root" || \
     		echo "You're a regular user!"

4.3.4 tui-conf-editor
---------------------

A basic tool to edit a conf file.

     	su -c "tui-conf-editor /etc/default/grub"
   This would let you edit the current settings of /etc/default/grub.

     	tui-conf-editor	-T "Human Configurator" --option var_gender --default male --values="male female" \
     			--option var_name --default "$USER" \
     			--option var_age --default 0 --values="1-13 14-21 22-44 44-62 63-90 90+" \
     			--write-no-exist \
     			/path/to/file
   Would create a default config file, that will look like:
     	var_gender=male
     	var_name=<the users login name>
     	var_age=0
   The user now can then change the values of these variables by
selecting them from the menu, where he could leave the menu too.  In
this example, the user can select between male and female upon selecting
var_gender, likewise for var_age, but among those age-ranges.  For the
var_name however, he must type a new name, since there are no values to
select from.

     	tui-conf-editor	-T "Human Configurator" --option var_gender --default male --values="male female" \
     			--option var_name --default "$USER" \
     			--option var_age --default 0 --values="1-13 14-21 22-44 44-62 63-90 90+" \
     			--write-no-exist \
     			-q \
     			/path/to/file
   Would simply check each variable to be present, and if not, save it
with available default value.

4.3.5 tui-conf-get
------------------

Gets the value of a variable from a file.

     	CFG=/etc/default/grub
     	KEY=GRUB_TIMEOUT

     	value=$(tui-conf-get $CFG $KEY)
     	echo $value

4.3.6 tui-conf-set
------------------

Set the value of a variable in a file.  Similar as tui-conf-get but
saves a value.

     	CFG=/etc/default/grub
     	KEY=GRUB_TIMEOUT
     	VAL=3

     	tui-conf-get $CFG $KEY $VAL

   It also provides a verbose mode:
     	tui-conf-get -v  $CFG $KEY $VAL
   Which would output like:
     	# | Saved in "grub"   GRUB_TIMEOUT=5    [  ✓   ] | #

4.3.7 tui-str-bol-conv
----------------------

Converts '0|1|$?'  (return codes) to text.  Like: done/fail ; true/false
; yes/no

   True / False
     	[ -d /bin ]
     	tui-str-bol-conv -t $?

     	true

   Yes / No
     	[ -d /bin ]
     	tui-str-bol-conv -y $?

     	yes

   Done / Fail (in caps)
     	[ -d /bin ]
     	tui-str-bol-conv -dC $?

     	DONE

4.3.8 tui-str-extension
-----------------------

Returns the last string after a dot, empty if no dot is found.

     	for F in *;do
     		EXT=$(tui-str-extension $F)
     		echo "This file has the ext: $EXT"
     	done
   Could output as:
     	This file has the ext: am
     	This file has the ext: ac
     	This file has the ext:
     	This file has the ext: log
     	This file has the ext: in
     	This file has the ext:
     	This file has the ext: md

4.3.9 tui-str-genfilename
-------------------------

Generates a numbered file, optionally sets a new file extension.
     	template=rawfile.raw
     	workfile=$(tui-str-genfilename $template tpl)
     	touch $workfile
     	workfile=$(tui-str-genfilename $template tpl)
     	touch $workfile
   Could output like:
     	ls *tpl
     	rawfile.tpl rawfile.0.tpl rawfile.1.tpl

4.3.10 tui-str-hash
-------------------

Hashes a passed string to different sha's or md5.
     	tui-str-hash "string"
     	b80fa55b1234f1935cea559d9efbc39a

     	hash=$(tui-str-hash "string")
     	echo $hash
     	b80fa55b1234f1935cea559d9efbc39a

     	echo "string" | tui-str-hash

4.3.11 tui-str-usb
------------------

Lets the user select an USB storage and returns the device path.
(/dev/sdx)

   To let the user select an USB device, simply invoke it like:
     	DEVICE=$(tui-str-usb)
   Which could be presented to the user as:
     	# | 1) usb-Multiple_Card_Reader_058F63666485-0:0                         | #
     	# |                           2) usb-SWISSBIT_Twist_99999999F900011d-0:0 | #
     	# | > 2
   Upon selecting an entry, the variable DEVICE would be filled with the
device path (ex:: /dev/sdc).

4.4 Code Helpers (singles)
==========================

4.4.1 tui-asroot
----------------

Executes passed (quoted) command as root, uses sudo where applicable or
set.

4.4.2 tui-cp
------------

Copy a file, displays progress bar.

4.4.3 tui-dd
------------

Thought to write images to usb devices.

   Need feedback to cover more use cases.

4.4.4 tui-mv
------------

Moves a file, displays a progress bar.

4.4.5 tui-tar
-------------

Tarballs a directory or file.

4.5 Advanced Commands
=====================

The tools provides in this section are usually for those who just want
more.

4.5.1 tui-bgjob
---------------

Executes a script in background.

   Prints first string while running, second when done.

   To start a script to run in background and print a message while
running:
     	tui-bgjob "/path/to/script" "Running script" "Ran Script"
   While "Running script" is shown while the script is running, the exit
status of the script is show with the 2nd string "Ran Script" in the
style of tui-status.

   While the default animation mode is the animated dash, if you are
'generating' a (larger) file, you might want to display its size:
     	tui-bgjob -f "/path/to/generated/file" "/path/to/script" "Running script" "Ran Script"

   If you have a specific filesize to expect, you may change to progress
bar display by supplying the expected byte size:
     	tui-bgjob -f "/path/to/generated/file" -e 4294967296 "/path/to/script" "Running script" "Ran Script"

4.5.2 tui-bgjob-mgr
-------------------

Executes multiple scripts at once.

   Lets you define how many scripts shall run simultaneously.

   Can run in quiet mode and return (as exit code) how many scripts were
ended with success.

   The basic usage is plain convenience, execute all files in this
folder (expecting them to be scripts!)
     	tui-bgjob-mgr *
   This will show 'progress' of the working through all these scripts.
However, it will just show if a script is planed to, running or how it
ended.

     Something of importance to know is the that the wait option ("-w
     SECS") has influence on the interval it checks if scripts have
     completed.

     The shorter the interval, the faster scripts can be processed, but
     it should not be set lower than 1 sec for a longer period of time.

     The longer the interval, the more time the CPU has to work on its
     jobs.

     The interval should be set to at max 50% of the slowest job
     expected, and should be no lower than 1 sec.

   Runs all KSH scripts with an interval of 5 minutes between visual
(and actual working-) updates.
     	tui-bgjob-mgr -w 360 *.ksh

   If you have just 3 or 4 scripts to monitor, you might like this in a
GUI/(D)WM environment
     	tui-bgjob-mgr -v window1.sh window2.sh window3.ksh script4.csh

   However, when working with multiple scripts, it may occur than some
scripts shall only be executed if some previous scripts were executed
successfully.
     	TASK="script1.sh script2.sh script3.sh"
     	MAX=$(echo $TASK | wc -w)

     	RET=$(tui-bgjob-mgr -qc $TASK)
     	[ "$RET" -eq "$MAX" ] && \
     		./script4.sh

4.5.3 tui-install
-----------------

Can be used to identify what distro the system is.

   Is meant to install dependencies that might be found in the distro
its repository.

   Due to the nature of the different package managers used, it is not
yet possible to capture each package managers its own verification
within TUI, so that output is (by default and for security) untouched.

   For scripts you share, it is recommend to leave the default handling
as described here.
     	tui-install pluma

   Could output on arch like:
     	# tui-install  pluma

     	# | Installing as dependency:              pluma | #
     	resolving dependencies...
     	looking for conflicting packages...

     	Packages (1) pluma-1.10.2-1

     	Total Installed Size:  15.11 MiB
     	Net Upgrade Size:       0.00 MiB

     	:: Proceed with installation? [Y/n] y
     	(1/1) checking keys in keyring
     	(1/1) checking package integrity
     	(1/1) loading package files
     	(1/1) checking for file conflicts
     	(1/1) checking available disk space
     	(1/1) reinstalling pluma
     	# | Installed package: pluma            [  ✓   ] | #

     	tui-install -y pluma

   Would output as slick as:
     	# | Installing as dependency:              pluma | #
     	# | Installed package: pluma            [  ✓   ] | #

4.5.4 tui-log
-------------

A tool to manage/write your custom logfiles with ease.

   As most logfiles provides several basic information on the left side,
tui-log has options for that.

   To create a custom logfile header, you could use:
     	echo "# Logfile for XY, created on DATE" >> "/path/to/logfile.log"
   tui-log -e "logfile.log" "# Logfile for XY, created on DATE"

   Because, every writing to a logfile checks first if the current date
is found in the logfile.

   If that is not the case, it first prints the current date before
writing the passed message.  Like this basic usage example shows:
     	rm logfile.log
     	tui-log -t logfile.log "Logfile created."
     	cat logfile.log

     	#### 2015-08-02 ####
     	06:34:09 	 Logfile created.

   Likewise for the other options, date (would be very repetitive, but
anyway), time, pid, user ; alone or in any combination.
     	tui-log -up logfile.log "What is my name and the pid"
     	cat logfile.log

     	#### 2015-08-02 ####
     	06:34:09 	 Logfile created.
     	sea 3821 	 What is my name and the pid

4.6 tui
=======

This command is the core element and was the main purpose for me to
write TUI.

   It is THE automated menu you were always looking for.

   Define a folder as your home menu, pass that folder as the '-p dir',
to use as as browsable menu.  You can even direct access scripts in
copyright/copyleft related information.  straight from the command line.

   Scripts executed by 'tui' iption / What is it?: have to be in BASH,
though, if they are not BASH, you must set the 'SHELL' with '-x' and all
files shown must be that SHELL. Note, that in this case, SHELL could
also be: Python or Perl, aside from ash, csh, zsh...






File: tui.info,  Node: Appendix,  Prev: Usage,  Up: Top

5 Appendix
**********

5.1 History of TUI
==================

5.1.1 Original Origin
---------------------

Around 1995 i've met the MSDOS command 'net', which allowed me to send
messages to a friends computer in the like of: 'net send <IP> "msg"'.

   That kind of usage feeling impressed me, to some extend, it was
'speech control', and i wanted to make something like that available.
Not literal 'speech control' but allow 'words' to form a 'command' which
then is executed.

   A bit later, a friend asked me if we wanted to try to write an
interface for the console, but we failed badly because he was pushing
for GUI actions too much, which text just doesnt allow that easily.
Sadly, my BATCH and QBASIC skills werent that trained, and beeing a
teenager, i had other interests too, so that idea never got realized.

   Early 2000 those ideas, thoughts and goals lost their focus pretty
quickly when i joined the army for some service.

5.1.2 First year of GNU/Linux
-----------------------------

Back in May 2011, i've got annoyed by Windows 7 - actually by the laptop
it was installed on, as it didnt have a GPU (graphic processor unit) to
play games - eventually i figured to try GNU/Linux again, after like 16
ears.  As you are probaly aware, there is more than just one flavor of
GNU/Linux.

   There are more than just the mainstream 'brands' (like: Debian,
Fedora/RedHat, Gentoo, Slackware, etc) but there is also a wide range of
DE and WM's.  So, still being a technical enthusiast, who likes to
tinker around, break things and learn new things, i've enjoyed the
diversity of so many distributions (also known as: distro / distros).

   Anyway, so end of May 2011, when Fedora 15 (LoveLock) was just
released, i 'joined' GNU/Linux, as in, the distro hopping began.

   As i been 'at home' among diffrent distros/de/wm combinations, i
quickly figured, the most powerfull tool to get things done on any
possibe combination, while giving me the power to maintain/change the
tool even at init 1, was scripts.

   In the end, I ended up having tons of scripts doing almost the same,
just for every different distro i had tried.  But all those scripts had
something in common, they did the very same things
(tweakings/installations) on different ways (apt-get, brewer, pacman,
yum...)  or with different paths set.  Oh boy did i start writing
scripts, at first each script/task for its own distro, then i started to
sort them in folders, but could no longer access them easily from
anywhere of the terminal.

5.1.3 Getting used to GNU/Linux and the birth of 'script-tools'
---------------------------------------------------------------

Due to that process of repeative installation and configuration of the
system, i wanted to ease that task of writing scripts.  Seeing other
scripts, the GNU/Linux loading text of the console, and the urge to
simply some scripting tasks, i started to write some first functions.

   At some later time, that project was renamed several times, ending up
with the name 'script-tools'.  This said, you probably can imagine that
'TUI' was just a very part of 'script-tools', which - due to several sub
sections - had functions stored in external files, so all the scripts
spread across different folders could just source those
function-scripts, so i would not need to edit several files to apply a
single char change.

   When i started to figure that i had several functions twice, with a
slightly different name in another function-script, but doing the very
same task, i thought avoidance might be the key.

   This was in 2014, 3 years after my joining to the GNU/Linux
community, 'constantly' working on that project, so that project
'script-tools' contained everything, from tweaking grub1 & grub2,
plymouth, signature generator, project manager (rpm, mock,
kickstart/specs, git/sf, ftp, rpm repo, cron) to name a few...

   Now 'script-tools' was already part of that idea, you could call it
like 'st tweak grub 2 timeout 4' or browse there by just calling 'st'.

5.1.4 The extraction of TUI
---------------------------

Those (not really) first functions where: sS, yesno, sE, sT and sH,
representing the todays commands tui-status, tui-yesno, tui-print,
tui-title and tui-header.  At first, i thought i might keep them as
functions, due to the one time reading to the memory, it would be very
fast afterwards.  Figured, having the display functions and the working
functions mixed up, causes unneeded trouble and could be avoided by
extracting the display fuctions as their own project - TUI.

   But then i thought of all the other shells i havent tried yet, but
beeing aware that most of them work generally the same way, i wanted to
make TUI also available to them - to some extend.  Keeping TUI as plain
BASH functions was no longer an option.  Providing these functions as
scripts/commands while sharing the same variables was the next obvious
and usable option.

5.1.5 Finalizing TUI
--------------------

Eventually, i thought it was done - besides of a few work-overs for one
or two commands to improve usability, and therefor i thought i was ready
to introduce TUI to GNU. After deleting some commands, there were still
over 46 commands to be worked on, their manpage, their wiki.md, their
infotext and their helpscreens.  Preparing all the commands to be
translateable was more of a mental challenge in regards of the count of
the command, rather than the actual effort required.  But getting this
alltogether, working as intended, took quite some time anyway.

5.1.6 About the Author
----------------------

Simon Arjuna Erat has first met a computer at the age of 8, at his dad's
cellar office with a Commodore64.  The first i remember about that
computer is, that my dad was just changing the tape-drive with a 5.25"
soft-floppy.

   Allthough i was very much into optimizing my system by tweaking the
autoexec.bat and config.sys, i usualy just did it to gain more free
memory over the 512k 'barrier', to play the games more fluently, as they
required an incredible high amount of RAM... up to 8MB!

   Later in 1995, i've had my hands on Slackware 3.0 and RedHat 2 or 3
(not RHEL, before Fedora).

   Between 1997 and 2001 i was self-employed PC-Supporter helping
private people as well as small- & medium companies in and around my
town.  In between there was some army services, and afterwards i've
raised a security company with some friends, which went well until 2004,
where i went back to my origins, and created homepages and flyers for
several bars, clubs, discotheques and other etablissements.

   Then finaly in 2011, i've had enough of Windows and 'joined the
GNU/Linux Community'.  Providing my part to it, by realizing/writing an
idea i've had almost 20 years ago...  TUI for scripts.

5.1.7 Manual License
--------------------

                     Version 1.3, 3 November 2008

     Copyright (C) 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc.
     <http://fsf.org/>

     Everyone is permitted to copy and distribute verbatim copies
     of this license document, but changing it is not allowed.

  0. PREAMBLE

     The purpose of this License is to make a manual, textbook, or other
     functional and useful document "free" in the sense of freedom: to
     assure everyone the effective freedom to copy and redistribute it,
     with or without modifying it, either commercially or
     noncommercially.  Secondarily, this License preserves for the
     author and publisher a way to get credit for their work, while not
     being considered responsible for modifications made by others.

     This License is a kind of "copyleft", which means that derivative
     works of the document must themselves be free in the same sense.
     It complements the GNU General Public License, which is a copyleft
     license designed for free software.

     We have designed this License in order to use it for manuals for
     free software, because free software needs free documentation: a
     free program should come with manuals providing the same freedoms
     that the software does.  But this License is not limited to
     software manuals; it can be used for any textual work, regardless
     of subject matter or whether it is published as a printed book.  We
     recommend this License principally for works whose purpose is
     instruction or reference.

  1. APPLICABILITY AND DEFINITIONS

     This License applies to any manual or other work, in any medium,
     that contains a notice placed by the copyright holder saying it can
     be distributed under the terms of this License.  Such a notice
     grants a world-wide, royalty-free license, unlimited in duration,
     to use that work under the conditions stated herein.  The
     "Document", below, refers to any such manual or work.  Any member
     of the public is a licensee, and is addressed as "you".  You accept
     the license if you copy, modify or distribute the work in a way
     requiring permission under copyright law.

     A "Modified Version" of the Document means any work containing the
     Document or a portion of it, either copied verbatim, or with
     modifications and/or translated into another language.

     A "Secondary Section" is a named appendix or a front-matter section
     of the Document that deals exclusively with the relationship of the
     publishers or authors of the Document to the Document's overall
     subject (or to related matters) and contains nothing that could
     fall directly within that overall subject.  (Thus, if the Document
     is in part a textbook of mathematics, a Secondary Section may not
     explain any mathematics.)  The relationship could be a matter of
     historical connection with the subject or with related matters, or
     of legal, commercial, philosophical, ethical or political position
     regarding them.

     The "Invariant Sections" are certain Secondary Sections whose
     titles are designated, as being those of Invariant Sections, in the
     notice that says that the Document is released under this License.
     If a section does not fit the above definition of Secondary then it
     is not allowed to be designated as Invariant.  The Document may
     contain zero Invariant Sections.  If the Document does not identify
     any Invariant Sections then there are none.

     The "Cover Texts" are certain short passages of text that are
     listed, as Front-Cover Texts or Back-Cover Texts, in the notice
     that says that the Document is released under this License.  A
     Front-Cover Text may be at most 5 words, and a Back-Cover Text may
     be at most 25 words.

     A "Transparent" copy of the Document means a machine-readable copy,
     represented in a format whose specification is available to the
     general public, that is suitable for revising the document
     straightforwardly with generic text editors or (for images composed
     of pixels) generic paint programs or (for drawings) some widely
     available drawing editor, and that is suitable for input to text
     formatters or for automatic translation to a variety of formats
     suitable for input to text formatters.  A copy made in an otherwise
     Transparent file format whose markup, or absence of markup, has
     been arranged to thwart or discourage subsequent modification by
     readers is not Transparent.  An image format is not Transparent if
     used for any substantial amount of text.  A copy that is not
     "Transparent" is called "Opaque".

     Examples of suitable formats for Transparent copies include plain
     ASCII without markup, Texinfo input format, LaTeX input format,
     SGML or XML using a publicly available DTD, and standard-conforming
     simple HTML, PostScript or PDF designed for human modification.
     Examples of transparent image formats include PNG, XCF and JPG.
     Opaque formats include proprietary formats that can be read and
     edited only by proprietary word processors, SGML or XML for which
     the DTD and/or processing tools are not generally available, and
     the machine-generated HTML, PostScript or PDF produced by some word
     processors for output purposes only.

     The "Title Page" means, for a printed book, the title page itself,
     plus such following pages as are needed to hold, legibly, the
     material this License requires to appear in the title page.  For
     works in formats which do not have any title page as such, "Title
     Page" means the text near the most prominent appearance of the
     work's title, preceding the beginning of the body of the text.

     The "publisher" means any person or entity that distributes copies
     of the Document to the public.

     A section "Entitled XYZ" means a named subunit of the Document
     whose title either is precisely XYZ or contains XYZ in parentheses
     following text that translates XYZ in another language.  (Here XYZ
     stands for a specific section name mentioned below, such as
     "Acknowledgements", "Dedications", "Endorsements", or "History".)
     To "Preserve the Title" of such a section when you modify the
     Document means that it remains a section "Entitled XYZ" according
     to this definition.

     The Document may include Warranty Disclaimers next to the notice
     which states that this License applies to the Document.  These
     Warranty Disclaimers are considered to be included by reference in
     this License, but only as regards disclaiming warranties: any other
     implication that these Warranty Disclaimers may have is void and
     has no effect on the meaning of this License.

  2. VERBATIM COPYING

     You may copy and distribute the Document in any medium, either
     commercially or noncommercially, provided that this License, the
     copyright notices, and the license notice saying this License
     applies to the Document are reproduced in all copies, and that you
     add no other conditions whatsoever to those of this License.  You
     may not use technical measures to obstruct or control the reading
     or further copying of the copies you make or distribute.  However,
     you may accept compensation in exchange for copies.  If you
     distribute a large enough number of copies you must also follow the
     conditions in section 3.

     You may also lend copies, under the same conditions stated above,
     and you may publicly display copies.

  3. COPYING IN QUANTITY

     If you publish printed copies (or copies in media that commonly
     have printed covers) of the Document, numbering more than 100, and
     the Document's license notice requires Cover Texts, you must
     enclose the copies in covers that carry, clearly and legibly, all
     these Cover Texts: Front-Cover Texts on the front cover, and
     Back-Cover Texts on the back cover.  Both covers must also clearly
     and legibly identify you as the publisher of these copies.  The
     front cover must present the full title with all words of the title
     equally prominent and visible.  You may add other material on the
     covers in addition.  Copying with changes limited to the covers, as
     long as they preserve the title of the Document and satisfy these
     conditions, can be treated as verbatim copying in other respects.

     If the required texts for either cover are too voluminous to fit
     legibly, you should put the first ones listed (as many as fit
     reasonably) on the actual cover, and continue the rest onto
     adjacent pages.

     If you publish or distribute Opaque copies of the Document
     numbering more than 100, you must either include a machine-readable
     Transparent copy along with each Opaque copy, or state in or with
     each Opaque copy a computer-network location from which the general
     network-using public has access to download using public-standard
     network protocols a complete Transparent copy of the Document, free
     of added material.  If you use the latter option, you must take
     reasonably prudent steps, when you begin distribution of Opaque
     copies in quantity, to ensure that this Transparent copy will
     remain thus accessible at the stated location until at least one
     year after the last time you distribute an Opaque copy (directly or
     through your agents or retailers) of that edition to the public.

     It is requested, but not required, that you contact the authors of
     the Document well before redistributing any large number of copies,
     to give them a chance to provide you with an updated version of the
     Document.

  4. MODIFICATIONS

     You may copy and distribute a Modified Version of the Document
     under the conditions of sections 2 and 3 above, provided that you
     release the Modified Version under precisely this License, with the
     Modified Version filling the role of the Document, thus licensing
     distribution and modification of the Modified Version to whoever
     possesses a copy of it.  In addition, you must do these things in
     the Modified Version:

       A. Use in the Title Page (and on the covers, if any) a title
          distinct from that of the Document, and from those of previous
          versions (which should, if there were any, be listed in the
          History section of the Document).  You may use the same title
          as a previous version if the original publisher of that
          version gives permission.

       B. List on the Title Page, as authors, one or more persons or
          entities responsible for authorship of the modifications in
          the Modified Version, together with at least five of the
          principal authors of the Document (all of its principal
          authors, if it has fewer than five), unless they release you
          from this requirement.

       C. State on the Title page the name of the publisher of the
          Modified Version, as the publisher.

       D. Preserve all the copyright notices of the Document.

       E. Add an appropriate copyright notice for your modifications
          adjacent to the other copyright notices.

       F. Include, immediately after the copyright notices, a license
          notice giving the public permission to use the Modified
          Version under the terms of this License, in the form shown in
          the Addendum below.

       G. Preserve in that license notice the full lists of Invariant
          Sections and required Cover Texts given in the Document's
          license notice.

       H. Include an unaltered copy of this License.

       I. Preserve the section Entitled "History", Preserve its Title,
          and add to it an item stating at least the title, year, new
          authors, and publisher of the Modified Version as given on the
          Title Page.  If there is no section Entitled "History" in the
          Document, create one stating the title, year, authors, and
          publisher of the Document as given on its Title Page, then add
          an item describing the Modified Version as stated in the
          previous sentence.

       J. Preserve the network location, if any, given in the Document
          for public access to a Transparent copy of the Document, and
          likewise the network locations given in the Document for
          previous versions it was based on.  These may be placed in the
          "History" section.  You may omit a network location for a work
          that was published at least four years before the Document
          itself, or if the original publisher of the version it refers
          to gives permission.

       K. For any section Entitled "Acknowledgements" or "Dedications",
          Preserve the Title of the section, and preserve in the section
          all the substance and tone of each of the contributor
          acknowledgements and/or dedications given therein.

       L. Preserve all the Invariant Sections of the Document, unaltered
          in their text and in their titles.  Section numbers or the
          equivalent are not considered part of the section titles.

       M. Delete any section Entitled "Endorsements".  Such a section
          may not be included in the Modified Version.

       N. Do not retitle any existing section to be Entitled
          "Endorsements" or to conflict in title with any Invariant
          Section.

       O. Preserve any Warranty Disclaimers.

     If the Modified Version includes new front-matter sections or
     appendices that qualify as Secondary Sections and contain no
     material copied from the Document, you may at your option designate
     some or all of these sections as invariant.  To do this, add their
     titles to the list of Invariant Sections in the Modified Version's
     license notice.  These titles must be distinct from any other
     section titles.

     You may add a section Entitled "Endorsements", provided it contains
     nothing but endorsements of your Modified Version by various
     parties--for example, statements of peer review or that the text
     has been approved by an organization as the authoritative
     definition of a standard.

     You may add a passage of up to five words as a Front-Cover Text,
     and a passage of up to 25 words as a Back-Cover Text, to the end of
     the list of Cover Texts in the Modified Version.  Only one passage
     of Front-Cover Text and one of Back-Cover Text may be added by (or
     through arrangements made by) any one entity.  If the Document
     already includes a cover text for the same cover, previously added
     by you or by arrangement made by the same entity you are acting on
     behalf of, you may not add another; but you may replace the old
     one, on explicit permission from the previous publisher that added
     the old one.

     The author(s) and publisher(s) of the Document do not by this
     License give permission to use their names for publicity for or to
     assert or imply endorsement of any Modified Version.

  5. COMBINING DOCUMENTS

     You may combine the Document with other documents released under
     this License, under the terms defined in section 4 above for
     modified versions, provided that you include in the combination all
     of the Invariant Sections of all of the original documents,
     unmodified, and list them all as Invariant Sections of your
     combined work in its license notice, and that you preserve all
     their Warranty Disclaimers.

     The combined work need only contain one copy of this License, and
     multiple identical Invariant Sections may be replaced with a single
     copy.  If there are multiple Invariant Sections with the same name
     but different contents, make the title of each such section unique
     by adding at the end of it, in parentheses, the name of the
     original author or publisher of that section if known, or else a
     unique number.  Make the same adjustment to the section titles in
     the list of Invariant Sections in the license notice of the
     combined work.

     In the combination, you must combine any sections Entitled
     "History" in the various original documents, forming one section
     Entitled "History"; likewise combine any sections Entitled
     "Acknowledgements", and any sections Entitled "Dedications".  You
     must delete all sections Entitled "Endorsements."

  6. COLLECTIONS OF DOCUMENTS

     You may make a collection consisting of the Document and other
     documents released under this License, and replace the individual
     copies of this License in the various documents with a single copy
     that is included in the collection, provided that you follow the
     rules of this License for verbatim copying of each of the documents
     in all other respects.

     You may extract a single document from such a collection, and
     distribute it individually under this License, provided you insert
     a copy of this License into the extracted document, and follow this
     License in all other respects regarding verbatim copying of that
     document.

  7. AGGREGATION WITH INDEPENDENT WORKS

     A compilation of the Document or its derivatives with other
     separate and independent documents or works, in or on a volume of a
     storage or distribution medium, is called an "aggregate" if the
     copyright resulting from the compilation is not used to limit the
     legal rights of the compilation's users beyond what the individual
     works permit.  When the Document is included in an aggregate, this
     License does not apply to the other works in the aggregate which
     are not themselves derivative works of the Document.

     If the Cover Text requirement of section 3 is applicable to these
     copies of the Document, then if the Document is less than one half
     of the entire aggregate, the Document's Cover Texts may be placed
     on covers that bracket the Document within the aggregate, or the
     electronic equivalent of covers if the Document is in electronic
     form.  Otherwise they must appear on printed covers that bracket
     the whole aggregate.

  8. TRANSLATION

     Translation is considered a kind of modification, so you may
     distribute translations of the Document under the terms of section
     4.  Replacing Invariant Sections with translations requires special
     permission from their copyright holders, but you may include
     translations of some or all Invariant Sections in addition to the
     original versions of these Invariant Sections.  You may include a
     translation of this License, and all the license notices in the
     Document, and any Warranty Disclaimers, provided that you also
     include the original English version of this License and the
     original versions of those notices and disclaimers.  In case of a
     disagreement between the translation and the original version of
     this License or a notice or disclaimer, the original version will
     prevail.

     If a section in the Document is Entitled "Acknowledgements",
     "Dedications", or "History", the requirement (section 4) to
     Preserve its Title (section 1) will typically require changing the
     actual title.

  9. TERMINATION

     You may not copy, modify, sublicense, or distribute the Document
     except as expressly provided under this License.  Any attempt
     otherwise to copy, modify, sublicense, or distribute it is void,
     and will automatically terminate your rights under this License.

     However, if you cease all violation of this License, then your
     license from a particular copyright holder is reinstated (a)
     provisionally, unless and until the copyright holder explicitly and
     finally terminates your license, and (b) permanently, if the
     copyright holder fails to notify you of the violation by some
     reasonable means prior to 60 days after the cessation.

     Moreover, your license from a particular copyright holder is
     reinstated permanently if the copyright holder notifies you of the
     violation by some reasonable means, this is the first time you have
     received notice of violation of this License (for any work) from
     that copyright holder, and you cure the violation prior to 30 days
     after your receipt of the notice.

     Termination of your rights under this section does not terminate
     the licenses of parties who have received copies or rights from you
     under this License.  If your rights have been terminated and not
     permanently reinstated, receipt of a copy of some or all of the
     same material does not give you any rights to use it.

  10. FUTURE REVISIONS OF THIS LICENSE

     The Free Software Foundation may publish new, revised versions of
     the GNU Free Documentation License from time to time.  Such new
     versions will be similar in spirit to the present version, but may
     differ in detail to address new problems or concerns.  See
     <http://www.gnu.org/copyleft/>.

     Each version of the License is given a distinguishing version
     number.  If the Document specifies that a particular numbered
     version of this License "or any later version" applies to it, you
     have the option of following the terms and conditions either of
     that specified version or of any later version that has been
     published (not as a draft) by the Free Software Foundation.  If the
     Document does not specify a version number of this License, you may
     choose any version ever published (not as a draft) by the Free
     Software Foundation.  If the Document specifies that a proxy can
     decide which future versions of this License can be used, that
     proxy's public statement of acceptance of a version permanently
     authorizes you to choose that version for the Document.

  11. RELICENSING

     "Massive Multiauthor Collaboration Site" (or "MMC Site") means any
     World Wide Web server that publishes copyrightable works and also
     provides prominent facilities for anybody to edit those works.  A
     public wiki that anybody can edit is an example of such a server.
     A "Massive Multiauthor Collaboration" (or "MMC") contained in the
     site means any set of copyrightable works thus published on the MMC
     site.

     "CC-BY-SA" means the Creative Commons Attribution-Share Alike 3.0
     license published by Creative Commons Corporation, a not-for-profit
     corporation with a principal place of business in San Francisco,
     California, as well as future copyleft versions of that license
     published by that same organization.

     "Incorporate" means to publish or republish a Document, in whole or
     in part, as part of another Document.

     An MMC is "eligible for relicensing" if it is licensed under this
     License, and if all works that were first published under this
     License somewhere other than this MMC, and subsequently
     incorporated in whole or in part into the MMC, (1) had no cover
     texts or invariant sections, and (2) were thus incorporated prior
     to November 1, 2008.

     The operator of an MMC Site may republish an MMC contained in the
     site under CC-BY-SA on the same site at any time before August 1,
     2009, provided the MMC is eligible for relicensing.

ADDENDUM: How to use this License for your documents
====================================================

To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and license
notices just after the title page:

       Copyright (C)  YEAR  YOUR NAME.
       Permission is granted to copy, distribute and/or modify this document
       under the terms of the GNU Free Documentation License, Version 1.3
       or any later version published by the Free Software Foundation;
       with no Invariant Sections, no Front-Cover Texts, and no Back-Cover
       Texts.  A copy of the license is included in the section entitled ``GNU
       Free Documentation License''.

   If you have Invariant Sections, Front-Cover Texts and Back-Cover
Texts, replace the "with...Texts." line with this:

         with the Invariant Sections being LIST THEIR TITLES, with
         the Front-Cover Texts being LIST, and with the Back-Cover Texts
         being LIST.

   If you have Invariant Sections without Cover Texts, or some other
combination of the three, merge those two alternatives to suit the
situation.

   If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of free
software license, such as the GNU General Public License, to permit
their use in free software.



Tag Table:
Node: Top630
Node: Introduction to TUI1212
Node: Installation4686
Node: Configuration5466
Node: Usage7722
Node: Appendix31395

End Tag Table
