#!/usr/bin/env bash
#
# Copyright (c) 2013-2015 Simon Arjuna Erat (sea)  <erat.simon@gmail.com>
# All rights reserved.
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>
#
# ------------------------------------------------------------------------
#
#	System defaults
#
	source "$HOME/.tuirc" && \
		. "$TUI_DIR_CONF/apps.conf" && \
		. "$TUI_FILE_CONF_COMMANDS" && \
		. "$TUI_FILE_CONF_SETTINGS" && \
		. $TUI_FILE_{CONF,USER}_APPS && \
		. $TUI_FILE_{CONF,USER}_SETTINGS || \
		. tuirc	# This first call would create the RC if its missing.
#
#	Variable defaults
#
	script_version=0.8.5
	ME="${0##*/}"
	help_text="\rUsage: $ME [options] [/path/to/]directory]
		\rWhere options are:
		\r\t-h\tThis screen
		\r\t-b\tShow progressbar
		\r\t-x\tExtract tarball
		\r
		\rIt is ment to pass foldernames to compress, it will store the tarball in current path, named like the last folder.
		\r
		\r"
	
	FILE_TEMP="$TUI_DIR_TEMP/tui-tar.status"
	FILE_CMD="$TUI_DIR_TEMP/bgjob"
	TMP=$TUI_FILE_TEMP
	touch "$TMP"
	DEST=""
	showBar=false
	doExtract=false
	beVerbose=false
#
#	Variable handling
#
	[ "--help" = "$1" ] && printf "$help_text" && exit 99
	showVersion() { 
	cat <<-EOF
		GNU $ME, Version $script_version
		Copyright (C) 2013 Free Software Foundation, Inc.
		License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>

		This is free software; you are free to change and redistribute it.
		There is NO WARRANTY, to the extent permitted by law.
	EOF
	}
	[ "--version" = "${1,,}" ] && showVersion && exit 0
	while getopts hbvx opt
	do	case "$opt" in
		h)	echo -e "$help_text" ; exit $RET_HELP
			;;
		b)	showBar=true
			;;
		x)	doExtract=true
			;;
		v)	beVerbose=true
			;;
		"")	unset ARGS[@]
			ARGS[0]=$(tui-read "Enter (absolute) path to tar:")
			;;
		esac
	done
	shift $(($OPTIND - 1))
	ARGS=(${@})
#
#	Display
#
	[ -z "$1" ] && echo -e "$help_text" && exit $RET_HELP
	for FOLDER in "${ARGS[@]}"
	do 	tui-printf -rS 2 "Initializing $FOLDER..."
		THIS="${FOLDER##*/}"
		PWD_ORG="$(pwd)"
		
		#set -x
		if $doExtract
		then	if [ -f "$FOLDER" ]
			then	size_tarball=$($LS -l "$FOLDER"|$AWK '{print $5}')
				[ -z "$size_tarball" ] && tui-echo "Failure reading $FOLDER!" && exit
				
				#list_tarball=($(tar tf "$FOLDER"))
				touch "$TUI_FILE_TEMP".2
				echo "tar tf \"$FOLDER\" > \"$TUI_FILE_TEMP\".2" > "$TUI_FILE_TEMP"
				$SHELL "$TUI_FILE_TEMP" &
				pid=$!
				#while ps | $GREP -q tar 
				while ps | $GREP -q $pid
				do	tui-progress "Reading $FOLDER..."
					sleep 0.3
				done
				list_tarball=( $(cat "$TUI_FILE_TEMP.2") )
				LAST=""
				CURRENT=""
				$showBar && tui-progress -rbm $size_tarball -i $$
				RET=0
				
				if $beVerbose
				then	tar axf "$FOLDER"
					RET=$?
				else	(tar axf "$FOLDER" ; echo $? > $TUI_FILE_TEMP) &
					PID=$!
					COUNT=0
					while ps | $GREP -q $PID
					do	# Parse list for current output file
						for entry in "${list_tarball[@]}"
						do	if [ -e "$entry" ]
							then	[ -z "$CURRENT" ] && \
									CURRENT="$entry"
								[ ! -z "$LAST" ] && \
									[ ! "$LAST" = "$CURRENT" ] && \
									COUNT=$(( $COUNT + 1 ))
								break
							fi
						done
						
						[ -e "$CURRENT" ] && \
							size_output=$($LS -l "$CURRENT"|$AWK '{print $5}') || \
							size_output=0
						if $showBar
						then	tui-progress -bi $$ -m $size_tarball -c $size_output "Extracting \"$CURRENT\"..."
						else	tui-progress -i $$ -m ${#list_tarball[@]} -c $COUNT "Extracting \"$FOLDER\"..."
						fi
						sleep 0.7
					done
					RET=$(cat $TUI_FILE_TEMP)
				fi
			else	tui-echo "$FOLDER is not a file or could not be found!"
			fi

			tui-status $RET "Extracted: $FOLDER"
			RET=$?
		else	DEST=$(tui-str-genfilename "$(pwd)/$THIS.$TAR_EXT")
			tui-printf -rS 2 "Initializing $FOLDER..."
			echo -e "tar -ac --one-file-system -f \"$DEST\" \"$THIS\" 2>&1 > /dev/zero > $TMP" > $FILE_CMD
			cd "$(dirname $FOLDER)"
			chmod +x "$FILE_CMD"

			# What is the org file size?
			if [ -d "$FOLDER" ]
			then	org_size=$(du "$FOLDER")000
			else	org_size=$($LS -l "$FOLDER"|$AWK '{print $5}')
			fi

			$showBar && tui-progress -rbm $org_size -i $$

			$FILE_CMD &
			pid=$!
			sleep 0.5
			#while [ ! "" = "$(ps|$GREP -v tui|$GREP tar)" ]
			while [ ! "" = "$(ps|$GREP -v tui|$GREP $pid)" ]
			do	[ -f "$DEST" ] && \
					tmp_display_size="$($LS -hl $DEST |$AWK '{print $5}')" && \
					tmp_size="$($LS -l $DEST |$AWK '{print $5}')"|| \
					tmp_size="0 btytes"
				if $showBar
				then	tui-progress -bm $org_size -i $$ -c $tmp_size "Compressing $THIS ($tmp_display_size)"
				else	tui-progress "Compressing..." "$THIS ($tmp_display_size)"
				fi
				sleep 0.7
			done
			cd "$PWD_ORG"
			[ -f "$DEST" ]
			tui-status $? "Compressed: $DEST"
			RET=$?
		fi
	done 
	exit $RET
