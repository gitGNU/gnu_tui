#!/usr/bin/env bash
# ------------------------------------------------------------------------
#
# Copyright (c) 2014-2015 by Simon Arjuna Erat (sea)  <erat.simon@gmail.com>
# All rights reserved.
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>
#
# ------------------------------------------------------------------------
#
#	A simple tool which returns the string of the selected num-id
#
#
#
#	Variables
#
	if source "$HOME/.tui_rc"
	then	# Source additional required internals
		. "$TUI_DIR_CONF/commands.conf"
		. "$TUI_DIR_CONF/apps.conf"
		. "$TUI_DIR_CONF/settings.conf"
		# User configuration
		. "$TUI_FILE_CONF_APPS"
		. "$TUI_FILE_CONF_SETTINGS"
		. "$TUI_DIR_THEMES/$TUI_THEME"
	else	# This first call would create the RC if its missing.
		# As this provides more variables, its faster to use just those above
		. tui	
	fi
	
	ME=${0##*/}
	script_version=0.7
	counter=0
	AUTO=false
	COLUMNS=$(tput cols)
	help_text="
$ME ($script_version)
Usage: 		$ME [options] LIST 'of items' ..
Examples:	ret=\$($ME one two three)
		$ME *
Where options are:
		-a	Autoselect if only one entry was found
"
#
#	Action
#
	ROWS=""
	while getopts "ha" opt
	do	case "$opt" in
		h|"")	printf "$help_text"
			exit 99
			;;
		a)	AUTO=true
			;;
		1|2)    ROWS=$opt
			;;
		esac
	done
	shift $(($OPTIND - 1))
	[ -z "$ROWS" ] || ROWS="-$ROWS"
	
	# This many digits to read at max
	ARGS=("${@}")
	len=${#ARGS[@]}
	$AUTO && \
		[ $len -eq 1 ] && \
		printf '%s\n' "$ARGS" > /dev/stdout && \
		exit 0
	
	# Show the options
	tui-list $ROWS "${ARGS[@]}" > /dev/stderr
	
	# Repeat input while invalid
	invalid=true
	while $invalid
	do	# Reset input line
		#tui-printf ">" > /dev/stderr
                #printf "\r$BORDER_LEFT > " > /dev/stderr
		printf "\r${BORDER_LEFT} >   \r${BORDER_LEFT} > " > /dev/stderr 
		invalid=false
		
		# Get input
		read -n ${#len} NUM
		[ -z "$NUM" ] && invalid=true && continue
		NUM=$(echo "$NUM")
		
		# It is a number in range?
		if [ "" = "$(echo "$NUM"|tr -d [:digit:])" ] && [ ${#NUM} -ne 0 ]
		then	# This some solves the selection of the last item....
			[ $NUM -eq ${#ARGS[@]} ] && NUM=0
			
			# Clear input if NUM is too high
			[ $NUM -gt $[ $len - 1 ] ] && \
				invalid=true && \
				printf "\r$BORDER_LEFT >   \r$BORDER_LEFT >" > /dev/stderr
			
			# Array starts at 0
			NUM=$(( $NUM - 1 ))
		else 	# Clear input if NUM is NOT numeric
			printf "\r${BORDER_LEFT} >   \r${BORDER_LEFT} > " > /dev/stderr 
		fi
	done
	
	# Make 'nice to have' linebreak when read automaticly stops reading
	if [ ${#NUM} -eq ${#len} ] 
	then	# Only print newline character if the entered number as the longest number
		printf "\n" > /dev/stderr
	fi
	
	# This is the output
	printf '%s\n' "${ARGS[$NUM]}" > /dev/stdout
