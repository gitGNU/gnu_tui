#!/usr/bin/env bash
# ------------------------------------------------------------------------
#
# Copyright (c) 2014-2015 by Simon Arjuna Erat (sea)  <erat.simon@gmail.com>
# All rights reserved.
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>
#
# ------------------------------------------------------------------------
#
#	Init TUI environment
#
	if source /etc/tuirc && source gettext.sh && source "${HOME:-/root}/.tuirc"
	then	for f in $TUI_FILE_{CONF,USER}_{APPS,COLORS,COMMANDS,SETTINGS};do source "$f";done
	else	source tuirc
	fi
	break_on_injections "$@" && exit 1
	TEXTDOMAIN="${0##*/}"	# Will be changed over time, but easier to copy paste
	TEXTDOMAINDIR="${TUI_DIR_SYSTEM/tui/locale}"	# Will be changed over time, but easier to copy paste
	export TEXTDOMAIN TEXTDOMAINDIR
#
#	A simple tool which returns the string of the selected num-id
#
#	TODO
#		check for:  read -h 2>&1|grep "\-n"
#
#	Variable environment
#
	BORDER_RIGHT=""
	# Source only the most required files, 
	# create the RC and load all variable if RC is not present yet.	
	# If there is a user theme directory, use that one instead
	if [ -f "$TUI_DIR_USER_THEMES/$TUI_THEME" ]
	then	source "$TUI_DIR_USER_THEMES/$TUI_THEME"
	else	source "$TUI_DIR_THEMES/$TUI_THEME" 
	fi
	# Use custom BORDER_RIGHT if it was set
	[ -z "$BORDER_RIGHT" ] && \
		for((i=${#BORDER_LEFT}-1;i>=0;i--)); do BORDER_RIGHT="$BORDER_RIGHT${BORDER_LEFT:$i:1}"; done
#
#	Variables
#	
	ME="${0##*/}"
	script_version=0.9.0c
	counter=0
	AUTO=false
	COLUMNS=$(tput cols)
	help_text="$(gettext '
$ME ($script_version)
Usage: 		$ME \[options\] item1 item2 ..
Examples:	ret=\$($ME one two three)
		$ME *
Where options are:
		-1|2		Print that many rows
		-a		Auto select if only one entry was found
		-v(erbose)	Print cancel option 0.

')"
#
#	Check for read capabilities if not set yet
#
	READ="${READ:-\read}"
	LC_ALL=C "$READ" --help 2>&1 | "$GREP" -v bash > "$TUI_FILE_TEMP"
	# Delimiter	
	"$GREP" -q "\[-d" "$TUI_FILE_TEMP"
	bash_read_delimiter=$(tui-str-bol-conv -t $?)
	# Input
	"$GREP" -q "\[-i" "$TUI_FILE_TEMP"
	bash_read_input=$(tui-str-bol-conv -t $?)
	# Prompt
	"$GREP" -q "\[-p" "$TUI_FILE_TEMP"
	bash_read_prompt=$(tui-str-bol-conv -t $?)
	# Numbers
	"$GREP" -q "\[-n" "$TUI_FILE_TEMP"
	bash_read_numbers=$(tui-str-bol-conv -t $?)
	# Timeout
	"$GREP" -q "\[-t" "$TUI_FILE_TEMP"
	bash_read_timeout=$(tui-str-bol-conv -t $?)
#
#	Action
#
	ROWS=""
	[ "--help" = "$1" ] && printf "$help_text" && exit 99
	version_text="$(eval_gettext '
GNU $ME, Version $script_version
Copyright (C) 2015 Simon Arjuna Erat
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>

This is free software; you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
')"
	[ "--version" = "${1,,}" ] && printf "$version_text" && exit 0
	while getopts "12hav" opt
	do	case "$opt" in
		h|"")	printf "$help_text"
			exit 99
			;;
		a)	AUTO=true
			;;
		1|2)    ROWS="$opt"
			;;
		v)	beVerbose=true
			;;
		esac
	done
	shift "$(($OPTIND - 1))"
	[ -z "$ROWS" ] || ROWS="$ROWS"
	
	# This many digits to read at max
	wasPipe=false
	[ -z "$1" ] && \
		wasPipe=true && \
		while IFS= read -r ARG
		do	set -- "$@" "$ARG"
		done
	ARGS=("${@}")
	len="${#ARGS[@]}"
	"$AUTO" && \
		[ "$#" -eq 1 ] && \
		printf '%s\n' "$ARGS" >&1 && \
		exit 0
	"$bash_read_numbers" && \
		cmd="read -n ${#len}" || \
		cmd="read"
	# Show the entries
	tui-list -n"$ROWS" "${ARGS[@]}" >&2
	
	# Repeat input while invalid
	invalid=true
	todo=false
	NUM=""
	while "$invalid"
	do	# Reset input line
		printf "\r${BORDER_LEFT} >      \r${BORDER_LEFT} > " >&2
		invalid=false
		
		# Get input
		"$wasPipe" && \
			"$cmd" NUM </dev/tty || \
			"$cmd" NUM
		# Catch invalid inputs
		[ -z "$NUM" ] && invalid=true && continue
		echo "$NUM" | $GREP '^\?' && invalid=true && continue
		echo "${NUM,,}" | tr -d [:digit:] | "$GREP" -q [0-9] && invalid=true && continue
		[ 0 -eq "${NUM/^\[\[[ABCD]/0}" ] 2>/dev/zero && exit 1
		if ! echo "$NUM" | "$GREP" -q ^[0-9] 
		then	NUM="" 
			invalid=true 
			tui-printf "" "" ""
			continue
		fi
		
		[ -z "$(echo $NUM)" ] && invalid=true && continue
		
		# It is a number in range?
		if [ "" = "$(echo $NUM|tr -d [:digit:])" ] && [ "${#NUM}" -ne 0 ]
		then	# This some solves the selection of the last item....
			[ "$NUM" -eq "${#ARGS[@]}" ] && NUM=0
			
			# Clear input if NUM is too high
			if [ "$NUM" -gt "$(( $len - 1 ))" ]
			then	invalid=true
				printf "\r$BORDER_LEFT >   \r$BORDER_LEFT >" >&2
			else	[ "$NUM" -eq 0 ] && todo=true
			fi
			
			# Array starts at 0 --> Fails if quotes
			NUM="$(( $NUM - 1 ))"
		else 	# Clear input if NUM is NOT numeric
			printf "\r${BORDER_LEFT} >   \r${BORDER_LEFT} > " >&2
		fi
	done
	"$todo" && printf "\n" >&2
	# Make 'nice to have' line break when read automatically stops reading
	if [ "${#NUM}" -eq "${#len}" ] 
	then	# Only print newline character if the entered number as the longest number
		# But not sub zero
		[ "${NUM}" -ne -1 ] && printf "\n" >&2
	else	# Since arrays are 0 indexed, 10 becomes 9 and need special treatment
		[ "${NUM}" -eq 9 ] && printf "\n" >&2
	fi
	
	# This is the output
	printf '%s\n' "${ARGS[$NUM]}" >&1
