#!/usr/bin/env bash 
# ------------------------------------------------------------------------
#
# Copyright (c) 2014-2015 by Simon Arjuna Erat (sea)  <erat.simon@gmail.com>
# All rights reserved.
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>
#
# ------------------------------------------------------------------------
#
	source /etc/tuirc
	for f in $TUI_FILE_CONF_{COMMANDS,STATUS}
	do	[ -f "$f" ] && source "$f"
	done
#
#	File:		tui-install
#	Author: 	Simon Arjuna Erat (sea)
#	Contact:	erat.simon@gmail.com
#	License:	GNU General Public License (GPL)
#	Created:	2014.07.28
#	Changed:	2015.06.27
	script_version=0.7.0
	TITLE="Install packages"
#	Description:	Install provided packages, using the 'default' package manager
#			that is to be expected on this based distro.
#
#
#	Script Environment
#
	ME="${0##*/}"				# Basename of tui-install
#
#	Help text
#
	help_text="
$ME ($script_version)
${TITLE^}
Usage: 		$ME [options] PACKAGES
Examples:	$ME PACKAGE
		$ME -
		$ME -q pkg1 pkg2
		$ME -l /path/to/logfile.log LIST OF PACKAGES
Where options are:
	-h(elp) 		This screen
	-------------------------------------------------------
	-b(ased)		Prints on what the distro is based on and exit
	-d(istro)		Prints the distro name and exit
	-l(og)		ARG	Writes and entry to ARG wheter installation was sucessfull or not
	-q(uiet)		Install all at once, will fail if not all packages are available

"
#
#	Variables
#
	#source /etc/profile.d/tui.sh
	doLog=false
	verbose=true
	LOG=""
#
#	Functions
#
	distro() { #
	# Should print the name of the distro
	#
        	if [ ! -f /etc/os-release ]
		then	tui-conf-get /etc/os-release NAME #>&1
		else	e=/etc
			SF="release version"    # Search For

			results=$(for a in $SF;do ls $e|$GREP $a;done)
			resultsFiles=$(for each in $results;do [ -f "$e/$each" ] && printf "$each ";done)

			for each in $resultsFiles
			do      strcat="$(grep -i ^id= $e/$each)"
				[ ! -z "$strcat" ] && break
			done
			#printf "$(printf $strcat|$AWK {'printf $1'})"
			printf "$(printf ${strcat/*=}|$SED s,'"','',g)"
		fi
	}
	based() { #
	# Returns arch, debian, redhat or unkown
	#
    		out=""
		if [ -f /etc/redhat-release ] 
		then	out=redhat
		elif [ -f /etc/arch-release ]
		then	out=arch
		elif [ -f /etc/debian_version ]
		then	out=debian
		else	out=unknown
			# Do further checkings
			# Changes according to: https://github.com/icy/pacapt/blob/ng/pacapt (153-180)
			which cave   1>/dev/zero 2>/dev/zero && out=exherbo
			which emerge 1>/dev/zero 2>/dev/zero && out=gentoo
			which port   1>/dev/zero 2>/dev/zero && out=mac
			which brew   1>/dev/zero 2>/dev/zero && out=mac
			which zypper 1>/dev/zero 2>/dev/zero && out=opensuse
			# Not sure if i handle these 2 properly
			which pkg 1>/dev/zero 2>/dev/zero && out=openbsd
			which pkgng 1>/dev/zero 2>/dev/zero && out=freebsd
		fi
		echo $out
	}
#
#	Catching Arguments
#
	[ "--help" = "$1" ] && printf "$help_text" && exit 99
	showVersion() { 
	cat <<-EOF
		GNU $ME, Version $script_version
		Copyright (C) 2015 Simon Arjuna Erat
		License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>

		This is free software; you are free to change and redistribute it.
		There is NO WARRANTY, to the extent permitted by law.
	EOF
	}
	[ "--version" = "${1,,}" ] && showVersion && exit 0
	while getopts "bdhl:v" opt
	do 	case $opt in
		h)	printf "$help_text"
			exit $RET_HELP
			;;
		#------------------------
		b)	# Print distro name and exit
			based
			exit 0
			;;
		d)	# Print distro name and exit
			distro
			exit 0
			;;
		l)	dolog=true
			LOG="$OPTARG" 	;;
		q)	verbose=false	;;
		*)	printf "$help_text" ; exit $?	;;
		esac
	done
	shift $(($OPTIND - 1))
	ARGS=("${*}")			# Remaining arguments
	ARGS_COUNT=${#ARGS[@]}		# Amount of remaining
	pkgs="${ARGS[*]}"
#
#	Display & Action
#
	[ 0 -ne $UID ] && \
		tui-echo "$ME requires root access!" "$FAIL" && \
		exit 1
	tui-printf -E "Installing as dependency:" "$(echo $@)"
	tui-yesno "Continue?" || exit 0
	# Get the right installer
	case $(based) in
	arch)		APP=pacman	;;
	debian)		APP=apt-get	;;
	redhat)		which dnf 1>/dev/zero 2>/dev/zero && \
				APP=dnf || \
				APP=yum		;;
	# Additions according to: https://github.com/icy/pacapt/blob/ng/pacapt (153-180)
	opensuse)	APP=zypper	;;
	exherbo)	APP=cave	;;
	gentoo)		APP=emerge	;;
	mac)		for APP in port brew
			do
				which $APP 2>/dev/zero 1>/dev/zero && break
			done
			;;
	*bsd)		APP=pkg	;;
	esac
	
	# Generate commands for the installer
	cmd=""
	case $APP in
	yum|dnf)		cmd+=" -q -y install"	;;	
	apt-get)	cmd="-q -y install"	;;
	pacman)		cmd="-S --noconfirm"		;;
	# Additions according to: https://github.com/icy/pacapt/blob/ng/pacapt (379-1056)
	brew|port)	cmd="install -y"		;;
	cave)		cmd="resolve -x "	;;
	emerge)		cmd=""			;;
	zypper)		cmd="install -y"		;;
	pkg)		cmd="install -y"	;;
	esac
#	echo "$verbose -- $APP -- $cmd" ; exit
	# Install depending upon verbosity	
	if $verbose
	then	# Is on, install each package on its own line...
		count_good=0
		good_ones=""
		bad_ones=""
		count_total=1
		# Actualy install the packages
		tui-progress -r
		for app in ${ARGS[*]};do
			cmd_all="$APP $cmd $app"
			app_name=$(basename $app)
			$doLog && tui-log "$LOG" "Execute: $cmd_all"
			
			tui-progress -m $# "Installing: $app_name" > /dev/zero
			tui-printf -rS 2 "Installing $app_name"
			$cmd_all > /dev/zero 1>/dev/zero 2>/dev/zero && RET=0 || RET=1
			
			tui-status $RET "Installed package: $app_name" && \
				( $doLog && tui-log "$LOG" "Successfully installed: $app" ) || \
				( $doLog && tui-log "$LOG" "Failed to install: $app" )
			[ 0 -eq $RET ] && \
				good_ones+=" $app_name" && ((count_good++)) || \
				bad_ones+=" $app_name"
			((count_total++))
		done
		[ -z "$bad_ones" ] && \
			tui-echo "There were $[ $count_total - $count_good ] errors, namely these:" "$bad_ones"
	else	# Do all in one bunch, but shorten the names to display
		all_pkgs=""
		for a in "${@}";do all_pkgs+=" $(basename $a)";done
		tui-printf -rS 2 "Installing $all_pkgs"
		cmd_all="$APP $cmd $@"
		$doLog && tui-log "$LOG" "Trying to execute: $cmd_all"
		
		$cmd_all > /dev/zero 1>/dev/zero 2>/dev/zero && RET=0 || RET=1
		[ -z "$RET" ] && RET=1
		tui-status $RET "Installed: '${pkgs[@]}' " && \
			 ( $doLog && tui-log "$LOG" "Successfully installed: '$pkgs'" ) || \
			 ( $doLog && tui-log "$LOG" "Failed to install: '$pkgs'" )
	fi
	exit $RET
