#!/usr/bin/env bash 
# ------------------------------------------------------------------------
#
# Copyright (c) 2014-2015 by Simon Arjuna Erat (sea)  <erat.simon@gmail.com>
# All rights reserved.
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANT ABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>
#
# ------------------------------------------------------------------------
#
	ME="${0##*/}"
	for tmp_task in "/etc" "${HOME:-/root}/.local" "$HOME"
	do 	[ -f "$tmp_task/tui.conf" ] && source "$tmp_task/tui.conf" && [ ! -z "${SYSCONFDIR}!" ] && break
	done
	# Get the main config files
	# 
	if source "${SYSCONFDIR}/tuirc" || ( [ -f ./tuirc ] && source ./tuirc )
	then 	# Load required variables
		for f in $TUI_FILE_CONF_{COMMANDS,STATUS}
		do	[ -f "$f" ] && source "$f"
		done
	else	source tuirc
	fi
	break_on_injections "$@" && exit 1
#
#	File:		tui-install
#	Author: 	Simon Arjuna Erat (sea)
#	Contact:	erat.simon@gmail.com
#	License:	GNU General Public License (GPL)
#	Created:	2014.07.28
#	Changed:	2015.11.07
	script_version=0.9.1a
	ME="${0##*/}"				# Basename of tui-install
#	Description:	Install provided packages, using the 'default' package manager
#			that is to be expected on this based distro.
#
#
#	Translate preps
#
	source gettext.sh
	TEXTDOMAIN="${0##*/}"	# Will be changed over time, but easier to copy paste
	TEXTDOMAINDIR="${TUI_DIR_SYSTEM/tui/locale}"	# Will be changed over time, but easier to copy paste
	export TEXTDOMAIN TEXTDOMAINDIR
#
#	Translate strings
#
	
	TITLE="$(gettext 'Install packages')"
	TR_MSG_TEXT_VERSION="$(eval_gettext '
TUI ($ME, Version $script_version)
Copyright (C) 2011-2015 Simon Arjuna Erat
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>

This is free software; you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
')"
	TR_MSG_TEXT_HELP="$(eval_gettext '
NAME
  $ME - Package installer

SYNOPSYS
  $ME [-h|--help] [--version] [-bdqy] [-l LOG] PACK AG ES ..

DESCRIPTION
  It is not a synonym for "install", but aims to become a handler for package managers, but only to install dependencies.
  
  To do so, it is looking for the most known/spearch distros, and tries to figure out if it is based on another.
  It reckognizes: arch, debian (*buntu, mint), redhat (centos, fedora, sl)
  Needs verification for: exherbo, gentoo, mac, opensusue, openbsd, freebsd
  
  Currently it installs using: yum/dnf, pcmanm, apt-get
  Need verification for: brew, cave, emerge, port, pkg, pkgng, zypper
  
  The return values of "-b" and "-d" are ment to assist you to provide the proper package names.
  
OPTIONS
  -h|--help	Shows help and exit with 99
  --version	Shows version infoand exit with 0
  
  -b		Prints on what the distro is based on and exit
  -d		Prints the distro name and exit
  -l LOG	Writes and entry to LOG whether installation was successful or not
  -q		Install all at once, will fail if not all packages are available
  -y		Automatically accept the package manager questions
 
EXAMPLE

	$ME -b
	
	$ME -d
	
	no | $ME gimp
	
	$ME -y gimp

SEE ALSO
  bash(1), yum(1), dnf(1), pcman(1), apt-get(1), cave(1), brewer
  
BUGS
  Report bugs to: <tui-support@nongnu.org>
  
  TUI - Homepage: <https://savannah.nongnu.org/projects/tui>
  
  General help using GNU software: <http://www.gnu.org/gethelp/>

AUTHOR
  Simon Arjuna Erat, <http://linux-scripter.blogspot.ch>
')"
#
#	Help text
#
	help_text="$TR_MSG_TEXT_HELP
"
#
#	Variables
#
	#source /etc/profile.d/tui.sh
	doLog=false
	doYes=false
	verbose=true
	LOG=""
#
#	Functions
#
	distro() { #
	# Should print the name of the distro
	#
        	if [ ! -f /etc/os-release ]
		then	tui-conf-get /etc/os-release NAME #>&1
		else	e=/etc
			SF="release version"    # Search For

			results=$(for a in $SF;do ls "$e"|"$GREP" "$a";done)
			resultsFiles=$(for each in $results;do [ -f "$e/$each" ] && printf "$each ";done)

			for each in $resultsFiles
			do      strcat="$($GREP -i ^id= $e/$each)"
				[ ! -z "$strcat" ] && break
			done
			#printf "$(printf $strcat|$AWK {'printf $1'})"
			printf "$(printf ${strcat/*=}|$SED s,'"','',g)"
		fi
	}
	based() { #
	# Returns arch, debian, redhat or unknown
	#
    		out=""
		if [ -f /etc/redhat-release ] 
		then	out=redhat
		elif [ -f /etc/arch-release ]
		then	out=arch
		elif [ -f /etc/debian_version ]
		then	out=debian
		else	out=unknown
			# Do further checking
			# Changes according to: https://github.com/icy/pacapt/blob/ng/pacapt (153-180)
			which cave   1>/dev/zero 2>/dev/zero && out=exherbo
			which emerge 1>/dev/zero 2>/dev/zero && out=gentoo
			which port   1>/dev/zero 2>/dev/zero && out=mac
			which brew   1>/dev/zero 2>/dev/zero && out=mac
			which zypper 1>/dev/zero 2>/dev/zero && out=opensuse
			# Not sure if i handle these 2 properly
			which pkg 1>/dev/zero 2>/dev/zero && out=openbsd
			which pkgng 1>/dev/zero 2>/dev/zero && out=freebsd
		fi
		echo $out
	}
#
#	Catching Arguments
#
	[ "--help" = "$1" ] && printf "$help_text" && exit 99
	showVersion() { 
		cat <--EOF
		$TR_MSG_TEXT_VERSION
		EOF
	}
	[ "--version" = "${1,,}" ] && showVersion && exit 0
	while getopts "bdhl:vy" opt
	do 	case $opt in
		h)	printf "$help_text"
			exit $RET_HELP
			;;
		#------------------------
		b)	# Print distro name and exit
			based
			exit 0
			;;
		d)	# Print distro name and exit
			distro
			exit 0
			;;
		l)	dolog=true
			LOG="$OPTARG" 	;;
		q)	verbose=false	;;
		y)	doYes=true	;;
		*)	printf "$help_text" ; exit $?	;;
		esac
	done
	shift $(($OPTIND - 1))
	ARGS=("${*}")			# Remaining arguments
	ARGS_COUNT=${#ARGS[@]}		# Amount of remaining
	pkgs="${ARGS[*]}"
#
#	Display & Action
#
	[ 0 -ne $UID ] && \
		tui-print -E  "$(eval_gettext '$ME requires root access!')" "$FAIL" && \
		exit 1
	tui-print -E  "$(gettext 'Installing as dependency:')" "$(echo $@)"
#	if ! $doYes
#	then	tui-yesno "Continue?" || exit 0
#	fi
	# Get the right installer
	case "$(based)" in
	arch)		APP=pacman	;;
	debian)		APP=apt-get	;;
	redhat)		which dnf 1>/dev/zero 2>/dev/zero && \
				APP=dnf || \
				APP=yum		;;
	# Additions according to: https://github.com/icy/pacapt/blob/ng/pacapt (153-180)
	opensuse)	APP=zypper	;;
	exherbo)	APP=cave	;;
	gentoo)		APP=emerge	;;
	mac)		for APP in port brew
			do 	which "$APP" 2>/dev/zero 1>/dev/zero && break
			done
			;;
	*bsd)		APP=pkg	;;
	esac
	
	# Generate commands for the installer
	case "$APP" in
	yum|dnf)	cmd="-q install"	;;	
	apt-get)	cmd="-q install"	;;
	pacman)		cmd="-S"		;;
	# Additions according to: https://github.com/icy/pacapt/blob/ng/pacapt (379-1056)
	brew|port)	cmd="install"		;;
	cave)		cmd="resolve -x"	;;
#	emerge)		cmd=""			;;
	zypper)		cmd="install"		;;
	pkg)		cmd="install"		;;
	esac
#
#	Append 'auto-yes'
#
	if "$doYes"
	then	case "$APP" in
		yum|dnf|apt-get|brew|port|zypper|pkg)
				cmd+=" -y"		;;	
		pacman)		cmd+=" --noconfirm"	;;
		#emerge|cave)	echo missing		;;
		esac
	fi
#	echo "$verbose -- $APP -- $cmd" ; exit
	# Install depending upon verbosity	
	#set -x
	MSG_TR_WORD_INSTALLED="$(gettext 'Installed')"
	MSG_TR_WORD_INSTALLING="$(gettext 'Installing')"
	MSG_TR_WORD_INSTALLED_SUCCESS="$(gettext 'Successfully installed')"
	MSG_TR_WORD_INSTALLED_FAILED="$(gettext 'Failed to install')"
	
	if $verbose
	then	# Is on, install each package on its own line...
		count_good=0
		good_ones=""
		bad_ones=""
		count_total=1
		# Actually install the packages
		tui-progress -r
		for app in ${ARGS[*]};do
			cmd_all="$APP $cmd $app"
			app_name="$(basename $app)"
			$doLog && tui-log "$LOG" "$(gettext 'Execute:') $cmd_all"
			
			tui-progress -m $# "$MSG_TR_WORD_INSTALLING: $app_name" #> /dev/zero
			tui-print -rS 2 "$MSG_TR_WORD_INSTALLING $app_name"
			
			if $doYes
			then	$cmd_all > /dev/zero 1>/dev/zero 2>/dev/zero && RET=0 || RET=1
			else	$cmd_all && RET=0 || RET=1
			fi
			
			tui-status $RET "Installed package: $app_name" && \
				( $doLog && tui-log "$LOG" "$MSG_TR_WORD_INSTALLED_SUCCESS: $app" ) || \
				( $doLog && tui-log "$LOG" "$MSG_TR_WORD_INSTALLED_FAILED: $app" )
			[ 0 -eq $RET ] && \
				good_ones+=" $app_name" && ((count_good++)) || \
				bad_ones+=" $app_name"
			((count_total++))
		done
		ERR_NO="$[ $count_total - $count_good ]"
		[ -z "$bad_ones" ] && \
			tui-print -E  "$(eval_gettext 'There were $ERR_NO errors, namely these:')" "$bad_ones"
	else	# Do all in one bunch, but shorten the names to display
		all_pkgs=""
		for a in "${@}";do all_pkgs+=" $(basename $a)";done
		tui-print -rS 2 "$MSG_TR_WORD_INSTALLING $all_pkgs"
		cmd_all="$APP $cmd $@"
		$doLog && tui-log "$LOG" "$(gettext 'Trying to execute'): $cmd_all"
		
		if "$doYes"
		then	$cmd_all > /dev/zero 1>/dev/zero 2>/dev/zero && RET=0 || RET=1
		else	$cmd_all
		fi
		[ -z "$RET" ] && RET=1
		tui-status $RET "$MSG_TR_WORD_INSTALLED: '${pkgs[@]}' " && \
			 ( $doLog && tui-log "$LOG" "$MSG_TR_WORD_INSTALLED_SUCCESS: '$pkgs'" ) || \
			 ( $doLog && tui-log "$LOG" "$MSG_TR_WORD_INSTALLED_FAILED: '$pkgs'" )
	fi
	exit "$RET"
