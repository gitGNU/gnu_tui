#!/usr/bin/env bash
# ------------------------------------------------------------------------
#
# Copyright (c) 2014-2015 by Simon Arjuna Erat (sea), erat.simon@gmail.com
# All rights reserved.
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License (GPL) as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License (GPL) for more details.
#
# You should have received a copy of the GNU General Public License (GPL)
# along with this program.  If not, see http://www.gnu.org/licenses/gpl.html
#
# ------------------------------------------------------------------------
#
	source /etc/tuirc && \
		break_on_injections "$@" && \
		exit 1
	source "$HOME/.tuirc"  2>/dev/zero || source tuirc
#	File:		tui-bgjob-mgr
#	Author: 	Simon Arjuna Erat (sea)
#	Contact:	erat.simon@gmail.com
#	License:	GNU General Public License (GPL)
#	Created:	2014.10.15
#	Changed:	2015.07.13
	script_version=0.9.5
	TITLE="Paralell Script Manager"
#	Description:	Executes all scripts in parallel, unless LIMIT says different, default 5, disabled 0
#	Resources:	http://www.unix.com/shell-programming-and-scripting/252114-bash-script-manage-background-scripts-running-finished-exit-code.html
#
#
#	Script Environment
#
	ME="${0##*/}"				# Basename of tui-bg-scripts
	ME="${ME/.sh/}"				# Cut off .sh extension
	[ ! "." = "$(dirname $0)" ] && \
		ME_DIR="$(dirname $0)" || \
		ME_DIR="$(pwd)"			# Dirname of tui-bg-scripts
	CONFIG_DIR="$TUI_DIR_USER"		# Configuration directory
	CONFIG="$CONFIG_DIR/$ME.conf"		# Configuration file
	TEMP="$TUI_DIR_TEMP/$ME/$$"		# Make dynamic sub folders, so multiple instances would be possible (but not recommended!)
	tui-bol-root && \
		LOG="$TUI_DIR_LOGS/$ME.log" || \
		LOG="$TUI_DIR_USER_LOGS/$ME.log" # Log file placement according to user
	LIMIT=5
	WAIT=5
	COUNT=false
	QUIET=false
	DEBUG=false
	beVerbose=false
#
#
#	Help text
#
	help_text="
$ME ($script_version)
${TITLE^}
Usage: 		$ME [options] [arguments]
Examples:	$ME ./script1 /some/path/script2
		$ME -c script[1-9] ; echo \$?
Where options are:
	-h(elp) 		This screen
	-L(og)			Show the log file ($LOG)
	-c(count)		The exit code is now the number of successfully executed scripts.
	-l(imit)	NUM	Limits the number of parallel executed scripts, 5 default, 0 to disable
	-d(el-log)		Deletes (empty) the log file ($LOG)
	-q(uiet)		Just return the exit code, be non-verbose
	-v(erbose)		Be verbose, starts every script in its own terminal (GUI only!)
	-w(wait)	NUM	Change the amount of seconds to wait between update-checks

Files:
--------------------------------------
Log:		$LOG
Temp dir:	$TEMP

"
#
#	Functions
#
	doLog() { # "MESSAGE STRING"
	# Prints: Time & "Message STRING"
	# See 'tui-log -h' for more info
		tui-log -t "$LOG" "$1"
	}
#
#	Environment checks
#
	[ -d "$TEMP" ] || mkdir -p "$TEMP"
	[ ! -e "$LOG" ] && \
		touch $LOG && \
		doLog "------------------------------------------" && \
		doLog "Created log file of $ME ($script_version)" && \
		doLog "------------------------------------------"
#
#	Catching Arguments
#
	[ "--help" = "$1" ] && printf "$help_text" && exit 99
	showVersion() { 
	cat <<-EOF
		GNU $ME, Version $script_version
		Copyright (C) 2015 Simon Arjuna Erat
		License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>

		This is free software; you are free to change and redistribute it.
		There is NO WARRANTY, to the extent permitted by law.
	EOF
	}
	[ "--version" = "${1,,}" ] && showVersion && exit 0
	while getopts "cdhLl:qvw:" opt
	do 	case $opt in
		h)	printf "$help_text"
			rm -fr "$TEMP"
			exit $RET_HELP
			;;
		L)	less "$LOG"	
			rm -fr "$TEMP"
			exit $RET_DONE
			;;
		d)	printf "" > "$LOG"
			rm -fr "$TEMP"
			exit $?
			;;
		l)	LIMIT=$OPTARG
			log_msg="Changed the limit to: $LIMIT"
			;;
		c)	COUNT=true
			log_msg="Count is now $COUNT"
			;;
		q)	QUIET=true
			log_msg="Enabled quiet mode"
			;;
		v)	beVerbose=true
			log_msg="Enabled DEBUG mode"
			;;
		w)	WAIT=$OPTARG
			log_msg="Change the wait interval to: $WAIT"
			;;
		esac
		# Print $log_msg to $LOG and print $log_msg to user if verbosity is enabled
		doLog "Options: $log_msg"
	done
	shift $(($OPTIND - 1))
#
#	Variable presets
#
	script_name=( "${@}" )		# Contains all files
	MAX="${#script_name[@]}"		# Max amount of scripts
	script_status=( $(for s in "${script_name[@]}";do echo "3";done) )		# Status with same counter of that file	: done(0) failed(1) running(2) todo(3)
	script_pid=()			# PID with the same counter of that file
	# Counters
	RUN=0			# How many scripts are currently running
	# Verify all scripts are executable
	for script in "${script_name[@]}";do [ -x "$script" ] || chmod +x "$script";done
#
#	Display & Action
#
	DONE=0
	while [ "$DONE" -lt "$MAX" ]
	do	# Loop the menu
		C=0			# Reset counters to prevent 'over counting'
		DONE=0			# How many scripts are 'done' (regardless of status)
		GOOD=0			# How many scripts ended successfully
		if ! "$QUIET"
		then	clear
			tui-header "$TITLE ($script_version)" "$(date +'%F %T')"
			tui-title "Status"
		fi
		
		while [ $C -lt $MAX ]
		do	# Vars
			STATUS="${script_status[$C]}"	# Current status
			RET_FILE="$TEMP/$(basename ${script_name[$C]}).ret"
			TMP="$TEMP/$(basename ${script_name[$C]}).cmd"
			script="${script_name[$C]}"
			
			# Do action according to current status
			case "$STATUS" in
			2)	# IS PID still available?
				pid="${script_pid[$C]}"
				if [ ! -z "$(echo $pid)" ]
				then	if ! ps "$pid" > /dev/zero
					then	# Its finished
						read RET < "$RET_FILE"
						[ -z "$RET" ] && RET=1
						script_status[$C]="$RET"
						((RUN--))
						# Make log file a bit more informative
						msg="end"
						[ $RET -eq 130 ] && msg="cancel"
						[ $RET -eq 127 ] && msg="typo"
						doLog "$script($pid) ,$msg $RET"
					fi
				else 	msg="FAILED script: Empty pid while running : $script($pid) returned $RET"
					tui-status 1 "$msg"
					doLog "$msg"
				fi
				;;
			3)	# Its TODO, can we start it?
				if [ "$RUN" -lt "$LIMIT" ] || [ "$LIMIT" -eq 0 ]
				then 	script_status[$C]=2
					STATUS=2
					((RUN++))
					[ [./] = "${script:0:1}" ] && PRE="" || PRE="./"
					cmd="\"${PRE}$script\" ; echo \$? > \"$RET_FILE\""
					touch "$RET_FILE"
					"$beVerbose" && \
						echo "$cmd" > "$TMP" && \
						tui-terminal "$TMP" || \
						( eval "$cmd" 1>/dev/zero ) &
					script_pid[$C]="$!"
					doLog "$script($!) ,starting"
				fi
				;;
			*)	((DONE++))
				[ "$STATUS" -eq 0 ] && ((GOOD++))
				;;
			esac

			# Display latest status
			if ! $QUIET
			then	case $STATUS in
				0|1)	tui-status $STATUS "Finished ${script_name[$C]}"  ;;
				2)	tui-status $STATUS "Running ${script_name[$C]}" "${script_pid[$C]}" ;;
				3)	tui-status $STATUS "Waiting ${script_name[$C]}"	;;
				127)	tui-status 1 "Typo in script: \"${script_name[$C]}\""	;;
				*)	tui-status 1 "Invalid STATUS ($STATUS) on $C ${script_name[$C]}"	;;
				esac
			fi
			((C++))
		done
		
		if ! $QUIET
		then	tui-echo
			tui-title "Summary"
			tui-echo "Scripts completed:" 	  "$DONE/$MAX"
			tui-echo "Currently running:" 	  "$RUN/$LIMIT"
			tui-echo "Successfully executed:" "$GOOD"
			
			tui-echo
			tui-wait $WAIT "Wait for update..."
			echo
		else	sleep $WAIT
		fi
	done
#
#	Exit how the user want
#
	doLog "You started $MAX scripts, of which $GOOD exited with success"
	tui-log -e "$LOG" "----------------------------------------------"
	tui-log -e "$LOG" ""
	rm -fr "$TEMP"

	if $COUNT
	then	exit $GOOD
	else	exit 0
	fi
