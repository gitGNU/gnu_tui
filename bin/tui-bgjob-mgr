#!/usr/bin/env bash
# ------------------------------------------------------------------------
#
# Copyright (c) 2014-2015 by Simon Arjuna Erat (sea), erat.simon@gmail.com
# All rights reserved.
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License (GPL) as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANT ABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License (GPL) for more details.
#
# You should have received a copy of the GNU General Public License (GPL)
# along with this program.  If not, see http://www.gnu.org/licenses/gpl.html
#
# ------------------------------------------------------------------------
#
	ME="${0##*/}"
	for tmp_task in "/etc" "${HOME:-/root}/.local" "$HOME"
	do 	[ -f "$tmp_task/tui.conf" ] && source "$tmp_task/tui.conf" && [ ! -z "${SYSCONFDIR}!" ] && break
	done
	# Get the main config files
	# 
	if source "${SYSCONFDIR}/tuirc" && source "${HOME:-/root}/.tuirc" 2>/dev/zero
	then 	# Load required variables
		for f in $TUI_FILE_{CONF,USER}_{APPS,COMMANDS,SETTINGS}
		do	[ -f "$f" ] && source "$f"
		done
	else	source tuirc
	fi
	break_on_injections "$@" && exit 1

#	File:		tui-bgjob-mgr
#	Author: 	Simon Arjuna Erat (sea)
#	Contact:	erat.simon@gmail.com
#	License:	GNU General Public License (GPL)
#	Created:	2014.10.15
#	Changed:	2015.09.17
	script_version=0.9.7
#	Description:	Executes all scripts in parallel, unless LIMIT says different, default 5, disabled 0
#	Resources:	http://www.unix.com/shell-programming-and-scripting/252114-bash-script-manage-background-scripts-running-finished-exit-code.html
#
#
#	Script Environment
#
	ME="${0##*/}"				# Base name of tui-bg-scripts
	ME="${ME/.sh/}"				# Cut off .sh extension
	[ ! "." = "$(dirname $0)" ] && \
		ME_DIR="$(dirname $0)" || \
		ME_DIR="$(pwd)"			# Dirname of tui-bg-scripts
	CONFIG_DIR="$TUI_DIR_USER"		# Configuration directory
	CONFIG="$CONFIG_DIR/$ME.conf"		# Configuration file
	TEMP="$TUI_DIR_TEMP/$ME/$$"		# Make dynamic sub folders, so multiple instances would be possible (but not recommended!)
	tui-bol-root && \
		LOG="$TUI_DIR_LOGS/$ME.log" || \
		LOG="$TUI_DIR_USER_LOGS/$ME.log" # Log file placement according to user
	LIMIT=5
	WAIT=5
	COUNT=false
	QUIET=false
	DEBUG=false
	beVerbose=false
#
#	Translate preps
#
	source gettext.sh
	TEXTDOMAIN="${0##*/}"	# Will be changed over time, but easier to copy paste
	TEXTDOMAINDIR="${TUI_DIR_SYSTEM/tui/locale}"	# Will be changed over time, but easier to copy paste
	export TEXTDOMAIN TEXTDOMAINDIR
#
#	Translate strings
#
	TR_MSG_TEXT_VERSION="$(eval_gettext '
GNU TUI ($ME, Version $script_version)
Copyright (C) 2011-2015 Simon Arjuna Erat
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>

This is free software; you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
')"
		TR_MSG_TEXT_HELP="$(eval_gettext '
NAME
  $ME - Run multiple scripts in background

SYNOPSYS
  $ME [-h|--help] [--version] [-cdqv] [-l NUM] [-w NUM] SCRIPT1 SCRIPT2 ...
  
DESCRIPTION
  Runs several scripts in background,
  
OPTIONS
  -h|--help	Shows help and exit with 99
  --version	Shows version infoand exit with 0
  
  -L(og)			Show the log file ($LOG)
  -c(count)		The exit code is now the number of successfully executed scripts.
  -l(imit) NUM	Limits the number of parallel executed scripts, 5 default, 0 to disable
  -d(el-log)		Deletes (empty) the log file ($LOG)
  -q(uiet)		Just return the exit code, be non-verbose
  -v(erbose)		Be verbose, starts every script in its own terminal (GUI only!)
  -w(wait) NUM	Change the amount of seconds to wait between update-checks

 
EXAMPLE

	cd ./job/scripts
	
	$ME -l 10 *
FILES
  $LOG	When is which script executed and how did it exit?
  $TEMP	Where the temp files of the scripts are

HINTS
  If you need to have scripts executed upon previous success scripts, try:

  	$ME -qc *

SEE ALSO
  bash(1), ps(1)
  
BUGS
  Report bugs to: erat.simon@gmail.com
  
  GNU TUI - Homepage: <http://www.gnu.org/software/tui/>
  
  General help using GNU software: <http://www.gnu.org/gethelp/>

AUTHOR
  Simon Arjuna Erat, <http://linux-scripter.blogspot.ch>
')"
	TEXT_HELP="$TR_MSG_TEXT_HELP
"
	#------------------------------------------
	TR_MSG_TITLE="$(gettext 'Background Job Manager')"
	TR_MSG_LOG_LIMIT="$(eval_gettext 'Changed the limit to: $LIMIT')"
	TR_MSG_LOG_COUNT="$(eval_gettext 'Count is now $COUNT')"
	TR_MSG_LOG_QUIET="$(gettext 'Enabled quiet mode')"
	TR_MSG_LOG_VERBOSE="$(eval_gettext 'Enabled DEBUG mode')"
	TR_MSG_LOG_WAIT="$(eval_gettext 'Change the wait interval to: $WAIT')"
	TR_MSG_LOG_FINAL="$(eval_gettext 'You started $MAX scripts, of which $GOOD exited with success')"

	# Followed by: $TR_MSG_LOG_*
	TR_MSG_WORD_OPTIONS="$(gettext 'Options:')"
	TR_MSG_WORD_STATUS="$(gettext 'Status:')"
	TR_MSG_WORD_SUMMARY="$(gettext 'Summary:')"

	# Status display on errors 127/130
	TR_MSG_WORD_CANCEL="$(gettext 'cancel')"
	TR_MSG_WORD_TYPO="$(gettext 'typo')"

	# Summary status results
	TR_MSG_WORD_FINISHED="$(gettext 'Finished:')"
	TR_MSG_WORD_RUNNING="$(gettext 'Running:')"
	TR_MSG_WORD_WAITING="$(gettext 'Waiting')"
	TR_MSG_WORD_STARTING="$(gettext 'Starting:')"

	# Error Messages
	TR_MSG_TEXT_EMPTY="$(eval_gettext 'FAILED script: Empty pid while running : $script($pid) returned $RET')"
	TR_MSG_TEXT_TYPO="$(gettext 'Typo in script:')"
	TR_MSG_TEXT_INVALID="$(eval_gettext 'Invalid STATUS ($STATUS) on $C $this_script')"

	# Final summary
	TR_MSG_TEXT_COMPLETED="$(gettext 'Scripts completed')"
	TR_MSG_TEXT_CURRENTLY="$(gettext 'Currently running:')"
	TR_MSG_TEXT_EXECUTED="$(gettext 'Successfully executed:')"
	TR_MSG_TEXT_UPDATE="$(gettext 'Wait for update...')"
#
#	Functions
#
	show_version() { printf '%s\n' "$TR_MSG_TEXT_VERSION"; }
	show_help() { printf '%s\n' "$TEXT_HELP"; }
	doLog() { # "MESSAGE STRING"
	# Prints: Time & "Message STRING"
	# See 'tui-log -h' for more info
		tui-log -t "$LOG" "$1"
	}
#
#	Environment checks
#
	[ -d "$TEMP" ] || mkdir -p "$TEMP"
	[ ! -e "$LOG" ] && \
		touch $LOG && \
		doLog "------------------------------------------" && \
		doLog "$(eval_gettext 'Created log file of $ME ($script_version)')" && \
		doLog "------------------------------------------"

#
#	Catching Arguments
#
	[ "--help" = "$1" ] && show_help && exit 99
	[ "--version" = "${1,,}" ] && show_version && exit 0
	while getopts "cdhLl:qvw:" opt
	do 	case $opt in
		h)	show_help
			rm -fr "$TEMP"
			exit $RET_HELP
			;;
		L)	less "$LOG"	
			rm -fr "$TEMP"
			exit $RET_DONE
			;;
		d)	printf "" > "$LOG"
			rm -fr "$TEMP"
			exit $?
			;;
		l)	LIMIT=$OPTARG
			log_msg="$TR_MSG_LOG_LIMIT"
			;;
		c)	COUNT=true
			log_msg="$TR_MSG_LOG_COUNT"
			;;
		q)	QUIET=true
			log_msg="$TR_MSG_LOG_QUIT"
			;;
		v)	beVerbose=true
			log_msg="$(gettext 'Enabled DEBUG mode')"
			;;
		w)	WAIT=$OPTARG
			log_msg="$TR_MSG_LOG_WAIT)"
			;;
		esac
		# Print $log_msg to $LOG and print $log_msg to user if verbosity is enabled
		doLog "$TR_MSG_WORD_OPTIONS $log_msg"
	done
	shift "$(($OPTIND - 1))"
#
#	Variable presets
#
	script_name=( "${@}" )		# Contains all files
	MAX="${#script_name[@]}"		# Max amount of scripts
	script_status=( $(for s in "${script_name[@]}";do echo "3";done) )		# Status with same counter of that file	: done(0) failed(1) running(2) todo(3)
	script_pid=()			# PID with the same counter of that file
	# Counters
	RUN=0			# How many scripts are currently running
	# Verify all scripts are executable
	for script in "${script_name[@]}";do [ -x "$script" ] || chmod +x "$script";done
#
#	Display & Action
#
	DONE=0
	while [ "$DONE" -lt "$MAX" ]
	do	# Loop the menu
		C=0			# Reset counters to prevent 'over counting'
		DONE=0			# How many scripts are 'done' (regardless of status)
		GOOD=0			# How many scripts ended successfully
		if ! "$QUIET"
		then	clear
			tui-header "$TR_MSG_TITLE ($script_version)" "$(date +'%F %T')"
			tui-title "$TR_MSG_WORD_STATUS"
		fi
		
		while [ $C -lt $MAX ]
		do	# Vars
			STATUS="${script_status[$C]}"	# Current status
			RET_FILE="$TEMP/$(basename ${script_name[$C]}).ret"
			TMP="$TEMP/$(basename ${script_name[$C]}).cmd"
			script="${script_name[$C]}"
			
			# Do action according to current status
			case "$STATUS" in
			2)	# IS PID still available?
				pid="${script_pid[$C]}"
				if [ ! -z "$(echo $pid)" ]
				then	if ! ps "$pid" > /dev/zero
					then	# Its finished
						read RET < "$RET_FILE"
						[ -z "$RET" ] && RET=1
						script_status[$C]="$RET"
						((RUN--))
						# Make log file a bit more informative
						msg="end"
						[ $RET -eq 130 ] && msg="$TR_MSG_WORD_CANCEL"
						[ $RET -eq 127 ] && msg="$TR_MSG_WORD_TYPO"
						doLog "$script($pid) ,$msg $RET"
					fi
				else 	source "$LANG_FILE"
					msg="$TR_MSG_TEXT_EMPTY"
					tui-status 1 "$msg"
					doLog "$msg"
				fi
				;;
			3)	# Its TODO, can we start it?
				if [ "$RUN" -lt "$LIMIT" ] || [ "$LIMIT" -eq 0 ]
				then 	script_status[$C]=2
					STATUS=2
					((RUN++))
					[ [./] = "${script:0:1}" ] && PRE="" || PRE="./"
					cmd="\"${PRE}$script\" ; echo \$? > \"$RET_FILE\""
					touch "$RET_FILE"
					"$beVerbose" && \
						echo "$cmd" > "$TMP" && \
						tui-terminal "$TMP" || \
						( eval "$cmd" 1>/dev/zero ) &
					script_pid["$C"]="$!"
					PID="${script_pid[$C]}"
					doLog "$TR_MSG_WORD_STARTING $PID"
				fi
				;;
			*)	((DONE++))
				[ "$STATUS" -eq 0 ] && ((GOOD++))
				;;
			esac

			# Display latest status
			if ! "$QUIET"
			then	this_script="${script_name[$C]}"
				source "$LANG_FILE"
				case "$STATUS" in
				0|1)	tui-status "$STATUS" "$TR_MSG_WORD_FINISHED $this_script"  ;;
				2)	tui-status "$STATUS" "$TR_MSG_WORD_RUNNING $this_script" ;;
				3)	tui-status "$STATUS" "$TR_MSG_WORD_WAITING $this_script"	;;
				127)	tui-status 1 "$TR_MSG_TEXT_TYPO \"$this_script\""	;;
				*)	tui-status 1 "$TR_MSG_TEXT_INVALID"	;;
				esac
			fi
			((C++))
		done
		
		if ! "$QUIET"
		then	tui-echo
			tui-title "$TR_MSG_WORD_SUMMARY"
			tui-echo "$TR_MSG_TEXT_COMPLETED" 	"$DONE/$MAX"
			tui-echo "$TR_MSG_TEXT_CURRENTLY" 	"$RUN/$LIMIT"
			tui-echo "$TR_MSG_TEXT_EXECUTED" 	"$GOOD"
			
			tui-echo
			tui-wait "${WAIT:-5}" "$TR_MSG_TEXT_UPDATE"
			echo
		else	sleep "${WAIT:-5}"
		fi
	done
#
#	Exit how the user want
#
	doLog "$TR_MSG_LOG_FINAL"
	tui-log -e "$LOG" "----------------------------------------------"
	tui-log -e "$LOG" ""
	rm -fr "$TEMP"

	if "$COUNT"
	then	exit "$GOOD"
	else	exit 0
	fi
