#!/usr/bin/env bash
shopt -s expand_aliases
#
# Copyright (c) 2013-2015 Simon Arjuna Erat (sea)  <erat.simon@gmail.com>
# All rights reserved.
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>
#
# ------------------------------------------------------------------------
#
#
#	Author: 	Simon Arjuna Erat (sea)
#	Contact:	erat.simon@gmail.com
#	License:	GNU General Public License (GPL)
#	Created:        2013.05.03 (rev:3)
#	Changed:	2015.08.06
	script_version=2.5
#	Description:	The loader and configurator of TUI
#
#	Variables	:	Default
#
	# Check for '$HOME'
	if [ -z "$HOME" ]
	then	# HOME is empty, if UID is empty too, asume machine is still booting
		if [ 0 -eq "${UID:-0}" ]
		then	# Its root
			known="/root /"
			for k in $(awk  -v FS=":" '/^root/ {print $6}' /etc/passwd 2>/dev/zero) $known
			do 	[ -d "$k" ] && HOME="$k" && break
			done
		else	# Its normal user
			known="/Users /home"
			for k in $known	# Dont quote, or it would not expand to words / paths
			do 	[ -d "$k" ] && HOME="$k" && break
			done
		fi
	fi
	[ -z "$HOME" ] && HOME="${k:-$(cd;pwd)}"
	
	# Regular definitions
	TUI_VERSION=0.8.9
	TRC="${HOME}/.tuirc"	# User default	-- If no HOME is set, assume the computer is booting
	TRC_SYS="/etc/tuirc"	# Only available if root installed tui
	source "$TRC_SYS" && \
		break_on_injections "$@" && \
		exit 1
#
#	Functions
#
	doLog() { # "MESSAGE STRING"
	# Prints: Time & "Message STRING"
	# See 'tui-log -h' for more info
		tui-log -t "$TUI_LOG" "$1"
	}
	function help_screen () { #
	# Prints some basic usage
	#
		eval_gettext '
Usage: 	tuirc [config|reset[-yes]|theme] (source tui)
Where options are:
	-h		This screen
	config		Enters directly into config mode
	provides	List all variables provided by TUI
	reset		Resets configuration to defaults, root will reset system wide defaults
	reset-yes	Resets configuration without asking for verification
	theme [THEME]	If no THEME is passed, returns which is currently active, otherwise sets theme of the current user to THEME.

'
	}
	function first_time() { #
	# Prepare all variables and write conf files
	#
		function writeconf_trc() { # PATH
		# Write initial default paths
		# But first prepare some variables
			# Check for existing and writable (expected) default dirs
			for tryout in "$HOME/.local/cache" "$HOME/.cache"
			do	[ -d "$tryout" ] && TUI_DIR_TEMP="$tryout" && break
			done
			
			for tryout in "$HOME/.local/bin" "$HOME/bin" "$HOME/local/bin"
			do	[ -d "$tryout" ] && TUI_DIR_USER_SCRIPTS="$tryout" && break
			done
			
			for tryout in "$HOME/.local/man/man1"
			do	[ -d "$tryout" ] && TUI_DIR_USER_MANPAGES="$tryout" && break || tryout=""
			done
			[ "$UID" -eq 0 ] && TUI_DIR_USER_MANPAGES="${TUI_DIR_USER_MANPAGES:-/usr/share/man/man1}"
			
			# Since this is used as a fallback dir, its own fallback needs to be set now
			TUI_DIR_USER_SCRIPTS="${TUI_DIR_USER_SCRIPTS:-\$HOME/bin}"
			[ -z "$TUI_DIR_USER_MANPAGES" ] && \
				[  "$HOME/.local/bin" = "$TUI_DIR_USER_SCRIPTS" ] && \
				TUI_DIR_USER_MANPAGES="$HOME/.local/man/man1"
			
			# Set initial default values per user / root
			if [ "$UID" -eq 0 ]
			then	THM=default-red
				TCACHE=/tmp
			else	THM=default
				TCACHE="${HOME:-~}/.cache"
			fi
			TUI_DIR_TEMP="${TUI_DIR_TEMP:-$TCACHE}"
			
			
			cat > "$TRC" <<-TUI_RC
			#$TRC
			# This file is not ment to be changed manualy!
			# Any change of this file may result in an unusable TUI.
			# Do changes at your own risk!
			#
			# If you need to change something, change the top DIR variables first,
			# so all later variable definitions apply that change automatically.
			#
			#	Theme
			#	Options are: 	default, default-red, dot-blue, dot-red, \\
			#			floating, mono, witch-purple, witch-yellow
			#	See $TUI_DIR_SYSTEM/themes
			#
			 	TUI_THEME=$THM
			#
			#	Paths	:	System wide but user specific
			#
				TUI_DIR_TEMP="${TUI_DIR_TEMP}"
			#
			#	Paths	:	That are about the User
			#
			 	readonly \\
			 		TUI_DIR_USER="${XDG_CONFIG_DIR:-\$HOME/.config}/tui"
			 	readonly \\
			 		TUI_DIR_USER_LOGS="\$TUI_DIR_USER/logs"
			 	readonly \\
			 		TUI_DIR_USER_SCRIPTS="$TUI_DIR_USER_SCRIPTS"
			 	readonly \\
			 		TUI_DIR_USER_MANPAGES="$TUI_DIR_USER_MANPAGES"
			 	readonly \\
			 		TUI_DIR_USER_TEMPLATES="\$TUI_DIR_USER/templates"
			 	readonly \\
			 		TUI_DIR_USER_THEMES="\$TUI_DIR_USER/themes"
			
			#
			#	Files	:	User specific configuration files
			#
			[ -z "\$TUI_FILE_USER" ] && readonly \\
			 	TUI_FILE_USER="\$TUI_DIR_USER/user.conf"
			[ -z "\$TUI_FILE_USER_APPS" ] && readonly \\
			 	TUI_FILE_USER_APPS="\$TUI_DIR_USER/apps.conf"
			[ -z "\$TUI_FILE_USER_SETTINGS" ] && readonly \\
			 	TUI_FILE_USER_SETTINGS="\$TUI_DIR_USER/settings.conf"
			[ -z "\$TUI_FILE_USER_LOADLIST" ] && readonly \\
			 	TUI_FILE_USER_LOADLIST="\$TUI_DIR_USER/loadlist.conf"
			TUI_FILE_TEMP="${TUI_DIR_TEMP:-\$HOME/.cache}/tui.tmp~"
			
			TUI_RC
		}
		function writeconf_loadlist() { #
		# tui will load the config files according to the order of the loadlist.
		# So the user can define which of his config files is loaded first, if required.
			cat > "$TUI_FILE_USER_LOADLIST" <<-LOADLIST
			# This list defines the loading order do NOT change
			user.conf
			apps.conf
			settings.conf
			
			LOADLIST
		}
		writeconf_trc
		source "$TRC" 2>/dev/zero
		writeconf_loadlist
		
		# Verify all dirs are created, could be so easy...
		#tui-bol-dir $(tui-conf-get -l "$TRC"|grep "_DIR_")
		for item in "$TUI_PREFIX" $TUI_DIR_{*} ##CONF $TUI_DIR_DOCS $TUI_DIR_SYSTEM $TUI_DIR_USER_LOGS \
				##$TUI_DIR_THEMES $TUI_DIR_TEMP $TUI_DIR_USER_SCRIPTS $TUI_DIR_USER_MANPAGES
		do	[ -d "$item" ] ||  ( mkdir -p "$item" ; echo "$eval_gettext 'Created: $item')" >&2 )
		done
	}
	ConfigTUI() { #
	#
	#
		MSG_MENU_title=""
		MSG_MENU_out=""
		MSG_MENU_next=""
		
		# Get the proper path
		if [ 0 -eq "$UID" ] 
		then 	# thisconf="${TUI_DIR_CONF/\/\//\/}"
			thisconf="$TUI_DIR_CONF"
			MSG_MENU_title="$(gettext 'TUI config - System Wide')"
		else	thisconf="$TUI_DIR_USER"
			MSG_MENU_title="$(eval_gettext 'TUI config - Personal for $USER_NAME')"
		fi
		
		# Show & Edit files
		cd "$thisconf"
		tui-conf-editor -t "Text User Interface" *conf
	}
	ResetTUI() { #
	# Removes the current configuration according to user level
	# and replaces them with default configuration.
		YES="${YES:-false}"
		case "$UID" in
		0)	# ROOT, system wide
			RANGE="$(gettext 'System defaults')"
			CFG_DIR="$TUI_DIR_CONF"
			SRC_DIR="$TUI_DIR_SYSTEM/conf.etc"
			;;
		*)	# USER, personal only
			RANGE="$(gettext 'Personal settings')"
			CFG_DIR="$TUI_DIR_USER"
			SRC_DIR="$TUI_DIR_SYSTEM"
			;;
		esac
		
		[ -d "$CFG_DIR" ] || mkdir -p "$CFG_DIR"
		cd "$CFG_DIR"
		if [ "$?" -eq 0 ]  && "$YES"
		then	rm -fr *
		else	tui-yesno "$(eval_gettext 'Are you sure to remove $RANGE in \"$CFG_DIR\"?')" || return 1
			rm -fr *
		fi
		
		cd "$SRC_DIR"
		cp *conf "$CFG_DIR"
		return "$?"
	}
#
#	Premiere?
#
	if [ ! -f "$TRC" ]
	then	# Some default values required for first time setup
		[ -z "$DEFAULT" ] && \
		DEFAULT="$HOME/.config"
		[ -z "$XDG_CONFIG_DIR" ] && \
			[ -d "$DEFAULT/user-dirs.dirs" ] && \
			source "$DEFAULT/user-dirs.dirs"
		XDG_CONFIG_DIR="${XDG_CONFIG_DIR:-$DEFAULT}"
		# This is just required for the manual install process
		[ -z "$TUI_CHROOT" ] && \
			TUI_CHROOT="${CHROOT:-/}"
		[ -z "$TUI_PREFIX" ] && \
			TUI_PREFIX="${TUI_PREFIX:-${TUI_CHROOT%/}/usr}"
		# Prepare!
		first_time
	fi
#
#	Load Environment	:	System wide / defaults
#
	source "$TRC_SYS" 2>/dev/zero	# Load tui system path
	source "$TRC" 	  2>/dev/zero	# Load tui user paths
	for f in $TUI_FILE_CONF_{APPS,COMMANDS,COLORS,SETTINGS,STATUS,SYSTEM,SHORTS,ALIAS}
	do	source "$f" #&& printf "." > /dev/stderr
	done
#
#	Load Environment	:	User settings
#
	# Write default loadlist if file is missing
	[ -f "$TUI_FILE_USER_LOADLIST" ] || printf '%s\n' {user,apps,settings}.conf > "$TUI_FILE_USER_LOADLIST"
	# Read loadlist and start parsing only if variable is not empty
	while read f
	do	# Filter out comments and verify file exists before sourcing it.
		[ ! -z "$f" ] && \
			[ ! "#" = "${f:0:1}" ] && \
			[ -f "$TUI_DIR_USER/$f" ] && \
			source "$TUI_DIR_USER/$f"
	done<"$TUI_FILE_USER_LOADLIST"
	# As these are essential for TUI to work properly, 
	# do a fallback check, if any of these should be empty
	AWK="${AWK:-\awk}"
	GREP="${GREP:-\grep}"
	READ="${READ:-read}"
	SED="${SED:-\sed}"
	# Make apps not require *_CLI or *_GUI
	if tui-bol-gui
	then	# Its GUI
		BROWSER="$BROWSER_GUI"
		EDITOR="$EDITOR_GUI"
		FILEMGR="$FILEMGR_GUI"
	else	# Its CLI
		BROWSER="$BROWSER_CLI"
		EDITOR="$EDITOR_CLI"
		FILEMGR="$FILEMGR_CLI"
	fi
#
#	Is there anything to display ?
#
	if [ "${0##*/}" = "tuirc" ]
	then	# It is not sourced
		# So we load gettext env
		source gettext.sh
		TEXTDOMAIN="${0##*/}"	# Will be changed over time, but easier to copy paste
		TEXTDOMAINDIR="${TUI_DIR_SYSTEM/tui/locale}"	# Will be changed over time, but easier to copy paste
		export TEXTDOMAIN TEXTDOMAINDIR
		
		hello_date="$(date +%F)"
		hello_time="$(date +%T)"
		MSG_TR_HELLO_USER="$(eval_gettext 'Hello $USER_NAME, it is ${hello_time} on ${hello_date}')"
			
		
		case "$1" in
		"-h"|"--help"|"help")
			help_screen
			exit "$RET_HELP"
			;;
		esac
		MODE="$1"
		YES="false"
		case "$MODE" in
		--version|version)
			version_text="$(eval_gettext '
GNU $ME, Version $script_version
Copyright (C) 2011-2015 Simon Arjuna Erat
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>

This is free software; you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
')"
			printf "$version_text"
			;;
		config)
			ConfigTUI
			exit "$?"
			;;
		info)	info "${TUI_DIR_SYSTEM/tui/info}/tui.info" ; exit ;;
		html)	"$BROWSER" "${TUI_DIR_SYSTEM/tui/doc}/tui/tui.html" ; exit ;;
		samples)
			cd "${TUI_DIR_SYSTEM/tui/doc\/tui}/samples"
			MENU=show
			while 	tui-title "$(gettext 'TUI - Samples')"
				MSG_TR_QUIT="$(gettext 'Quit')"
				item=$(tui-select "$MSG_TR_QUIT" *)
				[ ! "$MSG_TR_QUIT" = "$MENU" ]
			do
				clear
				tui-title "$(eval_gettext 'File: $item')"
				tui-cat "$item"
				tui-header "" "$(eval_gettext 'Executing $item')" ""
				tui-press
				bash "$item"
			done
			;;
		reset-yes)
			MODE=reset
			YES=true
			;;
		theme)	if [ -z "$2" ]
			then	tui-echo "$(gettext 'TUI_THEME is set to:')" \
					"${TUI_THEME:-$(tui-conf-get $TRC TUI_THEME)}"
				exit $?
			else	tui-conf-set -v "$TRC" "TUI_THEME" "$2"
				exit $?
			fi
			;;
		info)	tui-status 111 "$(eval_gettext 'Please use: ${TUI_FONT_BOLD}tuirc provides${TUI_RESET}')"
			exit $?
			;;
		provides)
			tui-printf -H 	"$(eval_gettext 'TUI ($TUI_VERSION) by sea')" \
					"$MSG_TR_HELLO_USER"
			tui-printf -T "$(gettext 'Text User Interface - Framework for Scripts')"
			
			tui-printf -T "$(gettext 'Variables provided by sourcing TUI') ($TRC)"
			for foundVar in ${!TUI_THEME*} ${!TUI_PREFIX*} ${!TUI_DIR_*} ${!TUI_FILE_*} 
			do	tui-printf -E "$foundVar" "${!foundVar}"
			done
			
			tui-echo;tui-press
			tui-printf -T "$(gettext 'Variables provided by apps.conf') (\$TUI_FILE_CONF_APPS)"
			for foundVar in ${!EDITOR_*} ${!FILEMGR_*} ${!BROWSER_*} ${!TERMINAL*} ${!CURLWGET*}
			do	tui-printf -E "$foundVar" "${!foundVar}"
			done
			
			tui-printf -T "$(gettext 'Variables provided by settings.conf') (\$TUI_FILE_CONF_SETTINGS)"
			for txt in $(tui-conf-get -l $TUI_FILE_CONF_SETTINGS);do
				val="\$${txt}"
				tui-printf -E "$txt" "${!txt}"
			done
			
			tui-printf -T "$(gettext 'Variables provided by commands.conf') (\$TUI_FILE_CONF_COMMANDS)"
			for txt in $(tui-conf-get -l $TUI_FILE_CONF_COMMANDS);do
				tui-printf -E "$txt" "${!txt}"
			done
			
			tui-echo;tui-press
			tui-printf -T "$(gettext 'Variables provided by colors.conf') (\$TUI_FILE_CONF_COLORS)"
			tui-printf -E "$(gettext 'Be aware that using TUI_COLOR_* currently causes alignment issues.')" "$TUI_INFO"
			tui-printf -E "$(gettext 'Any escape sequence for that matter.')" "$TUI_INFO"
			for foundVar in ${!TUI_FONT_*} ${!TUI_COLOR_*}
			do	#tui-printf -E \
				#	"$foundVar" \
				#	"$(tmp=\$$foundVar ; printf '%s' $(eval echo $tmp)TEXT${TUI_RESET})"
				tui-printf -E "$foundVar" "${!foundVar}TEXTS${TUI_RESET}"
			done
			tui-printf -E "TUI_RESET" "${TUI_RESET}TEXT"
			
			tui-echo;tui-press
			tui-printf -T "$(gettext 'Variables provided by status.conf') (\$TUI_FILE_CONF_STATUS)"
			for txt in ${STATUS_TEXT[@]};do
				val="TUI_${txt}"
				tui-echo "TUI_$txt" "${!val}"
			done
			for foundVar in ${!RET_*}
			do	#tui-printf -E \
				#	"$foundVar" \
				#	"$(tmp=\$$foundVar ; printf '%s' $(eval echo $tmp))"
				tui-printf -E "$foundVar" "${!foundVar}"
			done
			
			tui-echo;tui-press
			tui-printf -H "$(gettext 'Variables provided by sourcing TUI (User specific)')"
			for task in user apps sets
			do	list=""
				case $task in
				user)	tui-title "User (\$TUI_FILE_USER)"
					list=" $(tui-conf-get -l $TUI_FILE_USER)"	;;
				apps)	tui-title "Apps (\$TUI_FILE_USER_APPS"
					list=" $(tui-conf-get -l $TUI_FILE_USER_APPS)"	;;
				sets)	tui-title "Settings (\$TUI_FILE_USER_SETTINGS"
					list=" $(tui-conf-get -l $TUI_FILE_USER_SETTINGS)" ;;
				esac
				
				for foundVar in $list # Quoting breaks the parsing
				do	#tui-printf -E \
					#	"$foundVar" \
					#	"$(tmp=\$$foundVar ; printf '%s' $(eval echo $tmp))"
					tui-printf -E "$foundVar" "${!foundVar}"
				done
				[ $task = apps ] && for t in EDITOR BROWSER FILEMGR;do tui-echo "${t^}" "\$${t}_$(tui-bol-gui && printf GUI || printf CLI)";done
			done
			
			tui-echo;tui-press
			tui-printf -T "$(gettext 'Variables provided by shorts.conf') (\$TUI_DIR_CONF/shorts.conf)"
			for entry in $($GREP "=" "$TUI_DIR_CONF/shorts.conf"|$GREP -v ^"#")
			do	tui-echo "${entry/=*}"	"${entry/*=}" 	#""
			done
			
			tui-echo;tui-press
			tui-printf -T "$(eval_gettext 'Aliases provided by shorts-alias.conf (\$TUI_DIR_CONF/shorts-alias.conf)')"
			tui-printf -S 111 "$(eval_gettext 'Source tuirc, or define ${fnt_bold}shopt -s expand_aliases${c_reset} when sourcing this conf file.')"
			while 	IFS='=	'
				read al var val
			do	echo "$al $var $val" | $GREP -q "#" || \
					tui-echo "$var" "$val" #"" #"($al)"
			done<"$TUI_DIR_CONF/shorts-alias.conf"
			
			tui-echo
			tui-status 0 "$(gettext 'Showed what TUI provides')"
			exit $?
			;;
		esac
	
		if [ "$MODE" = "reset" ]
		then	ResetTUI
			# $RANGE should be set within the function 'ResetTUI'
			tui-status $? "$(eval_gettext 'Reset $RANGE')"
			exit $?
		fi
#
#	Display & Action
#
		tui-printf -H 	"$(eval_gettext 'TUI ($TUI_VERSION) by sea')" \
				"$MSG_TR_HELLO_USER"
		tui-printf -T "$(gettext 'Text User Interface - Framework for Scripts')"
		tui-printf -E "$(gettext 'Calling tuirc like this gives you an impression on how your future scripts could look like.')"
		tui-printf -E
		tui-printf -E 	"$(gettext 'If you are looking for the commands of TUI, try this:')" \
				"$(gettext 'tui-<hit-tab>')"
		tui-printf -E 	"$(gettext 'If you are a developer, i highly recommend to read:')" \
				"$(eval_gettext 'man tui[rc] // ${TUI_FONT_BOLD}info tui${TUI_RESET}')"
		tui-printf -E 	"$(gettext 'And to check the provided variables, see:')" \
				"${TUI_FONT_BOLD}tuirc provides${TUI_RESET}"
		tui-printf -E
		tui-printf -E 	"$(gettext 'There are some sample scripts to get you started:')" \
				"$TUI_DIR_DOCS/samples"
		tui-printf -E 	"$(gettext 'To create a new script in $TUI_DIR_USER_SCRIPTS, type:')" \
				"tui-new-script [-emrst] [./]SCRIPTNAME"
		tui-printf -E
		tui-printf -E 	"$(gettext 'Arguments to this command are:')" \
				"config html info provides reset reset-yes samples  theme"
		tui-printf -E 
		tui-yesno "$(gettext 'Configure it now?')" || exit 0
		ConfigTUI
	fi