#!/usr/bin/env bash
#
# Copyright (c) 2014-2015 Simon Arjuna Erat (sea)  <erat.simon@gmail.com>
# All rights reserved.
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANT ABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>
#
# ------------------------------------------------------------------------
#
# tui-wait by Simon Arjuna Erat (sea) (erat.simon@gmail.com) on 2014-06-01
#
#	Help text
#
	script_name=tui-wait
	script_version=0.9.1
	beVerbose=false
	ME="${0##*/}"
	for tmp_task in "/etc" "${HOME:-/root}/.local" "$HOME"
	do 	[ -f "$tmp_task/tui.conf" ] && source "$tmp_task/tui.conf" && [ ! -z "${SYSCONFDIR}!" ] && break
	done
	# Get the main config files
	# 
	if source "${SYSCONFDIR}/tuirc" || ( [ -f ./tuirc ] && source ./tuirc )
	then 	# Load required variables
		for f in $TUI_FILE_{CONF,USER}_{APPS,COMMANDS,SETTINGS}
		do	[ -f "$f" ] && source "$f"
		done
	else	source tuirc
	fi
	break_on_injections "$@" && exit 1
#
#	Translate preps
#
	source gettext.sh
	TEXTDOMAIN="${0##*/}"	# Will be changed over time, but easier to copy paste
	TEXTDOMAINDIR="${TUI_DIR_SYSTEM/tui/locale}"	# Will be changed over time, but easier to copy paste
	export TEXTDOMAIN TEXTDOMAINDIR
#
#	Translate strings
#
	TR_MSG_TEXT_VERSION="$(eval_gettext '
TUI ($ME, Version $script_version)
Copyright (C) 2011-2015 Simon Arjuna Erat
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>

This is free software; you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
')"
	TR_MSG_TEXT_HELP="$(eval_gettext '
NAME
  $ME - Wait some time

SYNOPSYS
  $ME [-h|--help] [--version] TIME ["Message to user"]
  
OPTIONS
  -h|--help	Shows help and exit with 99
  --version	Shows version infoand exit with 0

EXAMPLE

	$ME 1m "Wait a minute"
	
	$ME 1h "Wait an hour"

BUGS
  Report bugs to: erat.simon@gmail.com
  
  TUI - Homepage: <http://www.gnu.org/software/tui/>
  
  General help using GNU software: <http://www.gnu.org/gethelp/>
')"
	version_text="$TR_MSG_TEXT_VERSION
"
	help_text="$TR_MSG_TEXT_HELP
"
#
#	Argument handling
#
	case "$1" in
	"--version")	
			printf '%s\n' "$version_text"
			exit 0
			;;
	"-h"|"--help"|"")
			printf '%s\n'  "$help_text"
			exit 1
			;;
	-v)		beVerbose=true
			action_text="$2"
			shift 2
			;;
	esac
#
#	Variables
#
	TIME="${1//[a-zA-Z]//}"
	UNIT="$(printf ${1}|tr -d [:digit:])"
	( [ -z "$TIME" ] || echo "${UNIT:-s}"|${GREP:-grep} -v ^[smh]$ ) && \
		printf "$help_text" && exit 1
	[ -z "$UNIT" ] && UNIT=s
	[ -z "$2" ] && \
		MSG="$(gettext 'Time left:')" || \
		MSG="$2"
	case ${UNIT,,} in
	s)	seconds="$TIME"	;;
	m)	minutes="$TIME"	;;
	h)	hours="$TIME"	;;
	*)	tui-status 1 "$(gettext 'Please use either (s)econds, (m)inutes, or (h)ours')"
	esac
	
	case "${UNIT,,}" in
	s)	seconds_total="$TIME"	;;
	m)	seconds_total="$(( 60 * $TIME ))"	;;
	h)	seconds_total="$(( 60 * 60 * $TIME ))"	;;
	esac
#
#	Functions
#
	function seconds2TIME() { #
	# Returns the TIME as string
	# as much as applicable: hh:mm:ss
		tmp_input="${seconds_total:-0}" 
		# display
		hours=0
		minutes=0
		seconds=0
		# subtraction
		sub_hrs=0
		sub_min=0
		
		# Calculate values : minutes and hours
		[ $tmp_input -gt 59 ] && \
			minutes="$(( $tmp_input / 60 ))" && \
			sub_min="$(( $minutes * 60 ))" 	# This many minutes are found
		[ $minutes -gt 59 ] && \
			hours="$(( $minutes / 60 ))" && \
			sub_hrs="$(( $hours * 60 ))"	# This many hours from the minutes
		[ $tmp_input -eq 60 ] && sub_min=0 && tmp_input=00
		seconds="$(( $tmp_input - $sub_min - $sub_hrs ))"
		
		# Format strings - hrs
		[ $hours -eq 0 ] && \
			hours="0" || hours+=":"
		
		# Format strings - mins
		if [ ${hours/:} -eq 0 ] && [ ${minutes/:} -eq 0 ]
		then	minutes="0"
		elif [ ${hours/:} -gt 0 ]
		then	[ ${#minutes} -lt 2 ] && \
				minutes="0${minutes}:" || \
				minutes+=":"
		else	minutes+=":"
		fi
		
		# Format strings - secs
		if [ ${hours/:} -gt 0 ] || [ ${minutes/:} -gt 0 ]
		then	[ ${#seconds} -lt 2 ] && \
				seconds="0${seconds}"
		fi
		
		# Remove the single '0', as they were only required to be 'math compatible'
		[ "$hours" = "0" ] && hours=""
		[ "$minutes" = "0" ] && minutes=""
		
		# output
		echo "${hours}${minutes}$seconds"
	}
#
#	Action - loop
#
	seconds_total="${seconds_total//\/}"
	while [ $seconds_total -ge 0 ]
	do 	# Get total TIME string and subtract 1 second
		TIME_string="$(seconds2TIME $seconds_total)"
		((seconds_total--))
		
		# Display to user
		tui-printline  "$MSG" "$TIME_string" 
		
		# Verbose / Countdown?
		if $beVerbose
		then	[ $seconds_total -lt 0 ] && \
				tui-printline -E "$action_text" || \
				printf "\n"
		fi
		sleep 1
	done
	exit 0
