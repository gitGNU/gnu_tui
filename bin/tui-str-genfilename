#!/usr/bin/env bash
# ------------------------------------------------------------------------
#
# Copyright (c) 2014-2015 by Simon Arjuna Erat (sea)  <erat.simon@gmail.com>
# All rights reserved.
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>
#
#-----------------------------------------------
#
#
#	Variables
#
	ME=${0##*/}
	script_version=0.6
	beVerbose=false
	ME="${0##*/}"
	for tmp_task in "/etc" "${HOME:-/root}/.local" "$HOME"
	do 	[ -f "$tmp_task/tui.conf" ] && source "$tmp_task/tui.conf" && [ ! -z "${SYSCONFDIR}!" ] && break
	done
	# Get the main config files
	# 
	if source "${SYSCONFDIR}/tuirc" && source "${HOME:-/root}/.tuirc" 2>/dev/zero
	then 	# Load language
		if [ -z "$TUI_LANG" ]
		then	[ -z "$LANG" ] && LANG=$(locale|sed s,[=\"],\ ,g|awk '/MESS/ {print $2}')
			lng="$(echo ${LANG/\.*})"
			echo "$TUI_DIR_LOCALE/"* | grep -q "${lng}" && \
				tui-conf-set "${HOME:-/root}/.tuirc" TUI_LANG "$lng" || \
				tui-conf-set "${HOME:-/root}/.tuirc" TUI_LANG en_GB
			# Sadly this echo is required to remove tailing spaces, probablly an issue of tui-conf-get (2015.08.21)
			TUI_LANG="$(echo $(tui-conf-get "${HOME:-/root}/.tuirc" TUI_LANG))"
		fi
		LANG_FILE=${ME/tui\-}.sh
		LANG_FILE="$TUI_DIR_LOCALE/${TUI_LANG}/$LANG_FILE"
		[ -f "$LANG_FILE" ] && source "$LANG_FILE" #|| tui-status 3 "$ME -- language file"
	else	source tuirc
	fi
	break_on_injections "$@" && exit 1
#
#	Functions
#
	function showHelp() {
	# Shows the basic help screen
	#
		cat <<-EOF
			$ME ($script_version)
			Usage: $ME [options] [/path/to/]BASENAME.EXT [NEW_EXTENSION]
			
			Examples:	$ME input.txt
			 		2> input.txt exists, appending number.
			 		1> input.0.txt
			 		
			 		$ME input.txt html
			 		1> input.html

			If a NEW_EXTENSION is provided, it will be replacing EXT (if exists).
			If BASENAME with either the existing EXT or the NEW_EXTENSION already exists, a number will be inserted before the file its new/old EXT.
			If BASENAME has neither an old EXT nor a NEW_EXTENSION, the number will become its extension.
			The number will be increased until the generated file name does not exist yet.
			
		EOF
	}
	showVersion() { 
	cat <<-EOF
		GNU $ME, Version $script_version
		Copyright (C) 2015 Simon Arjuna Erat
		License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>

		This is free software; you are free to change and redistribute it.
		There is NO WARRANTY, to the extent permitted by law.
	EOF
	}
	[ -z "$1" ] && showHelp && exit
#
# 	Arguments
#
	[ "--help" = "$1" ] && showHelp && exit 99
	[ "--version" = "${1,,}" ] && showVersion && exit 0
	while getopts "hv" opt
	do	case "$opt" in
		h)	showHelp
			exit
			;;
		v)	beVerbose=true
			shift
			;;
		esac
	done
	
	this="$1"	# File without EXT?
	EXT=$(tui-str-extension "$this")	# OLD
	ext="${2:-$EXT}"	# Fill 'ext' with old EXT if its empty
	this=${this%%$EXT}
#
#	Action & Display
#
	# Set the intitial name check according to presets:
	# Currently only known special case: tar
	NAME_INIT="${this/\.tar/}$ext"
	
	if [ -f "$NAME_INIT" ]
	then	$beVerbose && \
			echo "$NAME_INIT exists, appending/increasing number." > /dev/stderr
		C=0		# Counter
		NAME_CHECK="$this$C.$ext"
		while [ -f "$NAME_CHECK" ]
		do	C=$(( $C + 1 ))
			NAME_CHECK="$this$C.$ext"
			$beVerbose && printf "\r%s" "Checking for $NAME_CHECK" > /dev/stderr
		done
		$beVerbose && [ $C -gt 0 ] && \
			printf "\n%s\n" "$NAME_CHECK is available" > /dev/stderr
		
		# Finally a file that does not exist yet
		echo "$NAME_CHECK" >&1
	else	# File does not exist, and can be used
		echo "$NAME_INIT"  >&1
	fi
exit 0
