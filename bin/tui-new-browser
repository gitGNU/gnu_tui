#!/usr/bin/env bash
#
# Copyright (c) 2014-2015 Simon Arjuna Erat (sea)  <erat.simon@gmail.com>
# All rights reserved.
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>
#
# ------------------------------------------------------------------------
	ME="${0##*/}"
	for tmp_task in "/etc" "${HOME:-/root}/.local" "$HOME"
	do 	[ -f "$tmp_task/tui.conf" ] && source "$tmp_task/tui.conf" && [ ! -z "${SYSCONFDIR}!" ] && break
	done
	# Get the main config files
	# 
	if source "${SYSCONFDIR}/tuirc" && source "${HOME:-/root}/.tuirc" 2>/dev/zero
	then 	# Load required variables
		for f in $TUI_FILE_{CONF,USER}_{APPS,COMMANDS,SETTINGS}
		do	[ -f "$f" ] && source "$f"
		done
		# Load language
		if [ -z "$TUI_LANG" ]
		then	[ -z "$LANG" ] && LANG=$(locale|sed s,[=\"],\ ,g|awk '/MESS/ {print $2}')
			lng="$(echo ${LANG/\.*})"
			echo "$TUI_DIR_LOCALE/"* | grep -q "${lng}" && \
				tui-conf-set "${HOME:-/root}/.tuirc" TUI_LANG "$lng" || \
				tui-conf-set "${HOME:-/root}/.tuirc" TUI_LANG en_GB
			# Sadly this echo is required to remove tailing spaces, probablly an issue of tui-conf-get (2015.08.21)
			TUI_LANG="$(echo $(tui-conf-get "${HOME:-/root}/.tuirc" TUI_LANG))"
		fi
		LANG_FILE=${ME/tui\-}.sh
		LANG_FILE="$TUI_DIR_LOCALE/${TUI_LANG}/$LANG_FILE"
		[ -f "$LANG_FILE" ] && source "$LANG_FILE" #|| tui-status 3 "$ME -- language file"
	else	source tuirc
	fi
	break_on_injections "$@" && exit 1
	. gettext.sh
	TEXTDOMAIN="${0##*/}"	# Will be changed over time, but easier to copy paste
	TEXTDOMAINDIR="${TUI_DIR_SYSTEM/tui/locale}"	# Will be changed over time, but easier to copy paste
	export TEXTDOMAIN TEXTDOMAINDIR
#
#	Author: 	Simon Arjuna Erat (sea)
#	Contact:	erat.simon@gmail.com
#	License:	GNU General Public License (GPL)
#	Created:	2014.04.26
#	Changed:	2015.08.05
	script_version=0.8.9
#	Description:	Helps to create a tui-browser project
#
#	Variables
#
	ME="${0##*/}"
	ME_DIR="${0/${0##/*/}}"
	TITLE="$(gettext 'Create a new TUI project')"
	help_text="$(eval_gettext '
Usage: 	$ME [options] [arguments]


')"
#
#	Project related variables
#
	optE_bool=false 	# For a working template
	doTextMode=false
	ARG_TOGGLE_ANOTHER=none # For a working template
	APP_TITLE=""		# Project name
	APP_BASE=""		# Where is the project root
	APP_USER_LABEL=""	# Top left label
	APP_FOLDERS=""		# label for the directory section
	APP_FILES=""		# Label for the file section
	APP_FILE=""		# save point, starter script
	APP_DATA=""		# Where are the scripts to present
	APP_INCLUDE=""		# Path to files to include
	TASK_BASIC="APP_TITLE APP_FILE APP_BASE" #APP_MENU
	TASK_LABELS="APP_USER_LABEL APP_LOC_LABEL APP_POS_LABEL"
	TASK_LABELS_TEXT="APP_DIR_LABEL APP_FILES_LABEL"
	TASK_ADVANCED="APP_CONFIG_FILE APP_INCLUDE_DIR APP_SOURCE_THIS APP_SHELL APP_CLEAR"
#
#	Catching Arguments
#
	[ "--help" = "$1" ] && printf "$help_text" && exit 99
	version_text="$(eval_gettext '
GNU $ME, Version $script_version
Copyright (C) 2015 Simon Arjuna Erat
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>

This is free software; you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

')"
	[ "--version" = "${1,,}" ] && printf "$version_text" && exit 0
	while getopts "h" name
	do 	case "$name" in
		h|help)
			printf "$help_text"
			exit "$RET_HELP"
			;;
		# *)	printf "$help_text" ; exit $RET_HELP	;;
		esac
	done
	shift "$(($OPTIND - 1))"
#
#	Display & Action
#
	
	[ "--help" = "$1" ] && printf "$help_text" && exit 99
	tui-printf -H "$ME ($script_version)" "$(date +'%F %T')"
	tui-printf -T "$TITLE"
	tui-printf -E "$(gettext 'Starting with basic required configuration')"
#
#	This is required for proper placement of files
#
	# Quoting breaks expanding
	for task in $TASK_BASIC
	do
		case "$task" in
		APP_TITLE)
			Q="$(eval_gettext "What is the $task, may contain spaces:")"
			tui-echo "$Q"
			TASK="$(tui-read)"
			APP_TITLE="${APP_TITLE:-${TASK:-Project Name}}"
			;;
		APP_FILE)
			Q="$(eval_gettext "What is the name of the $task to execute:")"
			tui-echo "$Q"
			TASK="$(tui-read)"
			APP_FILE="${APP_FILE:-${TASK:-project-binary}}"
			;;
		APP_BASE)
			tmp_default_dir="$default_new_browser_dir/${APP_FILE/\.*}"
			Q="$(eval_gettext "Where will \"$APP_FILE\" be stored ($tmp_default_dir):")"
			tui-echo "$Q"
			TASK="$(tui-read)"
			TASK="${TASK:-$tmp_default_dir}"
			APP_BASE="${APP_BASE:-${TASK}}"
			;;
		esac
	done
	# Currently disabled
	#tui-yesno "$(gettext 'Enable text-mode (unstable beta)?')" && doTextMode=true
#
#	Optional	:	Labels
#
	if tui-yesno "$(gettext 'Would you like to change some of the labels/captions?')"
	then	for task in $TASK_LABELS
		do 	case "$task" in
			APP_USER_LABEL)
				tui-yesno "$(eval_gettext 'Set the value for $task?')" || continue
				Q="$(eval_gettext "What is the label for $task:")"
				tui-echo "$Q"
				TASK="$(tui-read)"
				APP_USER_LABEL="${TASK:-\$USER}}"
				;;
			APP_LOC_LABEL)
				tui-yesno "$(eval_gettext 'Set the value for $task?')" || continue
				Q="$(eval_gettext "What is the label for $task:")"
				tui-echo "$Q"
				TASK="$(tui-read)"
				APP_LOC_LABEL="${TASK:-$(gettext 'Location:')}}"
				;;
			APP_POS_LABEL)
				tui-yesno "$(eval_gettext 'Set the value for $task?')" || continue
				Q="$(eval_gettext "What is the label for $task:")"
				tui-echo "$Q"
				TASK="$(tui-read)"
				APP_LOC_LABEL="${TASK:-\$(MakeCurStr \$(pwd))}}"
				;;
			esac
		done
		if "$doTextMode"
		then	# Only show this if the the author has enabled the text mode
			for task in $TASK_LABELS
			do 	case "$task" in
				APP_DIR_LABEL)
					tui-yesno "$(eval_gettext 'Set the value for $task?')" || continue
					Q="$(eval_gettext "What is the label for $task:")"
					tui-echo "$Q"
					TASK="$(tui-read)"
					APP_DIR_LABEL="${TASK:-$(gettext 'Sections')}}"
					;;
				APP_FILES_LABEL)
					tui-yesno "$(eval_gettext 'Set the value for $task?')" || continue
					Q="$(eval_gettext "What is the label for $task:")"
					tui-echo "$Q"
					TASK="$(tui-read)"
					APP_FILES_LABEL="${TASK:-$(gettext 'Tasks')}}"
					;;
				esac
			done
		fi
	fi
#
# 	Optional 	:	Advanced
#
	if tui-yesno "$(gettext 'Change some advanced settings?')"
	then	for task in 	$TASK_ADVANCED
		do 	case "$task" in
			APP_CONFIG_FILE)
				tui-yesno "$(eval_gettext 'Set the value for $task?')" || continue
				Q="$(eval_gettext 'What is the relative path ($APP_BASE/) of the installed configuration file:')"
				tui-echo "$Q"
				TASK="$(tui-read)"
				APP_CONFIG_FILE="${TASK:-$APP_FILE.conf}"
				;;
			APP_SOURCE_THIS)
				tui-yesno "$(eval_gettext 'Set the value for $task?')" || continue
				Q="$(eval_gettext 'What is the relative path ($APP_BASE/) of the folder to source configuration and/or function files?:')"
				tui-echo "$Q"
				TASK="$(tui-read)"
				APP_SOURCE_THIS="${TASK:-includes}"
				;;
			APP_SHELL)
				tui-yesno "$(eval_gettext 'Set the value for $task?')" || continue
				Q="$(eval_gettext 'What type are your scripts?')"
				tui-echo "$Q"
				TASK="$(tui-select ash bash csh dash ksh perl python tcsh zsh)"
				APP_SHELL="${TASK:-bash}"
				;;
			APP_CLEAR)
				tui-yesno "$(eval_gettext 'Set the value for $task?')" || continue
				Q="$(eval_gettext 'When changing a section or a task has been executed, do you want to clear the screen?')"
				TASK=$(tui-yesno "$Q")
				APP_CLEAR="$(tui-str-bol-conv -t ${TASK:-1})"
				;;
			esac
		done
	fi
#
#	How or which template to save?
#
	tui-bol-dir -v "$APP_BASE" || exit 1
	tui-title "$(gettext 'What kind of template do you want to use?')"
	MSG_TR_WORD_SIMPLE="$(gettext 'Simple')"
	MSG_TR_WORD_FULL="$(gettext 'Full')"
	style=$(tui-select "$MSG_TR_WORD_FULL" "$MSG_TR_WORD_SIMPLE")
	case "$style" in
	"$MSG_TR_WORD_FULL")
		cd "$APP_BASE"
		tui-tar -xb "$TUI_DIR_TEMPLATES/browser.tar.gz"
		# Since its full, provide full application manpage
		default_new_browser_manpage_type=application
		;;
	esac
	
	source "$TUI_DIR_TEMPLATES/browser" > "$APP_BASE/$APP_FILE"
	chmod +x "$APP_BASE/$APP_FILE"
	
	# Always creating a manpage, but which?
	case "${default_new_browser_manpage_type:-application}" in
	application)	var_opt="-a"	;;
	*)		var_opt=""	;;
	esac
	tui-bol-dir -v "$APP_BASE/{man,menu}"
	${0/browser/manpage} $varOpt "$APP_BASE/man/$APP_FILE"
	
	# Open project dir
	tui-filemgr "$APP_BASE"
	