#!/usr/bin/env bash
#
# Copyright (c) 2014-2015 Simon Arjuna Erat (sea)  <erat.simon@gmail.com>
# All rights reserved.
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANT ABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>
#
# ------------------------------------------------------------------------
#
#	Internals
#
	ME="${0##*/}"
	script_version=1.5
	
	# Check the two default places for the core configuration
	# First system wide, second user only install
	for tmp_task in "/etc" "${HOME:-/root}/.local" "$HOME"
	do 	[ -f "$tmp_task/tui.conf" ] && source "$tmp_task/tui.conf" && [ ! -z "${SYSCONFDIR}!" ] && break
	done
	# Get the main config files
	# 
	if source "${SYSCONFDIR}/tuirc" && source "${HOME:-/root}/.tuirc" 2>/dev/zero
	then 	# Load required variables
		source "$TUI_FILE_CONF_COMMANDS"
	else	source tuirc
	fi
	TERM="${TERM:-GNU Linux}"
	break_on_injections "$@" && exit 1
#
#	Translate preps
#
	source gettext.sh
	TEXTDOMAIN="${0##*/}"	# Will be changed over time, but easier to copy paste
	TEXTDOMAINDIR="${TUI_DIR_SYSTEM/tui/locale}"	# Will be changed over time, but easier to copy paste
	export TEXTDOMAIN TEXTDOMAINDIR
#
#	Translate strings
#
	TITLE="$(gettext 'Save values to conf files')"
	TR_MSG_TEXT_VERSION="$(eval_gettext '
GNU $ME, Version $script_version
Copyright (C) 2011-2015 Simon Arjuna Erat
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>

This is free software; you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
')"
	TR_MSG_TEXT_HELP="$(eval_gettext '
$ME ($script_version)
$TITLE
Usage: 		$ME [options] FILE VALUENAME [VALUE]
Examples:	$ME -l  /etc/default/grub 			| Prints a list of found variable-names
		$ME     /etc/default/grub GRUB_TIMEOUT 15	| Saves VALUENAME as passed (VALUENAME)
		$ME -ic /etc/default/grub grub_timeout 15	| Saves valuename as VALUENAME
		$ME -i  /etc/default/grub grub_timeout 15	| Saves valuename as passed (valuename)
		$ME -is /etc/default/grub GRUB_TIMEOUT 15	| Saves VALUENAME as valuename
		
Where options are:
	-h		This screen
	-i		Internal search pattern is no longer case sensitive
	-l		Lists values available in the file
	-c		Writes the VALUE, and stores VALUENAME in capital chars
	-s		Writes the VALUE, and stores VALUENAME in lower chars
	-v		Prints a status message whether or not the value could be saved

Report bugs to: erat.simon@gmail.com
TUI home page: <http://www.gnu.org/software/tui/>
General help using GNU software: <http://www.gnu.org/gethelp/>
')"
#
#	Author: 	Simon Arjuna Erat (sea)
#	Contact:	erat.simon@gmail.com
#	License:	GNU General Public License (GPL)
#	Created:	2014.04.24
#	Changed:	2015.09.17
#	Description:	Set a value in an 'conf/ini' file
#
#	Variables
#
	RET_HELP=99
	
	help_text="$TR_MSG_TEXT_HELP"
	TMP="$TUI_FILE_TEMP.$$"
	OPT=""
	VALUE=""
	VARNAME=""
	CAPS=false
	SMALL=false
	hadDollar=false
	beVerbose=false
	SD=","
	Q="-q"	# Make grep quiet where required
#
#	Catching Arguments
#
	[ -z "$2" ] && printf "$help_text" && exit 1
	[ "--help" = "$1" ] && printf "$help_text" && exit 99
	showVersion() { 
	cat <<-EOF
		$TR_MSG_TEXT_HELP
	EOF
	}
	[ "--version" = "${1,,}" ] && showVersion && exit 0
	while getopts "icslhv" name
	do 	case $name in
		c)	CAPS=true
			SMALL=false
			;;
		s)	SMALL=true
			CAPS=false
			;;
		i)	OPT="-i"
			;;
		l)	$GREP -v ^"#" "$2"|$GREP "="|$SED s,"="," ",g|$AWK '{print $1}'
			exit 0
			;;
		h)	printf "$help_text"
			exit 99
			;;
		v)	beVerbose=true
			;;
		esac
	done
	shift $(($OPTIND - 1))
#
#	Prechecks
#
	[ $# -lt 3 ] && \
		tui-printf -S 1 "$(eval_gettext '$ME: Requires 3 arguments: CONFFILE VARNAME VALUE')" && \
		exit 1
	# Handle file
	CONFFILE="$1"	;	shift
	if [ ! -f "$CONFFILE" ]
	then	tui-bol-dir "$(dirname $CONFFILE)" || exit 1
                touch "$CONFFILE"
	fi
	# Handle VARNAME, secure if its pw|pass|password
	VARNAME="$1"	;	shift
	
	# Handle VALUE, secure if VARNAME was pw|pass|password
	cat > "$TMP" <<-EOF
	$1
	EOF
	$GREP -q '[\ \$]' "$TMP" && \
		need_quotes=true || \
		need_quotes=false
	$GREP -q "$VARNAME" "$CONFFILE" && \
		need_sed=true ||\
		need_sed=false
#
# 	Preformat strings
#
	if $need_sed
	then	# Full line
		SEARCH="$( $GREP $OPT -v ^# "$CONFFILE"|$GREP "${VARNAME}=" | tail -n 1)"
		
	#	$need_quotes && \
	#		REPLACE="$VARNAME=\"$VALUE\"" || \
	#		REPLACE="$VARNAME=$VALUE"
		
		# Set proper SED 'divider'
		if $GREP $Q "$SD" "$TMP"
		then 	# Coma was found
			SD="/"
			printf "$REPLACE"|$GREP "$SD"|$GREP -q '\\' && SD="\\"	# backslash was found
			[ ! "$SD" = "/" ] && \
				printf "$REPLACE"|$GREP ","|$GREP "$SD"|$GREP -q "/" && SD="|"	# Forward slash was found
		fi
	else	# Get leading spaces if applicable
		lead_space=$(tail -n1 "$CONFFILE") # | $SED s,,,g)
		lead_space="${lead_space/[a-zA-Z0-9]*}"
		# Add the line
		if $need_quotes
		then	cat >> "$CONFFILE" <<-EOF
			$lead_space$VARNAME="$1"
			EOF
		else	cat >> "$CONFFILE" <<-EOF
			$lead_space$VARNAME=$1
			EOF
		fi
	fi
	exit
	
	
	
	
	
	# Troubles with VARIABLES due to chars that need to be escaped
        if echo "$REPLACE" | $GREP $Q '[%$+@\]'
	then	hadDollar=true
		str_checker="$(echo $VALUE|$SED s,'\\\$','$',g)"
	else	str_checker="$VALUE"
	fi
#
#	Display & Action
#
	# Save changes, Append or change var=value?
	if ! $GREP "${VARNAME}=" "$CONFFILE" | $GREP $Q -v ^"#"
	then	# Its not there yet, just append it
		if $hadDollar
		then	# It needs special treatment
			echo "$(echo $REPLACE)" >> "$CONFFILE"
		else	# Easy handling
			echo "${REPLACE}" >> "$CONFFILE"
			
		fi
	else	# Its already there, handling according to special chars
		if $hadDollar
		then	# It needs special treatment
			SEARCH="$(echo $SEARCH|$SED s,'$','\$',g)"
			cmd="$SED s${SD}\"${SEARCH}\"${SD}\"${REPLACE}\"${SD}g -i $CONFFILE"
			eval "$cmd"
		else	# It is simple to call
			cmd="$SED s${SD}${SEARCH}${SD}${REPLACE}${SD}g -i $CONFFILE"
			$cmd
		fi
	fi
	
	# Return true if replaced string was found
	if $beVerbose
	then	$GREP $Q "$str_checker" "$CONFFILE"
		tui-status $? "Saved in \"${CONFFILE##*/}\"" "$VARNAME=$str_checker"
		exit $?
	else	$GREP $Q "$str_checker" "$CONFFILE"
		exit $?
	fi
	exit 1
	# Due to remove ?
	if $GREP $Q "$str_checker" "$CONFFILE"
	then	# Success, visual-report only if verbose is enabled
		$beVerbose && tui-status 0 "$(gettext 'Saved in') \"${CONFFILE##*/}\"" "$VARNAME=$str_checker"
		exit 0
	else	# It failed, visual-report only if verbose
		$beVerbose && tui-status 1 "$(eval_gettext 'Could not write to \"${CONFFILE}\"')"
		exit 1
	fi