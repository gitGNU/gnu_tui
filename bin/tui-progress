#!/usr/bin/env bash
#
# Copyright (c) 2014-2015 Simon Arjuna Erat (sea)  <erat.simon@gmail.com>
# All rights reserved.
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>
#
# ------------------------------------------------------------------------
#
#	Init TUI environment
#
	if source /etc/tuirc  && source "${HOME:-/root}/.tuirc"
	then	for f in $TUI_FILE_{CONF,USER}_{APPS,COMMANDS,SETTINGS};do source "$f";done
	else	source tuirc
	fi
	break_on_injections "$@" && exit 1
	TERM="${TERM:-GNU/Linux}"
#
#	Author: 	Simon Arjuna Erat (sea)
#	Contact:	erat.simon@gmail.com
#	License:	GNU General Public License (GPL)
#	Created:	2014.04.26
#	Changed:	2015.07.14
	script_version=1.0.2
#	Description:	Simply displays a rotating line on the left side
#			The line rotates upon each call
#
#	Variables
#
	TITLE="Progress indicator"
	ME="${0##*/}"	# Name
	# internals
	TYPE=""		# Start with no display mode
	INDI=( '\' '|' '/' '-' )	# Dont use tui-indi, for asynchronus display
	TOTAL=$[ ${#INDI[@]} -1 ]
	WIDTH=${COLUMNS:-$(tput cols)}
	# id file?
	ID_CUR=$$	# -i ID storage id
	ID=""		# -i ID storage id
	# bols
	CLEARLINE=false	# Clear line between display calls?
	hadOpts=false	# Shift only if it had opts
	doReset=false	# Reset the ID file?
	doBar=false
	longBar=false	# Show (& calc) the STATUS (procent)
	hasID=false
	# opts
	MAX=""
	VAL=""
	CURRENT=""
	BAR='='
	# Display
	PROGRESS=""
	STATUS=""
	MESSAGE=""
	# Help
	help_text="
$ME ($script_version)
$TITLE
Usage: 	$ME [options] ['Message']

Where options are:
	-h(elp) 		This screen
	-b(ar)			Enables the 'bar' mode (minimal)
	-B(ar)	        VAL     Changes the bar-symbol to VAL
	-c(urrent)	VAL	Required for bar-mode
	-C(learline)		Clear the line before print a new value, recommended if you pass multiple files
	-m(ax)		VAL	If provided, changes progress-string output to 'calculated-num / VAL '
	-l(ong)			Prints more info when in bar mode.
	-i(dent)	VAL	VAL is used as part of tempfile name tui-progress use, if used in multiple instances
				Should be provided if used with -m
	-r(eset)		Resets the tempfile, should be used before one is passing 

When called without options, it simply displays a rotating dash (-/|\) on the right side.
When called with option '-m NUM' it increments the number found in the tempfile, and showing [ incr/NUM ], before using this mode, you should reset the tempfile (-r), or use a specific tempfile identifier (-i STRING_ID).
You can overwrite the requirement for a tempfile, if you pass '-c NUM'.
When called with '-b', the options '-m NUM' and '-c NUM' are both required.

"
#
#	Functions
#
	simple_status() {
	# Generates a single string to represent the actual task/case
	#
		tmp=""
		[ ! -z "$MAX" ] && tmp="NUM"
		$doBar && [ ! -z "$MAX" ] && tmp="BAR"
		echo "${tmp:-DASH}"
	}
	reset_tmp() { # ID
	# Resets the counter according to passed ID
	#
		if "$hasID"
		then	tui-conf-set "$TMPFILE" "$ID" 1
		else	echo 1 > "$TMPFILE"
		fi
		#echo was here
	}
	save_tmp() { # VAL
	# Saves VAL in the tempfile according to passed id
	#
		[ -z "$1" ] && return 1
		if "$hasID"
		then	tui-conf-set "$TMPFILE" "$ID" "$1"
		else	echo "$1" > "$TMPFILE"
		fi
	}
	read_tmp() { 
	# Reads VAL in the tempfile according to passed id
	# Returns VAL
		if "$hasID"
		then	tui-conf-get "$TMPFILE" "$ID"
			return "$?"
		else	cat "$TMPFILE"
			return "$?"
		fi
	}
#
#	Catching Arguments
#
	[ "--help" = "$1" ] && printf "$help_text" && exit 99
	showVersion() { 
	cat <<-EOF
		GNU $ME, Version $script_version
		Copyright (C) 2015 Simon Arjuna Erat
		License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>

		This is free software; you are free to change and redistribute it.
		There is NO WARRANTY, to the extent permitted by law.
	EOF
	}
	[ "--version" = "${1,,}" ] && showVersion && exit 0
	while getopts "c:CB:bi:lm:rh" name
	do 	case $name in
		B)	BAR="$OPTARG"
			hadOpts=true		;;
		b)	doBar=true
			hadOpts=true		;;
		c)	VAL="$OPTARG"
			hadOpts=true		;;
		C)	CLEARLINE=true
			hadOpts=true		;;
		i)	ID="$OPTARG"
			hasID=true
			hadOpts=true		;;
		l)	longBar=true
			hadOpts=true		;;
		m)	MAX="$OPTARG"
			hadOpts=true		;;
		h)	printf "$help_text"
			exit "${RET_HELP:-111}"		;;
		r)	doReset=true
			hadOpts=true		;;
		esac
	done
	"$hadOpts" && shift $(($OPTIND - 1))
#
#	Check for all required options
#	
	MESSAGE="$1"
	TYPE=$(simple_status)
	TUI_DIR_TEMP="${TUI_DIR_TEMP:-/tmp}"
	if "$hasID"
	then	TMPFILE="$TUI_DIR_TEMP/tui-progress_ids.tmp"
	else	TMPFILE="$TUI_DIR_TEMP/tui-progress_default.tmp"
	fi
#
#	Something quick?
#
	"$doReset" && \
		reset_tmp && \
		exit 0
#
#	Prepare required tasks from options
#
	case "${TYPE}" in
	DASH|NUM)
		# Create initial tempfile if none exists
		if [ ! -f "$TMPFILE" ]
		then	if tui-bol-dir "$TUI_DIR_TEMP" 
			then	touch "$TMPFILE"
			fi
			reset_tmp || exit 1
		fi
		[ -z "$VAL" ] && \
			VAL="$(read_tmp)" && \
			doSave=true || \
			doSave=false
		;;
	BAR)	if [ -z "$VAL" ]
		then	# Kind of a workaround
			VAL="$(read_tmp)"
			#VAL=$(( $VAL + 1 ))
			save_tmp "$(( $VAL + 1 ))"
		fi
		if [ -z "$MAX" ] || [ -z "$VAL" ]  #|| [ ! $MAX -gt 1 ]
		then	# Improper handling
			tui-status 1 "Usage: $ME [-r] [-m \$MAV_VALUE]  [-bc \$CUR_VALUE] [-l]]  'msg'"
			exit 1
		fi
	esac
#
#	Generate output string, and save values
#
	case "${TYPE}" in
	DASH)	# Regular animated dash
		[ "$VAL" -gt 3 ] && VAL=0
		STATUS="[  ${INDI[$VAL]}   ]"
		;;
	NUM)	# Show incrementing number
		[ "$VAL" -gt "$MAX" ] && \
			echo "$ME: Should have called \"${TUI_FONT_BOLD}$ME -r\" first!${TUI_FONT_RESET}" >&2
			#echo "$ME:$LINENO: Error - \"v$VAL -gt m$MAX\"" >&2
		STATUS="[ $VAL / $MAX ]"
		;;
	BAR)	# Show procent only if wanted
		fixer_fix=0
		if "$longBar"
		then	# Show also procent ($STATUS)
			procent="$( echo $MAX $VAL | $AWK '{print (100/$1*$2) }' )"
			[ -z "$MESSAGE" ] && fixer_fix=0 || fixer_fix=5	# Does this depend on $WIDTH?
			
			# How many procent?
			pro="${procent/.*/}"
			[ "$pro" -gt 100 ] && \
				pro=100
			[ "$pro" -ne 100 ] && \
				cent="$( while IFS='.' read P C;do [ -z "$C" ] && echo 00 || echo $C;done<<<$procent)" && \
				cent="${cent:0:2}" || \
				cent=00
			case ${#pro} in
			1)	fixer=13 ;;
			2)	fixer=14 ;;
			3)	fixer=15 ;;
			esac
			length=$(( $WIDTH - (2 * ${#BORDER_LEFT}) - 2 - ${#MESSAGE} - 5 - ${fixer} - $fixer_fix  ))
			#STATUS="[ ${pro}.${cent}%% ]"		# Nope
			STATUS="[ ${pro}.${cent}%% ] ]\]"	# Ok, what?
			len=$( echo $length $procent | $AWK '{print ($1/100*$2) }' )
		else	STATUS=""
			[ -z "$MESSAGE" ] && fixer_fix=7	# Does this depend on $WIDTH?
			# The length that is available to print bars
			[ -z "$MESSAGE" ] && \
				fixer=16 || \
				fixer=14
			length=$(( $WIDTH - (2 * ${#BORDER_LEFT}) - 2 - ${#MESSAGE} - ${fixer} - $fixer_fix ))
			len=$( echo $length $MAX $VAL | $AWK '{print ($1/$2*$3) }' )
		fi
		bars=$(printf '%*s' ${len/.*})
		bars=$(echo "$bars"|$SED s," ","\\$BAR",g)

		bar_total="$(printf '%*s' ${length/.*})"
		bar_total="[${bars}${bar_total:${#bars}}]"
		PROGRESS="$bar_total"
		;;
	#	*)	tui-status 1 "Error, type ($TYPE) is unhandled"	;;
	esac
	#[ -z "$PROGRESS" ] && tui-printf -S 1 "Something went terrible wrong..." && exit 1
#
#	Display & Action
#
	$CLEARLINE && printf "\e[2K" &
	case "${TYPE}" in
	DASH|NUM)
		tui-printf "$MESSAGE" "$STATUS"
		$doSave && \
			num_save=$(( $VAL + 1 )) && \
			save_tmp $num_save
		;;
	BAR)	if $longBar
		then	[ -z "$MESSAGE" ] && \
				tui-printf "${PROGRESS}" "$STATUS" || \
				tui-printf "$MESSAGE" "${PROGRESS}${STATUS}"
		else	[ -z "$MESSAGE" ] && \
				tui-printf "${PROGRESS}" || \
				tui-printf "$MESSAGE" "${PROGRESS}"
		fi
		;;
	esac