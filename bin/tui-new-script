#!/usr/bin/env bash
#
# Copyright (c) 2014-2015 Simon Arjuna Erat (sea)  <erat.simon@gmail.com>
# All rights reserved.
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>
#
# ------------------------------------------------------------------------
#
	ME="${0##*/}"
	for tmp_task in "/etc" "${HOME:-/root}/.local" "$HOME"
	do 	[ -f "$tmp_task/tui.conf" ] && source "$tmp_task/tui.conf" && [ ! -z "${SYSCONFDIR}!" ] && break
	done
	# Get the main config files
	# 
	if source "${SYSCONFDIR}/tuirc" && source "${HOME:-/root}/.tuirc" 2>/dev/zero
	then 	# Load required variables
		for f in $TUI_FILE_{CONF,USER}_{APPS,COMMANDS,SETTINGS}
		do	[ -f "$f" ] && source "$f"
		done
		# Load language
		if [ -z "$TUI_LANG" ]
		then	[ -z "$LANG" ] && LANG=$(locale|sed s,[=\"],\ ,g|awk '/MESS/ {print $2}')
			lng="$(echo ${LANG/\.*})"
			echo "$TUI_DIR_LOCALE/"* | grep -q "${lng}" && \
				tui-conf-set "${HOME:-/root}/.tuirc" TUI_LANG "$lng" || \
				tui-conf-set "${HOME:-/root}/.tuirc" TUI_LANG en_GB
			# Sadly this echo is required to remove tailing spaces, probablly an issue of tui-conf-get (2015.08.21)
			TUI_LANG="$(echo $(tui-conf-get "${HOME:-/root}/.tuirc" TUI_LANG))"
		fi
		LANG_FILE=${ME/tui\-}.sh
		LANG_FILE="$TUI_DIR_LOCALE/${TUI_LANG}/$LANG_FILE"
		[ -f "$LANG_FILE" ] && source "$LANG_FILE" #|| tui-status 3 "$ME -- language file"
	else	source tuirc
	fi
	break_on_injections "$@" && exit 1
	. gettext.sh
#
#	Variable defaults
#
	script_version=1.6.1
	ME="${0##*/}"
	help_text="$(eval_gettext '
$ME ($script_version)
Creates a new script in \$HOME/bin, if \$HOME/.local/bin does not exists.
Also asks to create a basic man page template in the same location.

Usage:  	$ME [options] [path/to/]FILENAME # Creates the file in that location
Examples:	$ME fileA.sh			# Creates a script in ~/bin or ~/.local/bin if existing
		$ME -s /opt/bin/fileB.sh	# Creates a standalone application script in /opt/bin
Where options are:
	-h		This screen
	-b(asic)	Creates an empty script, with preset comment-indention (shell = $USER_SHELL)
	-e(mpty)	Creates an empty script (default) (shell = $USER_SHELL)
	-f(ull)		Creates a standalone application script template (bash only)
	-r(egular)	Creates the same as basic, but with some code preset (bash only)
	-s(elect)	Select among the script names found in $TUI_DIR_USER_TEMPLATES
	
')"
	DEST=""
	TITLE="$(gettext 'sea New script script')"
	SCRIPT="$default_new_script_type" # The default
#
#	Variable handling
#
	[ "--help" = "$1" ] && printf "$help_text" && exit 99
	version_text="$(eval_gettext '
GNU $ME, Version $script_version
Copyright (C) 2015 Simon Arjuna Erat
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>

This is free software; you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
')"
	[ "--version" = "${1,,}" ] && printf "$version_text" && exit 0
	tui-title "$TITLE ($script_version)"
	while getopts "hfrbes" name
	do 	case $name in
		h)	printf "$help_text"
			exit $RET_HELP		;;
		f)	SCRIPT="full"	;;
		r)	SCRIPT="regular"	;;
		b)	SCRIPT="basic"		;;
		e)	SCRIPT="empty"		;;
		s)	list_script=$(cd "$TUI_DIR_USER_TEMPLATES";ls)
			[ -z "$list_script" ] && \
				tui-printf -S 1 "$(gettext 'No scripts found in') $TUI_DIR_USER_TEMPLATES" && \
				exit 1
			SCRIPT=$(tui-select -a $list_script)
			;;
		# *)	printf "$help_text" ; exit $RET_HELP	;;
		esac
	done
	shift $(($OPTIND - 1))
#
#	Display
#
	if [ -z "$1" ]
	then	# No filename passed
		DEST=$(tui-read "$(gettext "Enter the filename for a \"$SCRIPT\" script:")")
		if [ "${DEST}" = "${DEST##*/}" ]
		then	DEST="$TUI_DIR_USER_SCRIPTS/$DEST"
			tui-bol-dir "$TUI_DIR_USER_SCRIPTS"
		else	DEST="$1"
			#tui-bol-dir -v "$(dirname "$DEST")"
		fi
	else	# There is a name passed
		if [ "$1" = "${1##*/}" ]
		then	# Has no path - incl no leading ./
			DEST="$TUI_DIR_USER_SCRIPTS/$1"
			tui-bol-dir "$TUI_DIR_USER_SCRIPTS"
		else	# Has a path or leading ./
			DEST="$1"
			#tui-bol-dir -v "$TUI_DIR_USER_SCRIPTS/$DEST/"
		fi
	fi
	
	if [ -f "$DEST" ]
	then	tui-yesno "$(eval_gettext "File $DEST exists... Overwrite?")" ||  ( 
			BACKUP="$DEST-$(date +'%F-%T').bak"
			mv "$DEST" "$BACKUP"
			tui-status "$?" "$(eval_gettext "Saved original $DEST to $BACKUP")"
		)
	fi
	
	# Check where provided template path is
	if [ -f "$TUI_DIR_TEMPLATES/scripts/$SCRIPT" ]
	then	# Original templates write their output automatically to $DEST
		source "$TUI_DIR_TEMPLATES/scripts/$SCRIPT"
	elif [ -f "$TUI_DIR_USER_TEMPLATES/$SCRIPT" ]
	then	# Just copy the user templates, as they are individual
		tui-cp "$TUI_DIR_USER_TEMPLATES/$SCRIPT" "$DEST"
	else	tui-status 1 "$(eval_gettext "Fatal error, template \"$SCRIPT\" not found!")"
		exit 1
	fi
	
	# Did it get created
	[ -f "$DEST" ]
	if tui-status $? "$(gettext 'Saved script:') $DEST"
	then	chmod +x "$DEST"
	else	exit $?
	fi
	
	if "$default_new_script_manpage_ask"
	then	tui-yesno "$(gettext 'Create a manpage as well?')" && \
			tui-new-manpage "$DEST"
	fi
	# Open the script AFTER the manpage... to encourage the writing of the man pages first ;)
	tui-edit "$DEST"