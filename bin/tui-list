#!/usr/bin/env bash
# ------------------------------------------------------------------------
#
# Copyright (c) 2014-2015 by Simon Arjuna Erat (sea)  <erat.simon@gmail.com>
# All rights reserved.
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License (GPL) as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License (GPL) for more details.
#
# You should have received a copy of the GNU General Public License (GPL)
# along with this program.  If not, see http://www.gnu.org/licenses/gpl.html
#
# ------------------------------------------------------------------------
#
#	File:		tui-list
#	Author: 	Simon Arjuna Erat (sea)
#	Contact:	erat.simon@gmail.com
#	License:	GNU General Public License (GPL)
#	Created:	2014.11.06
#	Changed:	2015.06.03
	script_version=1.5
	TITLE="tui-list"
#	Description:	Lists entries of a folder, or passed list
#			And shows either arabic, roman or no number indexes.
#
#	Script Environment
#
	ME="${0##*/}"				# Basename of tui-list
	ME="${ME/.sh/}"				# Cut off .sh extension
#
#	Variable defaults (options)
#
	MODE=none
	beVerbose=false
	SEP=""
        ROWS=3
#
#	Help text
#
	help_text="
$ME ($script_version)
${TITLE^}
Usage: 		$ME [options] [arguments]
Examples:	$ME 
		$ME -a one 'long string' three
Where options are:
	-h(elp) 		This screen
	-a(lpha)		Use letters instead of numbers
	-r(oman)		Use roman letters instead of numbers (up to 3000 valid)
	-n(um)			User regular numbers for counting
	-v(erbose)		Print cancel option 0.

"
#	-r(oman)		Use roman letters as numbers

	[ "--help" = "$1" ] && printf "$help_text" && exit 99
	showVersion() { 
	cat <<-EOF
		GNU $ME, Version $script_version
		Copyright (C) 2015 Simon Arjuna Erat
		License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>

		This is free software; you are free to change and redistribute it.
		There is NO WARRANTY, to the extent permitted by law.
	EOF
	}
	[ "--version" = "${1,,}" ] && showVersion && exit 0
	while getopts "ahnr12v" opt
	do 	case $opt in
		h)	printf "$help_text"
			exit $RET_HELP
			;;
		1|2)    ROWS=$opt	;;
                a)	MODE=alpha 	;;
		r)	MODE=roman
			SEP=". "	;;
		n)	MODE=num
			SEP=") "	;;
		v)	beVerbose=true	;;
		# *)	printf "$help_text" ; exit $?	;;
		esac
	done
	shift $(($OPTIND - 1))
	[ -z "$1" ] && \
		while IFS= read -r ARG
		do	set -- "$@" "$ARG"
		done
	ARGS=( "${@}")			# Remaining arguments
	ARGS_COUNT=${#ARGS[@]}		# Amount of remaining
	COLUMNS=$(tput cols)
#
#	Functions
#
	num2char() { # NUM
	# Returns a letter string: a-z
	# Or: aa-az ba-bz, etc
		num=$1
		out=""
		[ $num -gt 700 ] && \
			list=( $(echo {a..z} {a..z}{a..z} {a..z}{a..z}{a..z} ))	|| \
			list=( $(echo {a..z} {a..z}{a..z} )) 	# Be fast for letters in range..
		out="${list[$num]}"
		echo "$out"
	}
	num2roman() { # NUM
	# Returns NUM in roman letters
	#
		input=$1	# input num
		output=""	# Clear output string
		len=${#input}	# Initial length to count down
		U="\033[4m"	# Underscore, multiplies with 1000
		R="\033[0m"	# Resets the underscore
		roman_val() { # NUM one five ten
		# This sub does the basic 'roman' algorythm
		#
			N=$1
			one=$2
			five=$3
			ten=$4
			out=""
			case $N in
			0)	out+=""	;;
			[123])	while [ $N -gt 0 ]
				do	out+="$one"
					N=$(($N-1))
				done
				;;
			4)	out+="$one$five"	;;
			5)	out+="$five"	;;
			[678])	out+="$five"
				N=$(($N-5))
				while [ $N -gt 0 ]
				do	out+="$one"
					N=$(($N-1))
				done
				;;
			9)	while [ $N -lt 10 ]
				do	out+="$one"
					N=$(($N+1))
				done
				out+="$ten"
				;;
			esac
			echo "$out"
		}
		while [ $len -gt 0  ]
		do	# There are letters to add
			num=${input:0:1}
			# Do action according position
			case $len in
			1)	output+="$(roman_val $num I V X)"	;;
			2)	output+="$(roman_val $num X L C)"	;;
			3)	output+="$(roman_val $num C D M)"	;;
			4)	output+="$(roman_val $num M ${U}V${R} ${U}X${R})"	;;
			5)	output+="$(roman_val $num ${U}X${R} ${U}L${R} ${U}C${R})"	;;
			*)	# Count it up
				Tone=CI\)
				Tfive=I\)
				Tten=CCI\)\)
				DEPTH=$[ $len - 3 ]	# 1 = 1000 = initial template
				while [ $DEPTH -gt 1 ]
				do	Tone="C$Tone)"
					Tfive="C$Tfive)"
					Tten="C$Tten)"
					DEPTH=$(($DEPTH-1))
				done
				output+="$(roman_val $num $Tone $Tfive $Tten  )"
				;;
			esac
			input=${input:1} ; len=${#input}
		done
		printf "$output"
	}
#
#	Display & Action
#
	unset OUT[@]
	OUT[0]=""
	shown=false
	MAX=$(( $ROWS - 1 ))
	CUR=0
	DONE=0
	for OPT in "${ARGS[@]}"
	do	DONE=$(( $DONE + 1))
		# Do the visible counter
		case $MODE in
		num)	count=$DONE				;;
		alpha)	count=$(num2char $(( $DONE - 1 )) )	;;
		roman)	count=$(num2roman $DONE)		;;
		none)	count=""				;;
		esac
		
		# Add the string to array, or print array
		if [ $CUR -le $MAX ]
		then	len=0
			for O in "${OUT[@]}";do len=$[ $len + ${#O} ];done
			sum=$[ $len + 2  + ( ${#BORDER_LEFT} * 2 ) ]
			
			if [ $sum -lt $COLUMNS ]
			then	OUT[$CUR]="${count}${SEP}${OPT}"
				shown=false
				CUR=$(( $CUR + 1 ))
			else	tui-echo "${OUT[@]}" >&2
				CUR=0 && unset OUT[@] 
				[ -z "$OPT" ] && shown=true
				OUT[$CUR]="${count}${SEP}$OPT"
				CUR=$(( $CUR + 1 ))
			fi
		else 	tui-echo "${OUT[@]}" >&2
			CUR=0 && unset OUT[@] 
			[ -z "$OPT" ] && shown=true
			OUT[$CUR]="${count}${SEP}$OPT"
			CUR=$(( $CUR + 1 ))
		fi
	done
	# Print unprinted
	! $shown && tui-echo "${OUT[@]}" >&2 # && printf "\n"
	exit 0
