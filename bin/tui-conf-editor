#!/usr/bin/env bash
# ------------------------------------------------------------------------
#
# Copyright (c) 2014-2015 by Simon Arjuna Erat (sea), erat.simon@gmail.com
# All rights reserved.
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License (GPL) as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANT ABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License (GPL) for more details.
#
# You should have received a copy of the GNU General Public License (GPL)
# along with this program.  If not, see http://www.gnu.org/licenses/gpl.html
#
# ------------------------------------------------------------------------
#
#	File:		tui-conf-editor
#	Author: 	Simon Arjuna Erat (sea)
#	Contact:	erat.simon@gmail.com
#	License:	GNU General Public License (GPL)
#	Created:	2014.11.03
#	Changed:	2015.08.03
	source tuirc && source gettext.sh
	script_version=0.8.1
#	Description:	Basic configuration file editor
#
#
#	Script Environment
#
	ME="${0##*/}"				# Basename of tui-config-editor
	LOG="$TUI_DIR_LOG/tui.log"		# Set default log file
	TITLE="GNU TUI - Configuration Editor"
#
#	Variable defaults (options)
#
	beVerbose=false
#
#	Help text
#
	help_text="$(eval_gettext '
NAME
  $ME - The configuration editor

SYNOPSYS
  $ME [-h|--help] [--version] [-L] [-l LOGFILE] [-t TITLE] FILE1 [FILE2 ..]
  
DESCRIPTION
  Advanced configuration editor, handles multiple files, reads them out and let the user change them.
  Version 0.9.0 or later may even provide options to create a proper config file from a blank file.
  
  You can either change setting by setting, or edit the file in an editor, straight from the menu.
  
  By default, all changes done using the editor are loged in $LOG.
  However, values of variables named \"pass, password, passwd, pw, pword\" will not be saved for security reasons.
  
OPTIONS
  -h|--help	Shows help and exit with 99
  --version	Shows version infoand exit with 0
  
  -L		Shows the LOG ($LOG) on PAGER ($PAGER) and exit with 0
  -l LOG	Changes \"$LOG\" to LOG
  -t TITLE	Set title to TITLE (default: 
 
EXAMPLE

	$ME /path/to/multiple/files*.conf
	
	$ME -t \"My Config Editor\" ./script.conf

HINTS
  Upcoming version will provide functionality to provide selectable options for variables, so you and your enduser can create a proper configuration file from empty.
  It might even provide options for default values, and to automaticly write an initial config file from that.
  
SEE ALSO
  bash(1), gawk(1), grep(1), sed(1), tui-conf-get(1), tui-conf-set(1), tui-select(1), tui-status(1), tui-yesno(1)
  
BUGS
  Report bugs to: erat.simon@gmail.com
  
  GNU TUI - Homepage: <http://www.gnu.org/software/tui/>
  
  General help using GNU software: <http://www.gnu.org/gethelp/>

AUTHOR
  Simon Arjuna Erat, <http://linux-scripter.blogspot.ch>
')"
# TODO :: -o OPTNAME opt1 opt2 ... Disables the scan of a file, but provides OPTNAME\'s
#
#	Messages
#
	MSG_FILE_SELECT="$(gettext 'Please select the configuration to edit:')"
	MSG_CONF_VAR_SELECT="$(gettext 'Please select which variable to change:')"
	MSG_CONF_VAR_CHANGE="$(gettext 'Do you want to change this?')"
	MSG_CONF_VAL_SELECT="$(gettext 'Please select the new value:')"
	MSG_CONF_VAL_TYPE="$(gettext 'Please type the new value:')"
	MSG_FILE_DONT_EXIST="$(eval_gettext '$CONFIG: Does not exist.')"
	
	
#
#	Functions
#
	doLog() { # "MESSAGE STRING"
	# Prints: Time & "Message STRING"
	# See 'tui-log -h' for more info
		tui-log -t "$LOG" "$1"
	}
	ConfigMenu() { # CONFIG
	# Configures the variables/files used by the script
	#
	#	Check for config file
		CONFIG="$1"
		[ ! -f "$CONFIG" ] && \
			tui-echo "$MSG_FILE_DONT_EXIST" "$TUI_FAIL" && \
			return 1
		
		# Preview
		for VAR in $(tui-conf-get -l "$CONFIG");do 
			val="$(tui-conf-get $CONFIG $VAR)"
			tui-echo "$VAR" "$val"
		done
		
		
		# Loop while is not going back
		VAR=stay
		
		while [ Back != "$VAR" ];do
			tui-echo "$MSG_CONF_VAR_SELECT"
			VAR=$(tui-select Back Edit $(tui-conf-get -l "$CONFIG"))
		
			doSelect=false
			msg=""
			newval=""
			
			case "$VAR" in
			Back) 	break				;;
			Edit)	tui-edit "$CONFIG"		;;
			*)	VAL=$(tui-conf-get "$CONFIG" "$VAR")
				[ " " = "${VAL:0:1}" ] && VAL="${VAL:1}"
				case "$VAL" in
				true|false)	doSelect=true
						selection="true false"
						;;
				on|off)		doSelect=true
						selection="on off"
						;;
				esac
				MSG_CONF_VAL_CURRENT="$(eval_gettext 'Currently \"$VAR\" is set to \"$VAL\".')"
				tui-echo "$MSG_CONF_VAL_CURRENT"
				if tui-yesno "$MSG_CONF_VAR_CHANGE"
				then 	if $doSelect
					then	tui-echo "$MSG_CONF_VAL_SELECT"
						newval=$(tui-select $selection)
					else	newval=$(tui-read "$MSG_CONF_VAL_TYPE")
					fi
					
					if [ ! -z "$newval" ]
					then	if [ 0 -eq "$UID" ]
						then	# pass, password, passwd, pw, pword
							if ([ password = "${VAR,,}" ] || [ pw = "${VAR,,}" ] || [ "pass" = "${VAR,,}" ] || [ "passwd" = "${VAR,,}" ] || [ "pword" = "${VAR,,}" ])
							then	msg="$(eval_gettext 'Changed \"$VAR\" from \"*******\" to \"*******\"')"
							else	msg="$(eval_gettext 'Changed \"$VAR\" from \"$VAL\" to \"$newval\"')"
							fi
						else	msg="Changed \"$VAR\" from \"$VAL\" to \"$newval\""
						fi
						tui-conf-set -v "$CONFIG" "$VAR" "$newval"
						RET=$?
					else	tui-yesno "This will overwrite \"$VAR\" value ($VAL) with an empty string \"\", continue?" && \
							tui-conf-set -v "$CONFIG" "$VAR" "$newval"
						RET=$?
					fi
					
					[ $RET -eq 0 ] && \
						doLog "Setup: $msg" || \
						doLog "Setup: Failed to c$(printf ${msg:1}|$SED s,ged,ge,g)"
				fi
				;;
			esac
		done
	}
#
#	Catching Arguments
#
	[ "--help" = "$1" ] && printf "$help_text" && exit 99
	version_text=$(gettext "
GNU TUI ($ME, Version $script_version)
Copyright (C) 2015 Simon Arjuna Erat
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>

This is free software; you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
")
	[ "--version" = "${1,,}" ] && printf "$version_text" && exit 0
	while getopts "hLl:t:" opt
	do 	case "$opt" in
		h)	printf "$help_text"
			exit $RET_HELP
			;;
		L)	$PAGER "$LOG"	
			exit $RET_DONE
			;;
		t)	TITLE="$OPTARG"
			;;
		l)	LOG="$OPTARG"
			;;
		esac
	done
	shift $(($OPTIND - 1))
	ARGS=( $(echo "${*}"))		# Remaining arguments
	ARGS_COUNT=${#ARGS[@]}		# Amount of remaining
#
#	Display & Action
#
	show_menu=true
	while "$show_menu";do
		clear
		tui-header "$TITLE" "$USER_NAME @ $(date +'%F %T')"
		case "$ARGS_COUNT" in
		0)	printf "$help_text"
			exit $RET_HELP
			;;
		1)	tui-title "Configuration: $1"
			ConfigMenu "$1"
			exit $?
			;;
		*)	tui-title "$TITLE"
			tui-echo "$MSG_FILE_SELECT"
			config="$(tui-select Back ${ARGS[@]})"
			case "$config" in
			Back) 	show_menu=false
				break
				return 0
				;;
			*)	tui-title "$(gettext 'Configuration:') $config"
				ConfigMenu "$config"
				tui-echo "$MSG_FILE_SELECT"
				;;
			esac
			;;
		esac
	done
