#!/usr/bin/env bash
# ------------------------------------------------------------------------
#
# Copyright (c) 2014-2015 by Simon Arjuna Erat (sea), erat.simon@gmail.com
# All rights reserved.
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License (GPL) as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License (GPL) for more details.
#
# You should have received a copy of the GNU General Public License (GPL)
# along with this program.  If not, see http://www.gnu.org/licenses/gpl.html
#
# ------------------------------------------------------------------------
#
#	File:		tui-config-editor
#	Author: 	Simon Arjuna Erat (sea)
#	Contact:	erat.simon@gmail.com
#	License:	GNU General Public License (GPL)
#	Created:	2014.11.03
#	Changed:	2015.08.03
	source tuirc && source gettext.sh
	script_version=0.8
#	Description:	Basic configuration file editor
#
#
#	Script Environment
#
	ME="${0##*/}"				# Basename of tui-config-editor
	LOG="$TUI_DIR_LOG/tui.log"		# Set default logfile
#
#	Variable defaults (options)
#
	beVerbose=false
#
#	Help text
#
	help_text="$(gettext "
Usage: 		$ME [options] [arguments]
Examples:	$ME 
		$ME /etc/tui/tui.conf
		
Where options are:
	-h(elp) 		This screen
	-L(og)			Show the log file ($LOG)
	-l [/path/to/]file.log	Change the log file to this
	-t \"Your prj title\"	Change the title to this

Files:
--------------------------------------
Script:		$ME
Log:		$LOG

")"
# TODO :: -o OPTNAME opt1 opt2 ... Disables the scan of a file, but provides OPTNAME\'s
#
#	Messages
#
	MSG_FILE_SELECT="$(gettext 'Please select the configuration to edit:')"
	MSG_FILE_DONT_EXIST="$(gettext '$CONFIG: Does not exist.')"
	MSG_CONF_VAR_SELECT="$(gettext 'Please select which variable to change:')"
	MSG_CONF_VAR_CHANGE="$(gettext 'Do you want to change this?')"
	MSG_CONF_VAL_SELECT="$(gettext 'Please select the new value:')"
	MSG_CONF_VAL_CURRENT="$(gettext 'Currently '$VAR' is set to '$VAL'.')"
	MSG_CONF_VAL_TYPE="$(gettext 'Please type the new value:')"
#
#	Functions
#
	doLog() { # "MESSAGE STRING"
	# Prints: Time & "Message STRING"
	# See 'tui-log -h' for more info
		tui-log -t "$LOG" "$1"
	}
	ConfigMenu() { # CONFIG
	# Configures the variables/files used by the script
	#
	#	Check for config file
		CONFIG="$1"
		[ ! -f "$CONFIG" ] && \
			tui-echo "$MSG_FILE_DONT_EXIST" "$TUI_FAIL" && \
			return 1
		
		# Preview
		for VAR in $(tui-conf-get -l "$CONFIG");do 
			val="$(tui-conf-get $CONFIG $VAR)"
			tui-echo "$VAR" "$val"
		done
		
		
		# Loop while is not going back
		VAR=stay
		
		while [ Back != "$VAR" ];do
			tui-echo "$MSG_CONF_VAR_SELECT"
			VAR=$(tui-select Back Edit $(tui-conf-get -l "$CONFIG"))
		
			doSelect=false
			msg=""
			newval=""
			
			case "$VAR" in
			Back) 	break				;;
			Edit)	tui-edit "$CONFIG"		;;
			*)	VAL=$(tui-conf-get "$CONFIG" "$VAR")
				[ " " = "${VAL:0:1}" ] && VAL="${VAL:1}"
				case "$VAL" in
				true|false)	doSelect=true
						selection="true false"
						;;
				on|off)		doSelect=true
						selection="on off"
						;;
				esac
				tui-echo "$MSG_CONF_VAL_CURRENT"
				if tui-yesno "$MSG_CONF_VAR_CHANGE"
				then 	if $doSelect
					then	tui-echo "$MSG_CONF_VAL_SELECT"
						newval=$(tui-select $selection)
					else	newval=$(tui-read "$MSG_CONF_VAL_TYPE")
					fi
					
					if [ ! -z "$newval" ]
					then	if [ 0 -eq "$UID" ]
						then	if [ password = "${VAR,,}" ] || [ pw = "${VAR,,}" ]
							then	msg="Changed \"$VAR\" from \"*******\" to \"*******\"" 
							else	msg="Changed \"$VAR\" from \"$VAL\" to \"$newval\""
							fi
						else	msg="Changed \"$VAR\" from \"$VAL\" to \"$newval\""
						fi
						tui-conf-set -v "$CONFIG" "$VAR" "$newval"
						RET=$?
					else	tui-yesno "This will overwrite \"$VAR\" value ($VAL) with an empty string \"\", continue?" && \
							tui-conf-set -v "$CONFIG" "$VAR" "$newval"
						RET=$?
					fi
					
					[ $RET -eq 0 ] && \
						doLog "Setup: $msg" || \
						doLog "Setup: Failed to c$(printf ${msg:1}|$SED s,ged,ge,g)"
				fi
				;;
			esac
		done
	}
#
#	Catching Arguments
#
	[ "--help" = "$1" ] && printf "$help_text" && exit 99
	version_text=$(gettext "
GNU $ME, Version $script_version
Copyright (C) 2015 Simon Arjuna Erat
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>

This is free software; you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
")
	[ "--version" = "${1,,}" ] && printf "$version_text" && exit 0
	while getopts "hLl:t:" opt
	do 	case "$opt" in
		h)	printf "$help_text"
			exit $RET_HELP
			;;
		L)	less "$LOG"	
			exit $RET_DONE
			;;
		t)	TITLE="$OPTARG"
			;;
		l)	LOG="$OPTARG"
			;;
		esac
	done
	shift $(($OPTIND - 1))
	ARGS=( $(echo "${*}"))		# Remaining arguments
	ARGS_COUNT=${#ARGS[@]}		# Amount of remaining
#
#	Display & Action
#
	show_menu=true
	while "$show_menu";do
		clear
		tui-header "$TITLE" "$USER_NAME @ $(date +'%F %T')"
		case "$ARGS_COUNT" in
		0)	printf "$help_text"
			exit $RET_HELP
			;;
		1)	tui-title "Configuration: $1"
			ConfigMenu "$1"
			break
			;;
		*)	tui-title "$TITLE"
			tui-echo "$MSG_FILE_SELECT"
			config="$(tui-select Back ${ARGS[@]})"
			case "$config" in
			Back) 	show_menu=false
				break
				return 0
				;;
			*)	tui-title "$(gettext 'Configuration:') $config"
				ConfigMenu "$config"
				tui-echo "$MSG_FILE_SELECT"
				;;
			esac
			;;
		esac
	done
