#!/usr/bin/env bash
#
# Copyright (c) 2013-2015 Simon Arjuna Erat (sea)  <erat.simon@gmail.com>
# All rights reserved.
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>
#
# ------------------------------------------------------------------------
#
#	Init TUI environment
#
	ME="${0##*/}"
	for tmp_task in "/etc" "${HOME:-/root}/.local" "$HOME"
	do 	[ -f "$tmp_task/tui.conf" ] && source "$tmp_task/tui.conf" && [ ! -z "${SYSCONFDIR}!" ] && break
	done
	# Get the main config files
	# 
	if source "${SYSCONFDIR}/tuirc" && source "${HOME:-/root}/.tuirc" 2>/dev/zero
	then 	# Load required variables
		for f in $TUI_FILE_{CONF,USER}_{APPS,COMMANDS,SETTINGS}
		do	[ -f "$f" ] && source "$f"
		done
	else	source tuirc
	fi
	break_on_injections "$@" && exit 1
#
#	Variable defaults
#
	script_version=0.9
	ME="${0##*/}"
#
#	Translate preps
#
	source gettext.sh
	TEXTDOMAIN="${0##*/}"	# Will be changed over time, but easier to copy paste
	TEXTDOMAINDIR="${TUI_DIR_SYSTEM/tui/locale}"	# Will be changed over time, but easier to copy paste
	export TEXTDOMAIN TEXTDOMAINDIR
#
#	Translate strings
#
	TR_MSG_TEXT_VERSION="$(eval_gettext '
GNU $ME, Version $script_version
Copyright (C) 2011-2015 Simon Arjuna Erat
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>

This is free software; you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
')"
	TR_MSG_TEXT_HELP="$(eval_gettext '
Usage: $ME [options] file1 file2 ... ... target_directory
Where options are:
	-h	This screen
	-d	Switch to (animated) dash-mode
	-f	Force to overwrite if target exists
	-l	Show long names (full passed target path)
	-q	Be quiet, as in: print all on one line.

Report bugs to: erat.simon@gmail.com
TUI home page: <http://www.gnu.org/software/tui/>
General help using GNU software: <http://www.gnu.org/gethelp/>
')"


	help_text="$TR_MSG_TEXT_HELP
"
	
	FILE_TEMP="$TUI_DIR_TEMP/$ME.status"
	FILE_CMD="$TUI_DIR_TEMP/bgjob"
	TMP=$TUI_FILE_TEMP
	touch $TMP
	umask 022 $FILE_CMD $FILE_TEMP
	DEST=""
	showBar=true
	doExtract=false
	doForce=false
	showRegular=false
	showLong=false
	showtotal=false
	#LS=$(locate "ls"|$GREP /ls$ | $GREP /bin/ | head -n 1)
	COUNTER=0
	tui-progress -r
	
#
#	Variable handling
#
	opts=""
	[ "--help" = "$1" ] && printf "$help_text" && exit 99
	showVersion() { 
	cat <<-EOF
		$TR_MSG_TEXT_VERSION
	EOF
	}
	[ "--version" = "${1,,}" ] && showVersion && exit 0
	while getopts hfdlq opt
	do	case "$opt" in
		d)	showBar=false
			showRegular=true
			;;
		f)	doForce=true
			;;
		l)	showLong=true
			;;
		q)	showRegular=false
			showBar=false
			showtotal=true
			;;
		#"")	unset ARGS[@]
		#	ARGS[0]=$(tui-read "Enter (absolute) path to tar:")
		#	;;
		h|*)	echo -e "$help_text" ; exit $RET_HELP
			;;
		esac
	done
	shift $(($OPTIND - 1))
	ARGS=(${@})
	case $# in
	0|1)	echo -e "$help_text"
		exit $RET_HELP
		;;
	2)	SOURCE="$1"
		TARGET="$2"
		;;
	*)	last=$[${#ARGS[@]}-1]
		TARGET=${ARGS[$last]}
		unset ARGS[$last]
		SOURCE=("${ARGS[@]}")
		;;
	esac
	MAX=${#SOURCE[@]}
#
#	Functions
#
	FileSize() { # FILE
	# Returns the filesize in bytes
	#
		$LS -l "$1" | $AWK '{print $5}'
	}
	FolderSize() { # FILE
	# Returns the foldersize in kilobytes
	#
		\du "$1"|$AWK '{print $1}'
	}
	tui_bol_runpid() { # PID
	# Returns true if ps finds the PID
	#
		[ -z "$1" ] && return 1
		\ps | $GREP -v $GREP | $GREP -q "$1"
		return $?
	}
	get_waiting() { # KILOBYTES
	# Returns the amount of seconds to wait
	#
		[ -z "$1" ] && echo 0.3 && return
		if [ $1 -lt 1000100 ]
		then	# Its less than 1 mb
			waiting=0.1
		elif [ $1 -lt 100100100 ]
		then	# Its less than 100 mb
			waiting=0.3
		elif [ $1 -lt 1000100100 ]
		then	# Its less than 1 gb
			waiting=0.4
		elif [ $1 -lt 10100100100 ]
		then	# Its less than 10 gb
			waiting=0.5
		else	# for everything higher
			waiting=0.9
		fi
		echo $waiting
	}
	ask_overwrite() { # TARGET
	# Returns true if either target does NOT exist
	# or user agrees to overwrite or force is enabled
		[ -z "$1" ] && return 1
		if [ -f "$1" ] && [ "$doForce" = "false" ]
		then	tui-yesno "\"$1\" exists, overwrite?"
			return $?
		else	return 0
		fi
	}
#
#	Display
#
	for thisFile in "${SOURCE[@]}"
	do
		tui-status -r  2 "$(eval_gettext 'Reading $thisFile...')"
		if [ -f "$thisFile" ] 
		then	ORG=$(FileSize "$thisFile")
		elif [ -d "$thisFile" ]
		then	ORG=$(FolderSize "$thisFile")
		else	# Skipping
			if $showBar || $showRegular
			then	tui-status 4 "$(eval_gettext 'Skipped $thisFile.')"
			fi
			COUNTER=$(( $COUNTER + 1 ))
			TOTAL=$(( $TOTAL + 1 ))
			continue
		fi

		if ! ask_overwrite "$TARGET"
		then	# User does not want to overwrite, so we have to skip
			COUNTER=$(( $COUNTER + 1 ))
			TOTAL=$(( $TOTAL + 1 ))
			continue
		fi
		waiting=$(get_waiting $ORG)
		trgt="$TARGET/${thisFile##*/}"
		if $showLong
		then	[ -d "$TARGET" ] && \
				display_trgt="${trgt}" || \
				display_trgt="${TARGET}"
		else	[ -d "$TARGET" ] && \
				display_trgt="${trgt##*/}" || \
				display_trgt="${TARGET##*/}"
		fi
		
		( mv "$thisFile" "$TARGET" ; echo $? > $TUI_FILE_TEMP ) &
		pid=$!

		sleep $waiting
		MSG_WORK="$(eval_gettext 'Moving to $display_trgt...')"
		MSG_DONE="$(eval_gettext 'Moved to $display_trgt')"
		while tui_bol_runpid $pid
		do	if $showRegular
			then	tui-progress "$MSG_WORK"
			elif $showBar
			then	[ -f "$trgt" ] && \
					DEST=$(FileSize "$trgt") || \
					DEST=$(FolderSize "$trgt")
				tui-progress -b -m $ORG -c $DEST "$MSG_WORK"
			else	tui-progress "${MSG_WORK/\.\.\.} ($COUNTER/$MAX)..."
				COUNTER=$(( $COUNTER + 1 ))
				# This actually represents the failures, TODO Error '127,130'
				TOTAL=$(( $TOTAL + $(cat $TUI_FILE_TEMP) ))
			fi
			# Since there is no visual progress, this 'waiting' is hard coded
			sleep $waiting
		done

		# Final Message
		showtotal=false
		if $showRegular
		then	tui-status $(cat $TUI_FILE_TEMP) "$MSG_DONE"
		elif $showBar
		then	tui-status $(cat $TUI_FILE_TEMP) "$MSG_DONE"
		#else
		fi
	done
	TOTAL_COUNT=$(( $MAX - $TOTAL ))
	RET=$(<$TUI_FILE_TEMP)
	$showtotal && tui-status  $RET "$(eval_gettext 'Moved $TOTAL_COUNT of $MAX items to $TARGET')"
	exit $RET
	