#!/usr/bin/env bash
#
# Copyright (c) 2014-2015 Simon Arjuna Erat (sea)  <erat.simon@gmail.com>
# All rights reserved.
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANT ABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>
#
# -----------------------------------------------------------------------
#
#	Init TUI environment
#
	ME="${0##*/}"
	source tuirc
	break_on_injections "$@" && exit 1
	#source "$HOME/.tuirc"
	TERM="${TERM:-GNU\057Linux}"
#
#	Variable defaults
#
	script_version=0.9.3
	ME="${0##*/}"
#
#	Translate preps
#
	source gettext.sh
	TEXTDOMAIN="${0##*/}"	# Will be changed over time, but easier to copy paste
	TEXTDOMAINDIR="${TUI_DIR_SYSTEM/tui/locale}"	# Will be changed over time, but easier to copy paste
	export TEXTDOMAIN TEXTDOMAINDIR
#
#	Translate strings
#
	TR_MSG_TEXT_VERSION="$(eval_gettext '
TUI ($ME, Version $script_version)
Copyright (C) 2011-2015 Simon Arjuna Erat
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>

This is free software; you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
')"
	TR_MSG_TEXT_HELP="$(eval_gettext '
NAME
  $ME - Write an ISO/IMG/BLOCKDEVICE to TARGET

SYNOPSYS
  $ME [-h|--help] [--version] SOURCE [TARGET]
  
DESCRIPTION
  Writes SOURCE to TARGET
  SOURCE and TARGET can be, a partition, disk, directory, file

  
OPTIONS
  -h|--help	Shows help and exit with 99
  --version	Shows version infoand exit with 0
  
  All options of "dd --help" are available, however, they need to be passed like:
  
  -o|--options="bs=BYTES,seek=N,..."
  
  Understand that for tui-dd, IF= is taken as the first argument and the second argument is used as OF=.
  
 
EXAMPLE

	tui-dd -o "bs=10M,seek=5,count=3" /dev/sda2 imagefile.bin

HINTS
  If you know you are going to write an ISO to an USB device, you can leave out the target (OF=) as TUI will ask for a /dev/disk/by-id/usb-* target.
  
	tui-dd ./somefile.iso 
  
SEE ALSO
  bash(1), dd(1), ps(1)
  
BUGS
  Report bugs to: <tui-support@nongnu.org>
  
  TUI - Homepage: <https://savannah.nongnu.org/projects/tui>
  
  General help using GNU software: <http://www.gnu.org/gethelp/>

AUTHOR
  Simon Arjuna Erat, <http://linux-scripter.blogspot.ch>
')"
	help_text="$TR_MSG_TEXT_HELP
"
#
#	Functions
#
	showVersion() { 
	cat <<-EOF
		$TR_MSG_TEXT_VERSION
	EOF
	}
#
#	Get argumetns
#
	# -a|--alternative ; to allow longoptions with a single leading '-'
	GETOPT=$(getopt \
		--options	"ho" \
		--longoptions	"help,version,options" \
		--name 		"${0##*/}" -- "${@}" \
	)
	eval set -- "${GETOPT}";
	opts_passed="status=progress"
	
	while true
	do 	case "$1" in
		# --- Basic args -----
		-h|--help)	echo "$TR_MSG_TEXT_HELP" ; exit 99	;;
		--version)	show_version
				exit 0	;;
		--)		shift ; break	;;
		# ------ arg ------------
		--options|-o)
				opts_passed+=" ${2//,/\ }"
				shift 2
				;;
		esac
	done
#
#	Variable handling
#
	func_cancel() { # 
	#
	#
		tui-print -S 1 \
			"$(eval_gettext 'Aborted writing of $SRC')"
		kill -9 $PID
		exit $? 
	}
	trap func_cancel SIGINT SIGABRT
	trap "exit $?" SIGQUIT
	#echo " --------------------- "
	#echo " --------------------- "
	#echo " --------------------- "
	#echo " --------------------- "
	SOURCE="$1"
	TARGET="$2"
	TMP="$TUI_FILE_TEMP"
	MAX=0
	SRC="${SOURCE##*/}"
	TR_MSG_STRING_WORK="$(eval_gettext 'Writing $SRC to $TARGET...')"
	TR_MSG_STRING_DONE="$(eval_gettext 'Written $SRC to $TARGET')"
	TR_MSG_WRONG_TYPE="$(eval_gettext 'Could not get type of "$SOURCE"!')"
	TR_MSG_STARTING="$(gettext 'Starting job, please wait...')"
	export LC_ALL=C
	[ -f "$TMP" ] && \
		>"$TMP" || \
		touch "$TMP"
	if [ -z "$1" ]
	then	echo "$TR_MSG_TEXT_HELP"
		exit 1
	elif [ -z "${opts_passed/status=progress}" ]
	then 	case "$TARGET" in
		"")	if tui-yesno "Use USB as target?"
			then	TARGET="$(tui-str-usb)"
			else	printf "$help_text"
				exit 1
			fi
			;;
		esac
	fi
	# Add default bytesize if none is passed
	echo "$opts_passed" | $GREP -q "bs=" || opts_passed+=" bs=${DD_BS:-4M}"
	
	# If target is within /dev, root access is required
	[ "/dev" = "${TARGET:0:4}" ] && [ 0 -ne $UID ] && \
		tui-print -S 1 "$(gettext 'Requires root')" && \
		exit 1
#
#	Functions
#
	bytes2mb() { echo "${1:-0}" | $AWK '{print int ($1 / 1024 / 1024),"MB"}';}
	write_dd() { #
	# Starts dd, prints the exit status
	# syncs device if required
		dd $opts_passed \
			if="$SOURCE" \
			of="$TARGET" \
			2>"$TMP"
		#printf "\n"
		#tui-title $count
	 	printf $? > "$TMP" && sync
	}
	transfered_bytes() { #
	# Parses the tempfile and prints the bytes transfered
	# tempfile is similar garabe/hexdump as a curl transfer rate
		value="$(
			$AWK 	-vRS=$'\r' \
				'END{NR=1}END {print $1}' \
				"$TMP" 
			)"
		#>"$TMP" 	# | tail -n1
		printf '%s' "$value" | $SED s,"[(|)]","",g
	}
	transfered_mb() { #
	# Simply parses the tempfile which contains the current data
	# Return the MB
		#value="$($AWK  -vRS=$'\r' 'END{NR=1}END {print $3,$4}' \
		#	"$TUI_FILE_TEMP" | tail -n1)"
		#printf '%s' "$value" | $SED s,"[(|)]",,g
		bytes2mb $(transfered_bytes)
	}
	
	get_size() { # ITEM
	# Identifies type of ITEM (target,destination,trafered)
	# Returns its current ITEM byte-size, physical reading
		[ -z "$1" ] && echo "-0" && return 1
		item="$1"
		size=""
		of_file() { #
		# Simply list the file
		#
			$LS -l "$1"|$AWK '{print $5}' >&1
		}
		of_dir() { #
		# Use 'du' to parse the size of the dir its content
		#
			DIRNAME="$1"
			tui-print -rS 2 "$(eval_gettext 'Calculating size of ${DIRNAME}...')" >&2
			du -c "$DIRNAME" | tail -n1 | $AWK '{print $1}' >&1
		}
		of_block() { #
		# Depending of blocktype and system, the partitioning-tool 
		# cannot be granted, prefer gdisk, as UEFI seems to be upcoming
			BLOCK="$1"
			tui-print -rS 2 "$(eval_gettext 'Calculating size of ${BLOCK}...')" >&2
			if which gdisk 2>/dev/null 1>/dev/null
			then	cmd="gdisk -p"
			else	cmd="fdisk -l"
			fi
			# Written using fdisk, though :p
			LC_ALL=C $cmd "$BLOCK" | $GREP Disk | \
				$AWK -v D="$1" '/D/ {print $5}'| head -n1 >&1
		}
		# Decide action according to type
		if [ -b "$item" ]
		then	size=$(of_block "$item")
		elif [ -d "$item" ]
		then	size=$(of_bdir "$item")
		elif [ -f "$item" ]
		then	size=$(of_file "$item")
		else	tui-print -S 1 "$TR_MSG_WRONG_TYPE"
			exit 1
		fi
		[ -n "$size" ] && \
			echo "$size" && \
			return 0
		return 1
	}
	
#
#	Action
#
	# Inform the user
	tui-print -rS 2 "$TR_MSG_STARTING"
	>"$TMP"
	
	# Start the bg job
	write_dd &
	PID=$!
	
	# Update one time variables for the progress bar
	MAX=$(get_size "$SOURCE")	# One time calc for the max value
	[ -z "$MAX" ] && \
		tui-print -S 1 "$(eval_gettext 'Could not read SOURCE ($SOURCE)')" && \
		exit 1
	MAX_MB=$(bytes2mb ${MAX})	# One time invoke to display the max value
	>"$TMP"
	size=0
	hasRaised=false
#
#	Display
#
	while 	ps $PID >/dev/null
		#[ ! "" = "$(ps|$GREP -v tui|$GREP dd|$AWK '{print $1}')" ]
		sleep 0.7
	do 	# Debug
		DEBUG=false
		if ! kill -USR1 $PID 2>/dev/null
		then	# All has been written, and sync'd
			tui-print -S $(<$TMP) "$(eval_gettext 'Successfully written $SRC to $TARGET.')"
			exit $?
		fi
		
		
		# Variables
		$DEBUG && set -x
		CUR="$(transfered_bytes)"	# Get data from tempfile
		$DEBUG && set +x
		MB="$(bytes2mb $CUR)"		# Get data from tempfile
		#tui-title "$(transfered_bytes)"
		
		
		count=$(<$TMP)
		case "$count" in
		0|1)	tui-progress "$(eval_gettext 'Synchronizing $TARGET')"
			;;
		*)	#tui-header $count
			#Prepare displayed string to user
			if $DEBUG
			then 	[ -z "$(echo $CUR)" ] && \
					echo " -- **** EMPTY \$CUR **** -- " && \
					hexdump -CL "$TMP"
				TXT="DBG:: MB:$MB CUR:$CUR MAX_MB:$MAX_MB SRC:$SRC TARGET:$TARGET"
				(set -x ; tui-progress -lbm ${MAX:-10} -c ${CUR:-1} "$TXT" )
			else 	if [ -n "$(echo ${CUR/\ })" ]
				then 	size="$MB"
					TXT="$(eval_gettext 'Written $SRC to $TARGET ($size/$MAX_MB)')"
				else	
					CUR=""
					TXT="$(eval_gettext '$SRC ($MB) to $TARGET')"
				fi
			fi
		
			# Visual output
			[ -n "$CUR" ] && \
					tui-progress -lbm ${MAX:-10} -c ${CUR:-1} "$TXT" || \
					tui-progress "$TXT"
			;;
		esac
	done
	LC_ALL=""
	tui-status $(<$TMP) "$TR_MSG_STRING_DONE"

