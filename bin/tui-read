#!/usr/bin/env bash
#
# Copyright (c) 2014-2015 Simon Arjuna Erat (sea)  <erat.simon@gmail.com>
# All rights reserved.
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANT ABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>
#
# ------------------------------------------------------------------------
#
#	Init TUI environment
#
	ME="${0##*/}"
	for tmp_task in "/etc" "${HOME:-/root}/.local" "$HOME"
	do 	[ -f "$tmp_task/tui.conf" ] && source "$tmp_task/tui.conf" && [ ! -z "${SYSCONFDIR}!" ] && break
	done
	# Get the main config files
	# 
	if source "${SYSCONFDIR}/tuirc" && source "$HOME/.tuirc" || ( [ -f ./tuirc ] && source ./tuirc )
	then 	# Load required variables
		for f in $TUI_FILE_{CONF,USER}_{APPS,COLORS,COMMANDS,SETTINGS}
		do	[ -f "$f" ] && source "$f"
		done
	else	source tuirc
	fi
	break_on_injections "${@}" && exit 1
#
#	Author: 	Simon A. Erat (sea)
#	Contact:	erat.simon@gmail.com
#
#	Variable environment
#
	script_version=1.5.2
	BORDER_RIGHT=""
	TERM="${TERM:-GNU\057Linux}"
	# Source only the most required files, 
	# create the RC and load all variable if RC is not present yet.
	# If there is a user theme directory, use that one instead
	if [ -f "$TUI_DIR_USER_THEMES/$TUI_THEME" ]
	then	source "$TUI_DIR_USER_THEMES/$TUI_THEME"
	else	source "$TUI_DIR_THEMES/$TUI_THEME" 
	fi
	# Use custom BORDER_RIGHT if it was set
	[ -z "$BORDER_RIGHT" ] && \
		for((i=${#BORDER_LEFT}-1;i>=0;i--)); do BORDER_RIGHT="$BORDER_RIGHT${BORDER_LEFT:$i:1}"; done
#
#	Translate preps
#
	source gettext.sh
	TEXTDOMAIN="${0##*/}"	# Will be changed over time, but easier to copy paste
	TEXTDOMAINDIR="${TUI_DIR_SYSTEM/tui/locale}"	# Will be changed over time, but easier to copy paste
	export TEXTDOMAIN TEXTDOMAINDIR
#
#	Translate strings
#
	TR_MSG_TEXT_VERSION="$(eval_gettext '
TUI ($ME, Version $script_version)
Copyright (C) 2011-2015 Simon Arjuna Erat
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>

This is free software; you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
')"
	TR_MSG_TEXT_HELP="$(eval_gettext '
NAME
  $ME - read, TUI-Style

SYNOPSYS
  $ME [-h|--help] [--version] [-options] ["Question:"]
  
DESCRIPTION
  desc
  
OPTIONS
  -h|--help	Shows help and exit with 99
  --version	Shows version infoand exit with 0
  
  -n	does not accept empty strings
  -p	does not show chars on input
 
EXAMPLE

	$ME 
	
	color=\044($ME \"What is your favourite colour?\")

BUGS
  Report bugs to: <tui-support@nongnu.org>
  
  TUI - Homepage: <https://savannah.nongnu.org/projects/tui>
  
  General help using GNU software: <http://www.gnu.org/gethelp/>

AUTHOR
  Simon Arjuna Erat, <http://linux-scripter.blogspot.ch>

')"
	help_text="$TR_MSG_TEXT_HELP
"
	doPassword=""
	noEmpty=false
#
#	Variable handling
#
	[ "--help" = "$1" ] && printf "$help_text" && exit 99
	showVersion() { 
	cat <<-EOF
		$TR_MSG_TEXT_VERSION
	EOF
	}
	[ "--version" = "${1,,}" ] && showVersion && exit 0
	while getopts "hpn" opt;do
	case "$opt" in
	"h")	printf "$help_text" ; exit $RET_HELP
		;;
	"p")	doPassword="-se"	
		;;
	"n")	noEmpty=true
		;;
	esac
	done
	shift $(($OPTIND - 1))
	[ -z "$1" ] && set "$TUI_INPUT_CHAR_READ" # printf "$help_text" && exit $RET_HELP
	
#
#	Check for read capabilities if not set yet
#
	LC_ALL=C $READ --help 2>&1 | $GREP -v bash > "$TUI_FILE_TEMP"
	# Delimiter	
	$GREP -q "\[-d" "$TUI_FILE_TEMP"
	bash_read_delimiter=$(tui-str-bol-conv -t $?)
	# Input
	$GREP -q "\[-i" "$TUI_FILE_TEMP"
	bash_read_input=$(tui-str-bol-conv -t $?)
	# Prompt
	$GREP -q "\[-p" "$TUI_FILE_TEMP"
	bash_read_prompt=$(tui-str-bol-conv -t $?)
	# Numbers
	$GREP -q "\[-n" "$TUI_FILE_TEMP"
	bash_read_numbers=$(tui-str-bol-conv -t $?)
	# Timeout
	$GREP -q "\[-t" "$TUI_FILE_TEMP"
	bash_read_timeout=$(tui-str-bol-conv -t $?)
#
#	Functions
#
	visual_arrangement(){ # $1
	# Prints default input line
	# Either passed question or set default input char/sign
		[ -z "$BORDER_LEFT" ] && \
			BORDER_LEFT="${BORDER_COLOR}${BORDER_LEFT}${TUI_RESET}"
		
		#BORDER_RIGHT="${BORDER_COLOR}${BORDER_RIGHT}${TUI_RESET}"
		
		POS="\033[$(( ${#BORDER_LEFT} + ${#1} +3 ))G"
		
		tui-printline "$1" >&2
		printf "\r${BORDER_LEFT} $1$POS" >&2
	
	}
	is_special() { # INPUT
	# Checks if passed INPUT is either empty,
	# an arrow or other escaped chars (^[[...)
		# Its empty, so input is required
		[ " " = "$1" ] && return 0
		[ -z "$1" ] && ! $noEmpty && return 1
		# It is escaped
		if [ "${1:0:1}" = "" ]
		then	return 0
			# This is experimental
			tmp_input="${1:1:3}"
			case "$tmp_input" in
			'[A')	echo "Up Arrow" 	;;
			'[B')	echo "Down Arrow"	;;
			'[C')	echo "Right Arrow"	;;
			'[D')	echo "Left Arrow"	;;
			esac
			#return 0
		fi
		echo "$1" | grep "\[\[" && return 0
		return 1
	}
#
#	Action
#
	if $noEmpty
	then	while [ -z "$INPUT" ]
		do	visual_arrangement "$1"
			$READ ${doPassword} INPUT #</dev/tty
			echo "${INPUT:0:3}" | $GREP -q ^"\[\[" && INPUT=""
		done
	else	while INPUT=""
		do	visual_arrangement "$1"
			$READ -r ${doPassword} INPUT
			is_special "$INPUT" || break
		done
	fi
#
#	Display
#
	if [ -z "$doPassword" ] 
	then	echo $INPUT
	else	cat <<-EOF
		$INPUT
		EOF
	fi
	printf "\r" >&2
	tui-printline -E "$1" "$INPUT" >&2
