#!/usr/bin/env bash
#set -x
# ------------------------------------------------------------------------
#
# Copyright (c) 2015 by Simon Arjuna Erat (sea), erat.simon@gmail.com
# All rights reserved.
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License (GPL) as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License (GPL) for more details.
#
# You should have received a copy of the GNU General Public License (GPL)
# along with this program.  If not, see http://www.gnu.org/licenses/gpl.html
#
# ------------------------------------------------------------------------
#
	ME="${0##*/}"
	for tmp_task in "/etc" "${HOME:-/root}/.local" "$HOME"
	do 	[ -f "$tmp_task/tui.conf" ] && source "$tmp_task/tui.conf" && [ ! -z "${SYSCONFDIR}!" ] && break
	done
	# Get the main config files
	# 
	if source "${SYSCONFDIR}/tuirc" && source "${HOME:-/root}/.tuirc" 2>/dev/zero
	then 	# Load required variables
		for f in $TUI_FILE_{CONF,USER}_{APPS,COMMANDS,SETTINGS}
		do	[ -f "$f" ] && source "$f"
		done
	else	source tuirc
	fi
	break_on_injections "$@" && exit 1
#
#	File:		tui-ftp
#	Author: 	Simon Arjuna Erat (sea)
#	Contact:	erat.simon@gmail.com
#	License:	GNU General Public License (GPL)
#	Created:	2015.01.28
#	Changed:	2015.09.17
	script_version=0.9-ALPHA
#	Description:	A simple handler for FTP commands.
#
#	Script Environment
#
	ME="${0##*/}"				# Basename of tui-ftp
	ME="${ME/.sh/}"				# Cut off .sh extension
	[[ ! "." = "$(dirname $0)" ]] && \
		ME_DIR="$(dirname $0)" || \
		ME_DIR="$(pwd)"			# Dirname of tui-ftp
	CONFIG_DIR="$HOME/.config/tui"		# Configuration directory
	CONFIG="$CONFIG_DIR/apps.conf"			# Configuration file
	LOG="$CONFIG_DIR/$ME.log"			# Logfile
	TEMPFILE="$TUI_DIR_TEMP/$ME.tmp"		# Tempfile
#
#	Translate preps
#
	source gettext.sh
	TEXTDOMAIN="${0##*/}"	# Will be changed over time, but easier to copy paste
	TEXTDOMAINDIR="${TUI_DIR_SYSTEM/tui/locale}"	# Will be changed over time, but easier to copy paste
	export TEXTDOMAIN TEXTDOMAINDIR
#
#	Translate strings
#
	TITLE="$(gettext 'TUI handler for FTP tasks')"
	TR_MSG_TEXT_VERSION="$(eval_gettext '
GNU $ME, Version $script_version
Copyright (C) 2011-2015 Simon Arjuna Erat
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>

This is free software; you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
')"
	TR_MSG_TEXT_HELP="$(eval_gettext '
${TITLE}
Usage: 		$ME [options]
Examples:	$ME -U myuser -P myPassword -f /local/file -r /remote/path mydomain.com:23
		$ME -d /remote/file -l /local/path mydomain.com
Where options are:
	-h(elp) 		This screen
	-L(og)			View the logfile
	-q(uiet)		Mutes all output
	-v(erbose)		Enables the scripts verbosity

    ----General use----
	-H(ost)	HOST[:PORT]	Remote host
	-U(user)	NAME	Remote user
	-P(assword)	WORD	Remote password
	-B(atch)	FILE	Script with ftp commands to execute
	-c(ommand) \"cmd1 ; cmd2 ... \"	List of commands to execute upon successful login

    ----Modes----
    	-a(active)		Force active mode
	-p(assiv)		Force passiv mode
	
    ----Upload file----
	-f(ile) 	FILE	Local file to upload
	-r(emote)	PATH	Remote path to upload the file to

    ---Download file----
	-d(ownload)	FILE	Remote file to download
	-l(ocal)	PATH	Local path to download file to

For each call, you can either only Up- or Download files or execute commands.
NOTE: I have no idea how those batch files should look like, please see the according ftp commands man page.

Report bugs to: erat.simon@gmail.com
TUI home page: <http://www.gnu.org/software/tui/>
General help using GNU software: <http://www.gnu.org/gethelp/>
')"
#
#	Variable defaults (options)
#
	beVerbose=false
	beLog=true
	FTP_PORT=22	# Default value
	force_active=false
	force_passiv=false
#
#	Help text
#
	help_text="$TR_MSG_TEXT_HELP
"
#
#	Functions
#
	parse_log() { #
	# Parses the logfile and tries to make it presentable
	# ((action_{done,work} are set way below ~ line 300-340))
		# Make sure we dont loop endless when login fails
		CON_FAIL_AFTER=20
		CON_FAIL_CNT=0
		
		# Init STRING snippet to work with:
		STRING=$(tail -n 5 "$LOG")
		
		# Before doing extended parsing, lets make sure the user could log in
		while ! echo "$STRING" | $GREP -q  ^220
		do	tui-progress "$(eval_gettext 'Connecting to $HOST')"
			STRING=$(tail -n 5 "$LOG")
			CON_FAIL_CNT=$(( $CON_FAIL_CNT + 1 ))
			[ $CON_FAIL_CNT -ge $CON_FAIL_AFTER ] && return 1
		done
		$beVerbose && tui-status 0 "$(eval_gettext 'Connected to $HOST')"
		
		# Loop until logout num is found
		while ! echo "$STRING" | $GREP -q ^221
		do	STRING=$(tail -n 5 "$LOG")
			action_work_out=""
			
			# Generate output string, parse for filenames
			case $MENU in
			up)	for LF in "${LOC_FILES[@]}"
				do 	echo "$STRING" | $GREP -q "$LF" && \
						LFF="$(basename $LF)" && \
						action_work_out="$action_work $LFF" && \
						break
				done
				last_found="$LFF"
				;;
			down)	for RF in "${REM_FILES[@]}"
				do 	echo "$STRING" | $GREP -q "$RF" && \
						RFF="$(basename $RF)" && \
						action_work_out="$action_work $RFF" && \
						break
				done
				last_found="$RFF"
				;;
			cmd)	for CC in $($GREP put "$TEMPFILE"|$AWK '{print $2}')
				do 	echo "$STRING" | $GREP -q "$CC" && \
						CCF="$(basename $CC)" && \
						action_work_out="$action_work $CCF" && \
						break
				done
				last_found="$CCF"
				;;
			*)	if [ ! "$STRING" = "$(tail -n5 $LOG)" ]
				then	tui-log -tv "$LOG" "$(gettext 'Error parsing:')"
					tui-log -v "$LOG" "$STRING"
				fi
				;;
			esac
			
			
			[ -z "$action_work_out" ] && action_work_out="$(gettext 'Parsing log...')"
			tui-progress "$action_work_out" ; printf "\r"
			sleep 0.5
			# Is a failsafe exit required?
		done
		
		tui-status 0 "$action_done $last_found"
	}
#
#	Environment checks
#
	# Load default values before parsing options
	if ! source "$CONFIG" 
	then	# Could not source the configuration...
		tui-status 1 "$(eval_gettext 'Failed to load: $CONFIG')"
	fi
	[ -f "$LOG" ] || touch "$LOG"
#
#	Catching Arguments
#
	declare -a LOC_FILES LOC_PATHS
	declare -a REM_FILES REM_PATHS
	declare -a BATCHES
	MENU=""	# Nothing
	
	showVersion() { 
	cat <<-EOF
		$TR_MSG_TEXT_VERSION
	EOF
	}
	case "$1" in
	"--version")	showVersion
			exit 0
			;;
	"-h"|"--help"|"-help"|"")
		printf "$help_text"
		exit $RET_HELP
		;;
	*)	tui-log -e "$LOG"
		NUM=$$
		tui-log -t "$LOG" "$(eval_gettext 'Process ID: $NUM')"
		tui-log -t "$LOG" "$(eval_gettext 'FTP Command: $FTP')"
		;;
	esac
	while getopts "apLqvH:U:P:B:c:f:d:l:r:" opt
	do 	case $opt in
		L)	less "$LOG"
			exit $?
			;;
		q)	beQuiet=true
			log_msg="$(gettext 'Forced silence')"
			;;
		v)	beVerbose=true
			log_msg="$(gettext 'Enabled verbosity')"
			;;
		# -- Active / Passive modes
		a)	force_aktive=true
			force_passiv=false
			log_msg="$(gettext 'Force active mode')"
			[ lftp = "$FTP" ] && \
				tui-status 111 "$(eval_gettext 'Please see the man page of $FTP, section 'Settings' to see how to ${log_msg}')"
			[ sftp = "$FTP" ] && \
				tui-status 111 "$(eval_gettext '$FTP does not support the enforcing of passive mode.')"
			[ ftp = "$FTP" ] && ACTPAS="-A"
			;;
		p)	force_passiv=true
			force_aktive=false
			log_msg="$(gettext 'Force passiv mode')"
			[ lftp = "$FTP" ] && \
				tui-status 111 "$(gettext 'Please see the man page of $FTP, section 'Settings' to see how to ${log_msg}')"
			[ sftp = "$FTP" ] && \
				tui-status 111 "$(gettext '$FTP does not support the enforcing of passive mode.')"
			[ ftp = "$FTP" ] && ACTPAS="-p"
			;;
		# -- General use
		U)	USERNAME="$OPTARG"
			log_msg="$(eval_gettext 'Set user to: $USERNAME')" 		;;
		P)	PASSWORD="$OPTARG"
			log_msg="$(gettext 'Set password to: *******')" 		;;
		B)	BATCHES[${#BATCHES[@]}]="$OPTARG"
			log_msg="$(eval_gettext 'Added batch file to execute: $OPTARG')"
			MENU="cmd"					;;
		c)	COMMANDS_RAW="$OPTARG"
			log_msg="$(eval_gettext 'Set commands to parse: $OPTARG')"
			MENU="cmd"					;;
		# -- Upload file
		f)	LOC_FILES[${#LOC_FILES[@]}]="$OPTARG"
			log_msg="$(eval_gettext 'Added file to upload: $OPTARG')"
			MENU="up"					 		;;
		l)	LOC_PATHS[${#LOC_PATHS[@]}]="$OPTARG"
			log_msg="$(eval_gettext 'Added download target: $OPTARG')"
			MENU="down"					 		;;
		# -- Download file
		d)	REM_FILES[${#REM_FILES[@]}]="$OPTARG"
			log_msg="$(eval_gettext 'Added file to download: $OPTARG')"
			MENU="down"					 		;;
		r)	REM_PATHS[${#REM_PATHS[@]}]="$OPTARG"
			log_msg="$(eval_gettext 'Added upload target: $OPTARG')"
			MENU="up"							;;
		*)	printf "$help_text" ; exit $?	;;
		esac
		log_opt="-t"
		[ ! -z "$log_msg" ] && $beVerbose && log_opt+="v"
		[ ! -z "$log_msg" ] && $beLog && tui-log $log_opt "$LOG" "$log_msg"
	done
	shift $(($OPTIND - 1))	# All options and they (if applicable) mandatory argument are removed
	HOST="$1" ; shift
	PORT=${HOST/#*:} ; 
	[ "$PORT" = "$HOST" ] && PORT=""
	[ -z "$PORT" ] && PORT="$FTP_PORT"
	log_msg="$(eval_gettext 'Set host to: $HOST')"
	$beLog && tui-log $log_opt "$LOG" "$log_msg"
	
#
#	Make sure FTP is set
#
	if [ -z "$FTP" ]
	then	# No ftp application found yet, set one now!
		count=0
		found=""
		for f in ftp lftp sftp
		do
			which $f > /dev/zero && \
				count=$(( $count + 1 )) && \
				found+=" $f"
		done
		if [ $count -gt 1 ]
		then	tui-echo "$(gettext 'Please select which ftp command you want to use:')"
			FTP=$(tui-select $found)
			printf "\n"
		else	FTP=$(echo $found|$AWK '{print $1}')
		fi
		tui-log -t "$LOG" "$(eval_gettext 'Set ftp command to: $FTP')"
		tui-conf-set "${CONFIG}" FTP $FTP
		tui-status $? "$(eval_gettext 'Saved $FTP as FTP')"
	# -- Not handling ports yet --
	#	tui-yesno "Change the default ftp port of $FTP_PORT?" && \
	#		FTP_PORT=$(tui-read "What is the new default port?") && \
	#		tui-log -t "$LOG" "Set ftp default port to: $FTP_PORT"
	#
	#	/home/sea/prjs/tui/bin/tui-conf-set "${CONFIG}" FTP_PORT $FTP_PORT
	#	tui-status $? "Saved $FTP_PORT as default port number."
	# ------
	fi
#
#	Prepare commands
#	
	# Clear temporary commands file, or create one if missing
	[ -f "$TEMPFILE" ] && \
		echo "" > "$TEMPFILE" || \
		touch "$TEMPFILE"
	
	# Set custom commands? -- no sure how much this is required
	case $FTP in
	ftp)	# Do ftp settings
		BLOCKLIST="chgrp rm"
		RM=delete
		PUT=put
		CD=cd
		LCD=lcd
		;;
	lftp)	# Do lftp settings
		BLOCKLIST="chgrp rm"
		RM="delete"
		PUT=put
		CD=cd
		LCD=lcd
		;;
	sftp)	# Do sftp settings
		BLOCKLIST="delete "
		RM="rm"
		PUT=put
		CD=cd
		LCD=lcd
		;;
	esac
	
	# Fill the command list
	case "$MENU" in
	cmd)	#tui-echo "TODO Generate command list"
		oIFS="$IFS"
		IFS=";"
		C=0
		M=${#COMMANDS_RAW}
		if [ $M -gt 2 ]
		then	while [ $C -lt $M ]
			do
				char="${COMMANDS_RAW:$C:1}"
				[ "$char" = ";" ] && \
					printf "\n" >> "$TEMPFILE" || \
					printf "$char" >> "$TEMPFILE"
				C=$(( $C + 1 ))
			done
			$beVerbose && \
				tui-status 0 "$(gettext 'Generated command list...')"
		fi
		
		action_work="$(gettext 'Executing custom command list')"
		action_done="${action_work/ing/ed}"
		BATCHES[${#BATCHES[@]}]="$TEMPFILE"
		;;
	down)	###
		### tui-echo "TODO Download file" -- just copy pasted from the upload section
		###
		$beVerbose && \
			tui-printf -rS 2 "$(gettext 'Generate download commands...')"
		count=0 ; total=${#REM_FILES[@]}
		DEFAULT_DIR="${LOC_PATHS[0]}"
		[ -z "$DEFAULT_DIR" ] && DEFAULT_DIR="/"
		
		while [ $count -lt $total ]
		do
			REM="${REM_FILES[$count]}"
			LOC="${LOC_PATHS[$count]}" 
			
			[ -z "$LOC" ] && \
				LOC="$DEFAULT_DIR" || \
				DEFAULT_DIR="$LOC"
			
			$beVerbose && \
				tui-progress "$(eval_gettext 'Generate download list: $REM to $LOC')"
			
			echo "$LCD $LOC" >> "$TEMPFILE"
			echo "$GET $REM" >> "$TEMPFILE"
			
			count=$(( $count + 1 ))
		done
		$beVerbose && \
			tui-status $? "$(gettext 'Generated download list.')"
		
		BATCHES[${#BATCHES[@]}]="$TEMPFILE"
		action_work="$(gettext 'Downloading file')"
		action_done="$(gettext 'Downloaded file')"
		;;
	up)	$beVerbose && \
			tui-printf -rS 2 "$(gettext 'Generate upload commands...')"
		count=0 ; total=${#LOC_FILES[@]}
		DEFAULT_DIR="${REM_PATHS[0]}"
		[ -z "$DEFAULT_DIR" ] && DEFAULT_DIR="/"
		
		while [ $count -lt $total ]
		do
			REM="${REM_PATHS[$count]}"
			LOC="${LOC_FILES[$count]}" 
			
			[ -z "$REM" ] && \
				REM="$DEFAULT_DIR" || \
				DEFAULT_DIR="$REM"
			
			$beVerbose && \
				tui-progress "$(eval_gettext 'Generate upload list: $LOC to $REM')"
			
			echo "$CD $REM" >> "$TEMPFILE"
			echo "$PUT $LOC $REM/$(basename $LOC)" >> "$TEMPFILE"
			
			count=$(( $count + 1 ))
		done
		$beVerbose && \
			tui-status $? "$(gettext 'Generated upload list.')"
		
		action_work="$(gettext 'Uploading file')"
		action_done="${action_work/ing/ed}"
		BATCHES[${#BATCHES[@]}]="$TEMPFILE"
		;;
	"")	tui-status 1 "$(gettext 'There was an error!')"
		exit $?
		;;
	esac
#
#	Display & Action
#
	[ -z "$USERNAME" ] && \
		HOST_STRING="$HOST" || \
		HOST_STRING="$USERNAME@$HOST"
	[ -z "$HOST" ] && \
		tui-printf -S 1 "$(gettext 'No host supplied.')" && \
		exit 1
	
	if ! $GREP -q "$HOST" ~/.netrc
	then
		[ -f "$HOME/.netrc" ] || touch "$HOME/.netrc"
		if tui-yesno "$(eval_gettext 'Add $HOST to $HOME/.netrc for automatic login?')"
		then	echo "machine $HOST login $USERNAME password $PASSWORD" >> "$HOME/.netrc"
			tui-title "$HOME/.netrc"
			tui-cat "$HOME/.netrc"
			tui-echo
			tui-yesno "$(gettext 'Change any loginame / password?')" && \
				tui-edit "$HOME/.netrc"
		fi
	fi
	
	# Since passed commands are put into a file to be processed
	# my workaround enables 'ftp' to work with batch files as well
	# so all the handling is focused on working with them.
	for BATCH in "${BATCHES[@]}"
	do	# Execute batchfiles accordingly, 
		# warn user if there are commands not available to this $FTP
		for block in $BLOCKLIST;do
			grep -q $block "$BATCH" && \
				tui-status 111 "$(eval_gettext 'Warning: $BATCH contains invalid command for $FTP: $block')"
		done
		
		# Actualy work with each of the batch file/s
		# Generate commands according to which FTP-command is beeing used.
		case $FTP in
		ftp)	# Do ftp settings
			# There is NO batch file handling for regular 'ftp' command :(
			# Found an alternative handling
			CMD="$(cat $BATCH)"
			TMP="$TEMPFILE.$$"
			
			
			
			touch "$TMP"
			cat "$TMP" >> "$LOG"
printf "$FTP $ACTPAS -v $HOST << EOF >>\"$LOG\"
$CMD
bye
EOF
" > "$TMP"
			sh "$TMP" &
			#tui-title "M$MODE ; m$mode" ; tui-press
			parse_log
			#tui-status $? "$action_done $LFF"
			RET=$?
			;;
		# TODO everything below :p
		lftp)	# to Do lftp settings
			$FTP -f "$BATCH" "$HOST_STRING"
			
			RET=$?
			;;
		sftp)	# to Do sftp settings
			$FTP -b "$BATCH" "$HOST_STRING"
			
			RET=$?
		;;
		esac
	done
		
#
# 	Clean up & exit
#
	[ -f "$TEMPFILE" ] && rm -fr "$TEMPFILE"
	[ -f "$TEMPFILE.$$" ] && rm -fr "$TEMPFILE.$$"
	RAN=$($GREP Process $LOG | wc -l )
	[ $RAN -gt 1000 ] && \
		tui-yesno "$(eval_gettext 'There were $RAN ftp calls, do you want to see the logfile and clear it after?')" && \
		less "$LOG" && echo "" > "$LOG"
	exit $RET