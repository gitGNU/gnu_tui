#!/usr/bin/env bash
#
# Copyright (c) 2013-2015 Simon Arjuna Erat (sea)  <erat.simon@gmail.com>
# All rights reserved.
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>
#
# ------------------------------------------------------------------------
#
#
#	Author: 	Simon Arjuna Erat (sea)
#	Contact:	erat.simon@gmail.com
#	License:	GNU General Public License (GPL)
#	Created:	2013.05.03
#	Changed:	2015.05.22
	script_version=2.0.1
#	Description:	The loader and configurator of TUI
#
#	Variables	:	Default
#
	TUI_VERSION=0.8.0
	TRC="$HOME/.tui_rc"
#
#	Functions
#
	doLog() { # "MESSAGE STRING"
	# Prints: Time & "Message STRING"
	# See 'tui-log -h' for more info
		tui-log -t "$TUI_LOG" "$1"
	}
	function help_screen () { #
	# Prints some basic usage
	#
		cat <<-SCREEN
		$ME $TUI_VERSION (This script: $script_version)
		$TITLE
		Usage: 	$ME [config|reset[-yes]|theme] (source tui)
		Where options are:
			-h		This screen
			config		Enters directly into config mode
			reset		Resets configuration to defaults, root will reset systemwide defaults
			reset-yes	Doesnt ask for verification
			theme [THEME]	If no THEME is passed, returns which is currently active, otherwise sets theme to THEME.
					As root, changes the root theme only.
		
		SCREEN
	}
	function first_time() { #
	# Prepare all variables and write conf files
	#
		function writeconf_trc() { # PATH
		# Write initial default paths
		# But first prepare some variables
			# Check for existing and writable (expected) default dirs
			for tryout in "$HOME/.local/cache" "$HOME/.cache"
			do	[ -d "$tryout" ] && TUI_DIR_CACHE="$tryout" && break
			done
			for tryout in "$HOME/.local/bin" "$HOME/bin"
			do	[ -d "$tryout" ] && TUI_DIR_USER_SCRIPTS="$tryout" && break
			done
			for tryout in "$HOME/.local/man/man1"
			do	[ -d "$tryout" ] && TUI_DIR_USER_MANPAGES="$tryout" && break
			done
			[ $UID -eq 0 ] && TUI_DIR_USER_MANPAGES="${TUI_DIR_USER_MANPAGES:-/usr/share/man/man1}"
			
			# Since this is used as a fallback dir, its own fallback needs to be set now
			TUI_DIR_USER_SCRIPTS="${TUI_DIR_USER_SCRIPTS:-\$HOME/bin}"
			[ -z "$TUI_DIR_USER_MANPAGES" ] && \
				[  "$HOME/.local/bin" = "$TUI_DIR_USER_SCRIPTS" ] && \
				TUI_DIR_USER_MANPAGES="$HOME/.local/man/man1"
			# Set initial default values per user / root
			if [ $UID -eq 0 ]
			then	THM=default-red
				TCACHE=/tmp
			else	THM=default
				TCACHE=$HOME/.cache
			fi
			TUI_DIR_CACHE=${TUI_DIR_CACHE:-$TCACHE}
			TUI_DIR_SYSTEM=${TUI_PREFIX:-/usr}/share/tui
			TC="${TUI_CHROOT:-/}"
			cat > "$TRC" <<-TUI_RC
			#$TRC
			# This file is not ment to be changed manualy!
			# Any change of this file may result in an unusable TUI.
			# Do changes at your own risk!
			#
			# If you need to change something, change the top DIR variables first,
			# so all later variable definitions apply that change automaticly.
			#
			#	Theme
			#	Options are: 	default, default-red, dot-blue, dot-red, \\
			#			floating, mono, witch-purple, witch-yellow
			#	See $TUI_DIR_SYSTEM/themes
			#
			 	TUI_THEME=$THM
			#
			#	Paths	:	Custom Installation
			#
			[ -z "\$TUI_DIR_INSTALL_ROOT" ] && readonly \\
			 	TUI_DIR_INSTALL_ROOT="${TC%/}"
			[ -z "\$TUI_PREFIX" ] && readonly \\
			 	TUI_PREFIX="\$TUI_DIR_INSTALL_ROOT/usr"
			[ -z "\$TUI_DIR_DOCS" ] && readonly \\
			 	TUI_DIR_DOCS="\$TUI_PREFIX/share/doc/tui"
			[ -z "\$TUI_DIR_MANPAGES" ] && readonly \\
			 	TUI_DIR_MANPAGES="\$TUI_PREFIX/share/man/man1"
			[ -z "\$TUI_DIR_USER" ] && readonly \\
			 	TUI_DIR_USER="$XDG_CONFIG_DIR/tui"
			#
			#	Paths	:	System
			#
			[ -z "\$TUI_DIR_CONF" ] && readonly \\
			 	TUI_DIR_CONF="\$TUI_DIR_INSTALL_ROOT/etc/tui"
			[ -z "\$TUI_DIR_LOGS" ] && readonly \\
			 	TUI_DIR_LOGS="\$TUI_DIR_INSTALL_ROOT/var/logs"
			[ -z "\$TUI_DIR_SYSTEM" ] && readonly \\
			 	TUI_DIR_SYSTEM="\$TUI_PREFIX/share/tui"
			[ -z "\$TUI_DIR_TEMPLATES" ] && readonly \\
			 	TUI_DIR_TEMPLATES="\$TUI_DIR_SYSTEM/templates"
			[ -z "\$TUI_DIR_THEMES" ] && readonly \\
			 	TUI_DIR_THEMES="\$TUI_DIR_SYSTEM/themes"
			[ -z "\$TUI_DIR_CACHE" ] && readonly \\
			 	TUI_DIR_CACHE="${TUI_DIR_CACHE}"
			[ -z "\$TUI_DIR_LIST" ] && readonly \\
			 	TUI_DIR_LIST="${TUI_DIR_SYSTEM}/lists"
			#
			#	Paths	:	User
			#
			[ -z "\$TUI_DIR_USER_LOGS" ] && readonly \\
			 	TUI_DIR_USER_LOGS="\$TUI_DIR_USER/logs"
			[ -z "\$TUI_DIR_USER_SCRIPTS" ] && readonly \\
			 	TUI_DIR_USER_SCRIPTS="$TUI_DIR_USER_SCRIPTS"
			[ -z "\$TUI_DIR_USER_MANPAGES" ] && readonly \\
			 	TUI_DIR_USER_MANPAGES="$TUI_DIR_USER_MANPAGES"
			[ -z "\$TUI_DIR_USER_TEMPLATES" ] && readonly \\
			 	TUI_DIR_USER_TEMPLATES="\$TUI_DIR_USER/templates"
			[ -z "\$TUI_DIR_USER_THEMES" ] && readonly \\
			 	TUI_DIR_USER_THEMES="\$TUI_DIR_USER/themes"
			#
			#	Files	:	System
			#
			[ -z "\$TUI_FILE_CONF_APPS" ] && readonly \\
			 	TUI_FILE_CONF_APPS="\$TUI_DIR_CONF/apps.conf"
			[ -z "\$TUI_FILE_CONF_COLORS" ] && readonly \\
			 	TUI_FILE_CONF_COLORS="\$TUI_DIR_CONF/colors.conf"
			[ -z "\$TUI_FILE_CONF_COMMANDS" ] && readonly \\
			 	TUI_FILE_CONF_COMMANDS="\$TUI_DIR_CONF/commands.conf"
			[ -z "\$TUI_FILE_CONF_SETTINGS" ] && readonly \\
			 	TUI_FILE_CONF_SETTINGS="\$TUI_DIR_CONF/settings.conf"
			[ -z "\$TUI_FILE_CONF_STATUS" ] && readonly \\
			 	TUI_FILE_CONF_STATUS="\$TUI_DIR_CONF/status.conf"
			[ -z "\$TUI_FILE_CONF_SYSTEM" ] && readonly \\
			 	TUI_FILE_CONF_SYSTEM="\$TUI_DIR_CONF/tui.conf"
			#
			#	Files	:	User
			#
			[ -z "\$TUI_FILE_USER" ] && readonly \\
			 	TUI_FILE_USER="\$TUI_DIR_USER/user.conf"
			[ -z "\$TUI_FILE_USER_APPS" ] && readonly \\
			 	TUI_FILE_USER_APPS="\$TUI_DIR_USER/apps.conf"
			[ -z "\$TUI_FILE_USER_SETTINGS" ] && readonly \\
			 	TUI_FILE_USER_SETTINGS="\$TUI_DIR_USER/settings.conf"
			[ -z "\$TUI_FILE_USER_LOADLIST" ] && readonly \\
			 	TUI_FILE_USER_LOADLIST="\$TUI_DIR_USER/loadlist.conf"
			[ -z "\$TUI_FILE_TEMP" ] && readonly \\
			 	TUI_FILE_TEMP="${TUI_DIR_CACHE:-\$HOME/.cache}/tui.tmp~"
			
			TUI_RC
		}
		function writeconf_loadlist() { #
		# tui will load the config files according to the order of the loadlist.
		#
			cat > $TUI_FILE_USER_LOADLIST <<-LOADLIST
			# This list defines the loading order do NOT change
			user.conf
			apps.conf
			settings.conf
			
			LOADLIST
		}
		writeconf_trc
		. "$TRC"
		writeconf_loadlist
		
		# Verify all dirs are created, could be so easy...
		#tui-bol-dir $(tui-conf-get -l "$TRC"|grep "_DIR_")
		for item in $TUI_PREFIX $TUI_DIR_CONF $TUI_DIR_DOCS $TUI_DIR_SYSTEM $TUI_DIR_USER_LOGS \
				$TUI_DIR_THEMES $TUI_DIR_CACHE $TUI_DIR_USER_SCRIPTS $TUI_DIR_USER_MANPAGES
		do	[ -d "$item" ] ||  ( mkdir -p "$item" ; echo "Created: $item" > /dev/stderr )
		done
	}
	ConfigTUI() { #
	#
	#
		MSG_MENU_title=""
		MSG_MENU_out=""
		MSG_MENU_next=""
		
		# Get the proper path
		if [ 0 -eq "$UID" ] 
		then 	# thisconf="${TUI_DIR_CONF/\/\//\/}"
			thisconf="$TUI_DIR_CONF"
			MSG_MENU_title="TUI config - System Wide"
		else	thisconf="$TUI_DIR_USER"
			MSG_MENU_title="TUI config - Personal for $USER_NAME"
		fi
		
		# Show & Edit files
		cd "$thisconf"
		tui-conf-editor -t "Text User Interface" *conf
	}
	ResetTUI() { #
	# Removes the current configuration according to user level
	# and replaces them with default configuration.
		YES=${YES:-false}
		case "$UID" in
		0)	# ROOT, system wide
			RANGE="System defaults"
			CFG_DIR="$TUI_DIR_CONF"
			SRC_DIR="$TUI_DIR_SYSTEM/conf.etc"
			;;
		*)	# USER, personal only
			RANGE="Personal settings"
			CFG_DIR="$TUI_DIR_USER"
			SRC_DIR="$TUI_DIR_SYSTEM"
			;;
		esac
		
		[ -d "$CFG_DIR" ] || mkdir -p "$CFG_DIR"
		cd "$CFG_DIR"
		if [ $? -eq 0 ]  && $YES
		then	rm -fr *
		else	tui-yesno "Are you sure to remove $RANGE in \"$CFG_DIR\"" || return 1
			rm -fr *
		fi
		
		cd "$SRC_DIR"
		cp *conf "$CFG_DIR"
		return $?
	}
#
#	Premiere?
#
	if [ ! -f "$TRC" ]
	then	# Some default values required for first time setup
		[ -z "$DEFAULT" ] && \
		DEFAULT="$HOME/.config"
		[ -z "$XDG_CONFIG_DIR" ] && \
			[ -d "$DEFAULT/user-dirs.dirs" ] && \
			source "$DEFAULT/user-dirs.dirs"
		XDG_CONFIG_DIR="${XDG_CONFIG_DIR:-$DEFAULT}"
		# This is just required for the manual install process
		[ -z "$TUI_CHROOT" ] && \
			TUI_CHROOT="${CHROOT:-/}"
		[ -z "$TUI_PREFIX" ] && \
			TUI_PREFIX="${TUI_PREFIX:-${TUI_CHROOT%/}/usr}"
		# Prepare!
		first_time
	fi
#
#	Load Environment	:	System wide / defaults
#
	source "$TRC" && printf "." > /dev/stderr
	for f in $TUI_FILE_CONF_{APPS,COMMANDS,COLORS,SETTINGS,STATUS,SYSTEM}
	do	source "$f" && printf "." > /dev/stderr
	done
#
#	Load Environment	:	User settings
#
	#if
	[ -f "$TUI_FILE_USER_LOADLIST" ] || printf '%s\n' {user,apps,settings}.conf > "$TUI_FILE_USER_LOADLIST"
	#then	# Exit according to wether the script is executed or sourced
	#	[ "$ME" = tui ] && exit 99 || return 99
	#fi
	while read f
	do	[ ! -z "$f" ] && [ ! "#" = "${f:0:1}" ] && \
			[ -f "$f" ] && \
			source "$TUI_DIR_USER/$f"  && \
			printf "." > /dev/stderr
	done<"$TUI_FILE_USER_LOADLIST"
#
#	Display ?
#
	if [ "${0##*/}" = "tui" ]
	then	case "$1" in
		"-h"|"--help"|"help")
			help_screen
			hadOpts=true
			exit $RET_HELP
			;;
		esac
		MODE="$1"
		YES=false
		case "$MODE" in
		config)
			ConfigTUI
			exit $?
			;;
		reset-yes)
			MODE=reset
			YES=true
			;;
		theme)	if [ -z "$2" ]
			then	tui-echo "TUI_THEME is set to:" "${TUI_THEME:-$(tui-conf-get $TRC TUI_THEME)}"
				exit $?
			else	tui-conf-set -v "$TRC" "TUI_THEME" "$2"
				exit $?
			fi
			;;
		info)	tui-printf -H "TUI ($TUI_VERSION) by sea" "Hello $USER_NAME, it is $(date +%T) on $(date +%F)"
			tui-printf -T "Text User Interface - Framework for Scripts"
			tui-printf -E "Be aware that using TUI_COLOR_* currently causes alignment issues." "$TUI_INFO"
			tui-printf -E "Any escape sequence for that matter." "$TUI_INFO"
			tui-printf -T "Variables provided by sourcing TUI (internals)"
			
			for foundVar in ${!TUI_*} ${!RET_*} #${!@_CLI} ${!*\_GUI}
			do	#echo $foundVar | $GREP -q COLOR_ || \
				tui-printf -E \
					"$foundVar" \
					"$(tmp=\$$foundVar ; printf '%s' $(eval echo $tmp))" # > $TUI_FILE_TEMP);<$TUI_FILE_TEMP )"
			done
			
			tui-printf -T "Variables provided by sourcing TUI (User specific)"
			
			
			for task in user apps sets
			do	list=""
				case $task in
				user)	lbl=User
					list=" $(tui-conf-get -l $TUI_FILE_USER)"	;;
				apps)	lbl=Apps
					list=" $(tui-conf-get -l $TUI_FILE_USER_APPS)"	;;
				sets)	lbl=Settings
					list=" $(tui-conf-get -l $TUI_FILE_USER_SETTINGS)" ;;
				esac
				
				tui-title "$lbl"
				for foundVar in $list 
				do	tui-printf -E \
						"$foundVar" \
						"$(tmp=\$$foundVar ; printf '%s' $(eval echo $tmp))" # > $TUI_FILE_TEMP);<$TUI_FILE_TEMP )"
				done
			done
			exit $?
			;;
		esac
	
		if [ "$MODE" = "reset" ]
		then	ResetTUI
			# $RANGE should be set within the function 'ResetTUI'
			tui-status $? "Reset $RANGE"
			exit $?
		fi
#
#	Display & Action
#
		tui-printf -H "TUI ($TUI_VERSION) by sea" "Hello $USER_NAME, it is $(date +%T) on $(date +%F)"
		tui-printf -T "Text User Interface - Framework for Scripts"
		tui-printf -E "Calling $ME like this gives you an impression on how your future scripts could look like."
		tui-printf -E
		tui-printf -E "If you are looking for the commands of TUI, try this:" "tui-<hit-tab>"
		tui-printf -E "If you are a developer, i highly recomand to read:" "man tui"
		tui-printf -E "And to check the provided variables, see ${TUI_FONT_BOLD}man info${TUI_RESET}"
		
		tui-printf -E
		tui-printf -E "There are some sample scripts to get you started:" "$TUI_DIR_DOCS/samples"
		tui-printf -E "To create a new script in $TUI_DIR_USER_SCRIPTS, type:" "tui-new-script [-emrst] [./]SCRIPTNAME"
		#tui-printf -E "Also you could read:" "the man pages or /usr/share/doc/tui/README.md"
		tui-printf -E
		tui-printf -E "Arguments to this command are:"
		tui-printf -E " " "config info reset reset-yes theme"
		tui-yesno "Configure it now?" || exit 0
		ConfigTUI
	fi