#!/usr/bin/env bash
#
# Copyright (c) 2014-2015 Simon Arjuna Erat (sea)  <erat.simon@gmail.com>
# All rights reserved.
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>
#
# ------------------------------------------------------------------------
#
#	Author: 	Simon A. Erat (sea)
#	Contact:	erat.simon@gmail.com
#	Created:	2014.05.19
# 	Changed:	2015.08.03
#
#	Variable defaults
#
	for tmp_task in "/etc" "${HOME:-/root}/.local" "$HOME"
	do 	[ -f "$tmp_task/tui.conf" ] && source "$tmp_task/tui.conf" && [ ! -z "${SYSCONFDIR}!" ] && break
	done
	# Get the main config files
	# 
	if source "${SYSCONFDIR}/tuirc" && source "${HOME:-/root}/.tuirc" 2>/dev/zero
	then 	# Load required variables
		for f in $TUI_FILE_{CONF,USER}_{APPS,COMMANDS,SETTINGS}
		do	[ -f "$f" ] && source "$f"
		done
		# Load language
		if [ -z "$TUI_LANG" ]
		then	[ -z "$LANG" ] && LANG=$(locale|sed s,[=\"],\ ,g|awk '/MESS/ {print $2}')
			lng="$(echo ${LANG/\.*})"
			echo "$TUI_DIR_LOCALE/"* | grep -q "${lng}" && \
				tui-conf-set "${HOME:-/root}/.tuirc" TUI_LANG "$lng" || \
				tui-conf-set "${HOME:-/root}/.tuirc" TUI_LANG en_GB
			# Sadly this echo is required to remove tailing spaces, probablly an issue of tui-conf-get (2015.08.21)
			TUI_LANG="$(echo $(tui-conf-get "${HOME:-/root}/.tuirc" TUI_LANG))"
		fi
		LANG_FILE=${ME/tui\-}.lng
		LANG_FILE="$TUI_DIR_LOCALE/${TUI_LANG}/$LANG_FILE"
		[ -f "$LANG_FILE" ] && source "$LANG_FILE" #|| tui-status 3 "$ME -- language file"
	else	source tuirc
	fi
	break_on_injections "$@" && exit 1
	
	script_version=0.8.9
	TMP="$TUI_FILE_TEMP.$$"
	ME="${0##*/}"
	help_text="$(gettext "
$ME ($script_version)
Usage:	$ME [-f OUTFILE] [-s ORGFILE] SCRIPTFILE  \"Progress String\"  \"Exit String\"  [ WAIT ]
NOTE:	'Progress String' may contain shell escaped commands.

	-f [/path/to/]file\tPrint the filesize of passed file
	-s [/path/to/]orgfile\tSwitches to progressbar if -f file is passed too
	-e BYTESEXPECTED\tRequired to adjust the progressbar, leave out to just print the actual file size

Executes SCRIPTFILE and prints 'Progress String' while running.
Prints 'Exit String' when done, regardless of exit code (0,1,?) it uses.
WAIT is optional wait time between updates, default is 0.7 (seconds).

")"
	CHECKFILE=false
	SIZE_ORG=0
	showBAR=false
	MAX_BYTES=0
	FS=0
#
#	Variable handling
#
	[ -z "$3" ] && printf "$help_text" && exit 99
	BG_RET="-1"
	[ "--help" = "$1" ] && printf "$help_text" && exit 99
	version_text=$(gettext "
GNU $ME, Version $script_version
Copyright (C) 2015 Simon Arjuna Erat
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>

This is free software; you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
")
	[ "--version" = "${1,,}" ] && printf "$version_text" && exit 0
	while getopts "he:f:s:" opt
	do 	case "$opt" in
		h)	printf "$help_text"
			exit $RET_HELP
			;;
		e)	#showBar=true
			MAX_BYTES="$OPTARG"
			;;
		f)	FILECHECK="$OPTARG"
			CHECKFILE=true
			;;
		s)	if [ -f "$OPTARG" ]
			then	SIZE_ORG=$("$LS" -l "$OPTARG"|"$AWK" '{print $5}')
			else	tui-status 1 "$(gettext "$ME: File \"$OPTARG\" could not be found!")"
				exit "$?"
			fi
			showBar=true
			;;
		esac
	done
	shift $(($OPTIND - 1))
	JOB="$1"
	TXT_PROGRESS="$2"
	TXT_EXIT="$3"
	MAX_BYTES="${MAX_BYTES:-${SIZE_ORG:-0}}"
	[ -z "$4" ] && WAIT="0.7" || WAIT="$4"
	"$CHECKFILE" && \
		[ "$MAX_BYTES" -gt 0 ] && \
		showBar=true || showBar=false
#
#	Send job to bg and get pid
#
	[ ! -f "$JOB" ] && \
		tui-printf -rS 1 "$(gettext "Failed, job: $JOB not found!")" && \
		exit 1
	tui-printf -rS 2 "$(gettext 'Starting job...')"
	(
		"$SHELL" "$JOB" && \
			printf 0 >&1 > "$TMP" || \
			printf 1 >&1 > "$TMP"
	)   & 
	PID="$!"
#
#	While the job is running...
#
	sleep 0.5
	# The task is still running
	while ps | "$GREP" -q "$PID"
	do	# Update FileSize variable, if required
		"$CHECKFILE" && \
			FS=$("$LS" -l "$FILECHECK"|"$AWK" '{print $5}') && \
			FS_SHOW=$("$LS" -lh "$FILECHECK"|"$AWK" '{print $5}')
		if "$CHECKFILE"
		then	if "$showBar"
			then	tui-progress -lbm "$MAX_BYTES" -c "$FS" "$TXT_PROGRESS ($FS_SHOW)"
			else	[ -z "${MAX_BYTES/0}" ] && \
					tui-progress "$TXT_PROGRESS ($FS_SHOW)" || \
					tui-progress -lm "$MAX_BYTES" -c "$FS" "${TXT_PROGRESS} ($FS_SHOW)"
			fi
		else	tui-progress "$TXT_PROGRESS"
		fi
		sleep "$WAIT"
	done
#
#	Report Return Code of ended bg-job
#
	BG_RET=$(<"$TMP")
	rm -f "$TMP"
	if [ "$BG_RET" = "-1" ]
	then	tui-echo "$TXT_EXIT" "$(gettext 'Could not retrieve return value')" "$INFO"
		exit "$RET_INFO"
	else	tui-status "$BG_RET" "$TXT_EXIT"
		exit "$?"
	fi
