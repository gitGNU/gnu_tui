#!/usr/bin/env bash
#
# Copyright (c) 2014-2015 Simon Arjuna Erat (sea)  <erat.simon@gmail.com>
# All rights reserved.
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>
#
# ------------------------------------------------------------------------
#
#	Author: 	Simon A. Erat (sea)
#	Contact:	erat.simon@gmail.com
#
#	Variable defaults
#
	source tui
	script_version=0.7.2
	ME="${0##*/}"
	[ -z "$TUI_FILE_TEMP" ] && source $TUI_DIR_CONF/tui.conf
	help_text="\r$ME ($script_version)
		\rUsage: $ME [-f OUTFILE] [-s ORGFILE] SCRIPTFILE  \"Progress String\"  \"Exit String\"  [ WAIT ]
		\rNOTE:\t'Progress String' may contain shell escaped commands.
		\r
		\r\t-f [/path/to/]file\tPrint the filesize of passed file
		\r\t-s [/path/to/]orgfile\tSwitches to progressbar if $TUI_FONT_BOLD-f file$TUI_RESET is passed too
		\r\t-e BYTESEXPECTED\tRequired to adjuet the progressbar, leave out to just print the actual file size
		\r
		\rExecutes SCRIPTFILE and prints 'Progress String' while running.
		\rPrints 'Exit String' when done, regardless of exit code (0,1,?) ir uses.
		\rWAIT is optional wait time between updates, default is 0.7 (seconds).
		\r"
	CHECKFILE=false
	SIZE_ORG=0
	showBAR=false
	MAX_BYTES=0
	FS=0
#
#	Variable handling
#
	[ -z "$3" ] && printf "$help_text" && exit $RET_HELP
	BG_RET="-1"
	while getopts "he:f:s:" opt
	do 	case $opt in
		h)	printf "$help_text"
			exit $RET_HELP
			;;
		e)	showBar=true
			MAX_BYTES="$OPTARG"
			;;
		f)	FILECHECK="$OPTARG"
			CHECKFILE=true
			;;
		s)	if [ -f "$OPTARG" ]
			then	SIZE_ORG=$($LS -l "$OPTARG"|$AWK '{print $5}')
			else	tui-status 1 "$ME: File \"$OPTARG\" could not be found!"
				exit $?
			fi
			showBar=true
			;;
		esac
	done
	shift $(($OPTIND - 1))
	
	JOB="$1"
	TXT_PROGRESS="$2"
	TXT_EXIT="$3"
	MAX_BYTES=${MAX_BYTES:-${SIZE_ORG:-0}}
	[ -z "$4" ] && WAIT=0.7 || WAIT="$4"
#
#	Send job to bg and get pid
#
	tui-printf -rS 2 "Starting job..."
	($SHELL "$JOB" && printf 0 > /dev/stdout > "$TUI_FILE_TEMP" || \
			printf 1 > /dev/stdout > "$TUI_FILE_TEMP"
	)   & PID=$!
#
#	While the job is running...
#
	sleep 0.5
	# The task is still running
	while ps | $GREP -q $PID
	do	# Update FileSize variable, if required
		$CHECKFILE && \
			FS=$($LS -l "$FILECHECK"|$AWK '{print $5}') && \
			FS_SHOW=$($LS -lh "$FILECHECK"|$AWK '{print $5}') && \
		# Print output according to passed options
		if $CHECKFILE && $showBar
		then 	tui-progress -lbm $MAX_BYTES -c $FS "$TXT_PROGRESS ($FS_SHOW)"
		elif $CHECKFILE && ! $showBar
		then	tui-progress -lm $MAX_BYTES -c $FS "$TXT_PROGRESS ($FS_SHOW)"
		elif ! $CHECKFILE && $showBar
		then	tui-status 1 "Must pass a '-f file' to check!"
			exit 1
		else	tui-printf "$TXT_PROGRESS" "[  $(tui-indi)   ]" 2>&1
		fi
		sleep $WAIT
	done
#
#	Report Return Code of ended bg-job
#
	BG_RET=$(cat $TUI_FILE_TEMP)
	if [ "$BG_RET" = "-1" ]
	then	tui-echo "$TXT_EXIT" "Could not retrieve returnvalue" "$INFO"
		exit $RET_INFO
	else	tui-status $BG_RET "$TXT_EXIT"
		exit $?
	fi
