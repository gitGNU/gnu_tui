#!/usr/bin/env bash
#
# Copyright (c) 2014-2015 Simon Arjuna Erat (sea)  <erat.simon@gmail.com>
# All rights reserved.
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANT ABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>
#
# ------------------------------------------------------------------------
#
#	Variable environment
#
	BORDER_RIGHT=""
	# Source only the most required files, 
	# create the RC and load all variable if RC is not present yet.
	ME="${0##*/}"
	for tmp_task in "/etc" "${HOME:-/root}/.local" "$HOME"
	do 	[ -f "$tmp_task/tui.conf" ] && source "$tmp_task/tui.conf" && [ ! -z "${SYSCONFDIR}!" ] && break
	done
	# Get the main config files
	# 
	if source "${SYSCONFDIR}/tuirc" && source "${HOME:-/root}/.tuirc" 2>/dev/zero
	then 	# Load required variables
		for f in $TUI_FILE_{CONF,USER}_{APPS,COMMANDS,SETTINGS}
		do	[ -f "$f" ] && source "$f"
		done
	else	source tuirc
	fi
	break_on_injections "$@" && exit 1
	# If there is a user theme directory, use that one instead
	[ -d "$TUI_DIR_USER_THEMES" ] && [ -z "$TUI_DIR_THEMES" ] && TUI_DIR_THEMES="$TUI_DIR_USER_THEMES"
	source "$TUI_DIR_THEMES/$TUI_THEME" 
	# Use custom BORDER_RIGHT if it was set
	[ -z "$BORDER_RIGHT" ] && \
		for((i=${#BORDER_LEFT}-1;i>=0;i--)); do BORDER_RIGHT="$BORDER_RIGHT${BORDER_LEFT:$i:1}"; done
#
#	Variable defaults
#
	script_version=0.9a
	ME="${0##*/}"
#
#	Translate preps
#
	source gettext.sh
	TEXTDOMAIN="${0##*/}"	# Will be changed over time, but easier to copy paste
	TEXTDOMAINDIR="${TUI_DIR_SYSTEM/tui/locale}"	# Will be changed over time, but easier to copy paste
	export TEXTDOMAIN TEXTDOMAINDIR
#
#	Translate strings
#
	TR_MSG_TEXT_VERSION="$(eval_gettext '
GNU $ME, Version $script_version
Copyright (C) 2011-2015 Simon Arjuna Erat
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>

This is free software; you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
')"
	TR_MSG_TEXT_HELP="$(eval_gettext '
Usage: $ME [options]
Select USB device if more than one is found
Where options are:
	-h	This screen
	-a	Auto select entry if only one was found

Report bugs to: erat.simon@gmail.com
TUI home page: <http://www.gnu.org/software/tui/>
General help using GNU software: <http://www.gnu.org/gethelp/>
')"
	version_text="$TR_MSG_TEXT_VERSION
"
	help_text="$TR_MSG_TEXT_HELP
"
	targetusb=""
	devDisk=/dev/disk/by-id
	tDev=""
	AUTO=false		# Automatically select only available option
#
#	Variable handling
#
	[ "--help" = "$1" ] && printf "$help_text" && exit 99
	[ "--version" = "${1,,}" ] && printf "$version_text" && exit 0
	while getopts h opt
	do	case "$opt" in
		h)	echo -e "$help_text"
			exit $RET_HELP
			;;
		a)	AUTO=true
			;;
	esac
	done
	shift "$(($OPTIND -1))"
#
#	Functions
#
	getspace() { # NUM
	# Returns string of NUM space chars
	#
		C=0 ; out=""
		while [ "$C" -lt "$1" ];do out+=" ";let C++;done
		printf "$out"
	}
	getlist() { # 
	# Lists the contend of $devDisk, limits the output to usb items and removes partition entries
	# If there is something to ignore, that one will be hidden too
		if [ -z "$usbIgnore" ] 
		then	"$LS" "$devDisk" | "$GREP" usb | "$GREP" -v part
		else	"$LS" "$devDisk" | "$GREP" usb | "$GREP" -v part | "$GREP" -v "$usbIgnore"
		fi
	}
#
#	Display
#
	# Make sure there is something available
	msg="$(gettext 'Please connect an USB device...')"
	left="$BORDER_LEFT $msg"
	list=""
	sleeper=0.0001
	# Loop while waiting for --item-list-without-the-ignored-ones--
	while [ -z "$list" ] ; do
		tui-progress "$msg" >&2
		list="$(getlist)" 2>/dev/zero
		list="${list/$usbIgnore}"
		sleep $sleeper
		[ "$sleeper" = "0.0001" ] && sleeper=1.2
	done
#
#	Check for user settings for default behaviour.
#	This is required so internal card readers do not get in the way, 
#	or so you can select to (not) use it automatically
#
	#echo "if [ "$(echo $list|wc -l)" -eq 1 ] && [ -z "$usbAsk" ] "
	if [ "$(echo $list|wc -w)" -eq 1 ] && [ -z "$usbAsk" ] 
	then	# There is no setting yet, first time usage
		tui-echo "$(gettext 'The only device available is:')" "${list}" >&2
		if tui-yesno "$(gettext 'Is this a card reader that is always listed?')" >&2
		then	if tui-yesno "$(gettext 'Ignore this device in future calls?')" >&2
			then	# Save the card reader
				tui-conf-set -v "$TUI_FILE_USER_SETTINGS" usbIgnore "\"$list\""
				RET=1
			else	tui-echo "$(gettext 'Do you want to be asked to select this device every time?')" >&2
				tui-yesno "$(gettext 'No, might result in that device being auto-selected!')" >&2
				RET=$?
			fi
		else	RET=1
		fi
		tui-conf-set -v "$TUI_FILE_USER_SETTINGS" usbAsk "$(tui-str-bol-conv -t $RET)"  >&2
		source "$TUI_FILE_USER_SETTINGS"
		[ -z "$usbIgnore" ] || exit 1
	fi
#
#	Ask now or not?
#
	if "$usbAsk"
	then	"$AUTO" && \
			targetUsb="$(tui-select -a $list)" || \
			targetUsb="$(tui-select $list)"
	else	targetUsb="$(tui-select -a $list)"
	fi
	tDev="$(readlink -f $devDisk/$targetUsb)"
	echo "$tDev" >&1
