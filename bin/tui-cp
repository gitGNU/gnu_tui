#!/usr/bin/env bash
#
# Copyright (c) 2013-2015 Simon Arjuna Erat (sea)  <erat.simon@gmail.com>
# All rights reserved.
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANT ABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>
#
# ------------------------------------------------------------------------
#
#	Init TUI environment
#
	script_version=0.9.2
	ME="${0##*/}"
	for tmp_task in "/etc" "${HOME:-/root}/.local" "$HOME"
	do 	[ -f "$tmp_task/tui.conf" ] && source "$tmp_task/tui.conf" && [ ! -z "${SYSCONFDIR}!" ] && break
	done
	# Get the main config files
	# 
	if source "${SYSCONFDIR}/tuirc" || ( [ -f ./tuirc ] && source ./tuirc )
	then 	# Load required variables
		for f in $TUI_FILE_{CONF,USER}_{APPS,COMMANDS,SETTINGS}
		do	[ -f "$f" ] && source "$f"
		done
	else	source tuirc
	fi
	break_on_injections "$@" && exit 1
#
#	Translate preps
#
	source gettext.sh
	TEXTDOMAIN="${0##*/}"	# Will be changed over time, but easier to copy paste
	TEXTDOMAINDIR="${TUI_DIR_SYSTEM/tui/locale}"	# Will be changed over time, but easier to copy paste
	export TEXTDOMAIN TEXTDOMAINDIR
#
#	Translate strings
#
	TR_MSG_TEXT_VERSION="$(eval_gettext '
TUI ($ME, Version $script_version)
Copyright (C) 2011-2015 Simon Arjuna Erat
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>

This is free software; you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
')"
	TR_MSG_TEXT_HELP="$(eval_gettext '
NAME
  $ME - Copy, TUI-Style

SYNOPSYS
  $ME [-h|--help] [--version] [-dflq] SOURCE1 [..] TARGET

OPTIONS
  -h|--help	Shows help and exit with 99
  --version	Shows version infoand exit with 0
  
  In addition to the default options of "cp"
  
  (please see "cp --help"), you have these options:
  
  --dash	Switch to (animated) dash-mode
  --line	Print all items on one line.
  --long	Show long names (full passed target path)
 
EXAMPLE
	tui-cp * /path/to/destination[/file]
	
	tui-cp --long * /path/to/destination[/file]
	
	tui-cp --dash --line * /path/to/destination[/file]
 
SEE ALSO
  bash(1), cp(1), tui-progress(1)
  
BUGS
  Report bugs to: <tui-support@nongnu.org>
  
  TUI - Homepage: <https://savannah.nongnu.org/projects/tui>
  
  General help using GNU software: <http://www.gnu.org/gethelp/>

AUTHOR
  Simon Arjuna Erat, <http://linux-scripter.blogspot.ch>
')"
	TR_MSG_WORD_COPYING="$(gettext 'Copying')"
	TR_MSG_WORD_COPYIED="$(gettext 'Copied')"
	TR_MSG_TEXT_COPIED="$(eval_gettext 'Copied $final_TOTAL of $MAX files to $TARGET')"
#
#	Variable defaults
#
	help_text="$TR_MSG_TEXT_HELP"
	
	FILE_TEMP="$TUI_DIR_TEMP/$ME.$$.status"
	DEST=""
	showBar=true
	doExtract=false
	doForce=false
	showRegular=false
	showLong=false
	# Just in case user has an alias for ls
	#LS=$(locate "ls"|$GREP /ls$ | $GREP /bin/ | head -n 1)
	COUNTER=0
	tui-progress -r
	showtotal=false
#
#	Variable handling
#
	opts=""
	showVersion() { 
	cat <<-EOF
		$$TR_MSG_TEXT_VERSION
	EOF
	}
#
#	Get options
#
	# -a|--alternative ; to allow longoptions with a single leading '-'
	GETOPT=$(getopt \
		--options	"habdfiHlLnPprRsS:tTuvxZ" \
		--longoptions	"help,version,archieve,attributes-only,backup::,copy-contents,force,interactive,link,dereference,no-clobber,no-dereference,preserve::,no-preserve:,parents,recursive,reflink::,remove-destination,sparse:,strip-trailing-slashes,symbolic-link,suffix:,target-directory:,no-target-directory,update,verbose,one-file-system,dash,long,line" \
		--name 		"${0##*/}" -- "${@}" \
	)
	eval set -- "${GETOPT}";
	opts_passed=""
	
	while true
	do 	case "$1" in
		# --- Basic args -----
		-h|--help)	echo "$TR_MSG_TEXT_HELP" ; exit 0	;;
		--version)	show_version	;;
		--)		shift ; break	;;
		# ------no arg ------------
	--archieve|--attributes-only|--copy-contents|--interactive|--link|--dereference|--no-clobber|--no-dereference|--parents|--recursive|--remove-destination|--strip-trailing-slashes|--symbolic-link|--no-target-directory|--update|--verbose|--one-file-system|-a|-b|-d|-i|-H|-l|-n|-P|-p|-r|-R|-s|-t|-T|-u|-v|-x|-Z)
				opts_passed+=" $1"
				shift 1
				;;
		# ------ arg ------------
		--no-preserve|--sparse|--suffix|--target-directory|-S)
				opts_passed+=" $1=$2"
				shift 2
				;;
		# ------opt arg ------------
		--backup|--preserve|--reflink)
				if [ "-" = "${2:0:1}" ] 
				then 	opts_passed+=" $1=$2"
					shift 2
				else 	opts_passed+=" $1"
					shift
				fi
				;;
		# --- original args ---
		--dash)	showBar=false
			showRegular=true
			;;
		--long)	showLong=true
			;;
		--line)	showRegular=false
			showBar=false
			showtotal=true
			;;
		-f|--force)	# The "Force" is handled by me ;)
			doForce=true
			;;
		--verbose)	echo "irrelevant, as using TUI" > /dev/zero
				;;
		esac
	done
	shift $(($OPTIND - 1))
	ARGS=(${@})
	case $# in
	0|1)	echo -e "$help_text"
		exit $RET_HELP
		;;
	2)	SOURCE="$1"
		TARGET="$2"
		;;
	*)	last=$[${#ARGS[@]}-1]
		TARGET="${ARGS[$last]}"
		unset ARGS[$last]
		SOURCE=("${ARGS[@]}")
		;;
	esac
	MAX=${#SOURCE[@]}
#
#	Functions
#
	FileSize() { # FILE
	# Returns the filesize in bytes
	#
		$LS -l "$1" | $AWK '{print $5}'
	}
	FolderSize() { # FILE
	# Returns the foldersize in kilobytes
	#
		du "$1"|$AWK '{print $1}'
	}
	tui_bol_runpid() { # PID
	# Returns true if ps finds the PID
	#
		[ -z "$1" ] && return 1
		ps | $GREP -v $GREP | $GREP -q "$1"
		return $?
	}
	get_waiting() { # KILOBYTES
	# Returns the amount of seconds to wait
	#
		[ -z "$1" ] && echo 0.3 && return
		if [ $1 -lt 1000100 ]
		then	# Its less than 1 mb
			waiting=0.1
		elif [ $1 -lt 100100100 ]
		then	# Its less than 100 mb
			waiting=0.3
		elif [ $1 -lt 1000100100 ]
		then	# Its less than 1 gb
			waiting=0.4
		elif [ $1 -lt 10100100100 ]
		then	# Its less than 10 gb
			waiting=0.5
		else	# for everything higher
			waiting=0.9
		fi
		echo $waiting
	}
	ask_overwrite() { # TARGET
	# Returns true if either target does NOT exist
	# or user agrees to overwrite or force is enabled
		[ -z "$1" ] && return 1
		if [ -f "$1" ] && [ "$doForce" = "false" ]
		then	thisFile="$1"
			tui-yesno "$(eval_gettext '\"$thisFile\" exists, overwrite?')"
			return $?
		else	return 0
		fi
	}
#
#	Display
#
	#set -x
	#echo $TARGET
	for thisFile in "${SOURCE[@]}"
	do
		thisFile="$(printf $thisFile)"
		tui-status -r  2 "$(gettext 'Reading') ${thisFile##*/}..."
		if [ -d "$thisFile" ]
		then	c_opt="-r"
			ORG=$(FolderSize "$thisFile")
		elif [ -f "$thisFile" ] 
		then	c_opt=""
			ORG=$(FileSize "$thisFile")
		else	# Skipping
			ls -l "$(dirname $thisFile)"
			if $showBar || $showRegular
			then	tui-status 4 "$(gettext 'Skipped') \"${thisFile##*/}\"."
			fi
			COUNTER=$(( $COUNTER + 1 ))
			TOTAL=$(( $TOTAL + 1 ))
			continue
		fi

		if ! ask_overwrite "$TARGET"
		then	# User does not want to overwrite, so we have to skip
			COUNTER=$(( $COUNTER + 1 ))
			TOTAL=$(( $TOTAL + 1 ))
			continue
		fi
		waiting=$(get_waiting $ORG)
		trgt="$TARGET/${thisFile##*/}"
		if $showLong
		then	[ -d "$TARGET" ] && \
				display_trgt="$(gettext to) ${trgt}" || \
				display_trgt="$(gettext to) ${TARGET}"
		else	[ -d "$TARGET" ] && \
				display_trgt="${trgt##*/}" || \
				display_trgt="${TARGET##*/}"
		fi
		
		( sleep $waiting ; cp $opts_passed $c_opt "$thisFile" "$TARGET" ; echo "$?" > "$FILE_TEMP" ) &
		pid=$!

		sleep $waiting

		while tui_bol_runpid $pid
		do	if $showRegular
			then	tui-progress "$TR_MSG_WORD_COPYING $display_trgt..."
			elif $showBar
			then	[ -f "$trgt" ] && \
					DEST=$(FileSize "$trgt") || \
					DEST=$(FolderSize "$trgt")
				tui-progress -b -m $ORG -c $DEST "$TR_MSG_WORD_COPYING $display_trgt..."
				TOTAL=${TOTAL:-$ORG}
			else	tui-progress "$TR_MSG_WORD_COPYING $display_trgt ($COUNTER/$MAX)..."
				COUNTER=$(( $COUNTER + 1 ))
				# This actually represents the failures, TODO Error '127,130'
				cat_num=$(<$FILE_TEMP)
				TOTAL=$(( $TOTAL + ${cat_num:-0} ))
			fi
			# Since there is no visual progress, this 'waiting' is hard coded
			sleep $waiting
		done

		# Final Message
		TR_MSG_TEXT_COPIED="$(eval_gettext 'Copied $final_TOTAL of $MAX files to $TARGET')"
		if $showRegular
		then	tui-status $(<"$FILE_TEMP") "$TR_MSG_WORD_COPIED $display_trgt"
		elif $showBar
		then	tui-status $(<"$FILE_TEMP") "$TR_MSG_WORD_COPIED $display_trgt"
		#else
		elif $showtotal
		then	echo $TOTAL
			echo TOTAL=${TOTAL:-0}
			MAX=${MAX:-0}
			final_TOTAL=$(( $MAX - $TOTAL ))
			
			tui-status -r $(cat "$FILE_TEMP") "$TR_MSG_TEXT_COPIED"
			#showtotal=true
		fi
	done
	#set +x
	$showtotal && tui-status  $(cat "$FILE_TEMP") "Copied $(( $MAX - $TOTAL )) of $MAX files to $TARGET"
	[ -f "$FILE_TEMP" ] && \
		RET=$(<"$FILE_TEMP") && \
		rm -f "$FILE_TEMP" || RET=1
	exit $RET
