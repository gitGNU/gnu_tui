#!/usr/bin/env bash
#
# Copyright (c) 2013-2015 Simon Arjuna Erat (sea)  <erat.simon@gmail.com>
# All rights reserved.
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>
#
# ------------------------------------------------------------------------
#
#	Variable defaults
#
	source "$HOME/.tui_rc" || . tui
	for f in $TUI_FILE_{CONF,USER}_{APPS,COMMANDS,SETTINGS}
	do	[ -f "$f" ] && source "$f"
	done
	
	script_version=0.5.4
	ME="${0##*/}"
	help_text="\r$ME ($script_version)
		\rUsage: $ME [options] file1 file2 ... ... target_directory
		\rWhere options are:
		\r\t-h\tThis screen
		\r\t-d\tSwitch to (animated) dash-mode
		\r\t-f\tForce to overwrite if target exists
		\r\t-l\tShow long names (full passed target path)
		\r\t-q\tBe quiet, as in: print all on one line.
		\r
		\r"
	
	FILE_TEMP="$TUI_DIR_CACHE/$ME.$$.status"
	DEST=""
	showBar=true
	doExtract=false
	doForce=false
	showRegular=false
	showLong=false
	# Just in case user has an alias for ls
	#LS=$(locate "ls"|$GREP /ls$ | $GREP /bin/ | head -n 1)
	COUNTER=0
	tui-progress -r
	showtotal=false
#
#	Variable handling
#
	opts=""
	while getopts hfdlq opt
	do	case "$opt" in
		d)	showBar=false
			showRegular=true
			;;
		f)	doForce=true
			;;
		l)	showLong=true
			;;
		q)	showRegular=false
			showBar=false
			showtotal=true
			;;
		"")	unset ARGS[@]
			ARGS[0]=$(tui-read "Enter (absolute) path to tar:")
			;;
		h|*)	echo -e "$help_text" ; exit $RET_HELP
			;;
		esac
	done
	shift $(($OPTIND - 1))
	ARGS=(${@})
	case $# in
	0|1)	echo -e "$help_text"
		exit $RET_HELP
		;;
	2)	SOURCE="$1"
		TARGET="$2"
		;;
	*)	last=$[${#ARGS[@]}-1]
		TARGET=${ARGS[$last]}
		unset ARGS[$last]
		SOURCE=("${ARGS[@]}")
		;;
	esac
	MAX=${#SOURCE[@]}
#
#	Functions
#
	FileSize() { # FILE
	# Returns the filesize in bytes
	#
		$LS -l "$1" | $AWK '{print $5}'
	}
	FolderSize() { # FILE
	# Returns the foldersize in kilobytes
	#
		du "$1"|$AWK '{print $1}'
	}
	tui_bol_runpid() { # PID
	# Returns true if ps finds the PID
	#
		[ -z "$1" ] && return 1
		ps | $GREP -v $GREP | $GREP -q "$1"
		return $?
	}
	get_waiting() { # KILOBYTES
	# Returns the amount of seconds to wait
	#
		[ -z "$1" ] && echo 0.3 && return
		if [ $1 -lt 1000100 ]
		then	# Its less than 1 mb
			waiting=0.1
		elif [ $1 -lt 100100100 ]
		then	# Its less than 100 mb
			waiting=0.3
		elif [ $1 -lt 1000100100 ]
		then	# Its less than 1 gb
			waiting=0.4
		elif [ $1 -lt 10100100100 ]
		then	# Its less than 10 gb
			waiting=0.5
		else	# for everything higher
			waiting=0.9
		fi
		echo $waiting
	}
	ask_overwrite() { # TARGET
	# Returns true if either target does NOT exist
	# or user agrees to overwrite or force is enabled
		[ -z "$1" ] && return 1
		if [ -f "$1" ] && [ "$doForce" = "false" ]
		then	tui-yesno "\"$1\" exists, overwrite?"
			return $?
		else	return 0
		fi
	}
#
#	Display
#
	for thisFile in "${SOURCE[@]}"
	do
		tui-status -r  2 "Initialize $thisFile..."
		if [ -f "$thisFile" ] 
		then	c_opt=""
			ORG=$(FileSize "$thisFile")
		elif [ -d "$thisFile" ]
		then	c_opt="-r"
			ORG=$(FolderSize "$thisFile")
		else	# Skipping
			if $showBar || $showRegular
			then	tui-status 4 "Skiped $thisFile."
			fi
			COUNTER=$(( $COUNTER + 1 ))
			TOTAL=$(( $TOTAL + 1 ))
			continue
		fi

		if ! ask_overwrite "$TARGET"
		then	# User does not want to overwrite, so we have to skip
			COUNTER=$(( $COUNTER + 1 ))
			TOTAL=$(( $TOTAL + 1 ))
			continue
		fi
		waiting=$(get_waiting $ORG)
		trgt="$TARGET/${thisFile##*/}"
		if $showLong
		then	[ -d "$TARGET" ] && \
				display_trgt="to ${trgt}" || \
				display_trgt="to ${TARGET}"
		else	[ -d "$TARGET" ] && \
				display_trgt="${trgt##*/}" || \
				display_trgt="${TARGET##*/}"
		fi
		
		( cp $c_opt "$thisFile" "$TARGET" ; echo $? > $FILE_TEMP ) &
		pid=$!

		sleep $waiting

		while tui_bol_runpid $pid
		do	if $showRegular
			then	tui-progress "Copying $display_trgt..."
			elif $showBar
			then	[ -f "$trgt" ] && \
					DEST=$(FileSize "$trgt") || \
					DEST=$(FolderSize "$trgt")
				tui-progress -b -m $ORG -c $DEST "Copying $display_trgt..."
				TOTAL=${TOTAL:-$ORG}
			else	tui-progress "Copying $display_trgt ($COUNTER/$MAX)..."
				COUNTER=$(( $COUNTER + 1 ))
				# This actualy represents the failures, TODO Error '127,130'
				cat_num=$(cat $FILE_TEMP)
				TOTAL=$(( $TOTAL + ${cat_num:-0} ))
			fi
			# Since there is no visual progress, this 'waiting' is hardcoded
			sleep $waiting
		done

		# Final Message
		if $showRegular
		then	tui-status $(cat "$FILE_TEMP") "Copied $display_trgt"
		elif $showBar
		then	tui-status $(cat "$FILE_TEMP") "Copied $display_trgt"
		#else
		elif $showtotal
		then	TOTAL=${TOTAL:-0}
			tui-status -r $(cat "$FILE_TEMP") "Copied $(( $MAX - $TOTAL )) of $MAX files to $TARGET"
			#showtotal=true
		fi
	done
	$showtotal && tui-status  $(cat "$FILE_TEMP") "Copied $(( $MAX - $TOTAL )) of $MAX files to $TARGET"
	RET=$(cat "$FILE_TEMP")
	rm -f "$FILE_TEMP"
	exit $RET