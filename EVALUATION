Open questions from the author of TUI regarding the evaluation process
======================================================================

General
-------
Do i have to register TUI already as a new project as savanah.org? 
If so, gnu or nongnu?

I do have some variables not following the coding standard, but you (the homepage) also says to not rewrite.
So, may the current stay the same (as is), but just new variables have to follow the guideline?


Installation
------------
The GNU Autotools are awesome, but IMO a massive overkill to just place files as required by this project.
May i use instead a './configure' command that generates './make-{[un]install,distclean)' scripts?


Internationalization
--------------------
GNU Gettext is another great application, but since i provide quite an amount of scripted commands,
of which some have to 'race' vs. shell built-in, and are not just a single application.

While a 'per-line-print-speed' of 0.100 already feels slow,
i was very proud i could lower the inital 'per-line-print-speeds' from ~0.300 to ~0.010.

I'm having a hard time to 'willingly increase the delay' to 'destory the enduser experience', 
as i've experienced delays up to ~0.700 - for a command that does just prints strings without
any serious (as in cpu usage) algorythm.

Mainwhile, sourcing files containg the required string variables provided in a directory named like $LANG - 
or if nonexistent generated from the output of 'locale'.

With this method i could (about) preserve the current 'per-line-print-speed', which i really would like to.
It already provides default fallback to en_GB, which will be the default language setting.
So even just file by file could be translated,

However, i'm not yet exporting all the strings, without the approvel that this concept may pass.

Current examples are:
* tui-asroot (for testing purposes, it also supports de_DE)
* tui-bgjob-mgr (note the fallback to english if LANG is not de_DE[.UTF-8]

The current 'core-language' directories are 'de' and 'en', with their de_DE/en_GB names symlinked to them.
Any further language would require to be within a new directory.


Security
--------
HIGH::Just recently i got aware that the commands tui-bol-get and tui-bol-set might be considered security issues,
if one uses this tool to retrieve a variable containing a password.
LOW::Likewise for tui-conf-editor, but since i now gained the knowledge for some of the remaining improvements (there is already a pseudo protection... from wannabes)

Code injection:
Without ever (previous to this eval process) having read into anything about such a thing, i've tried to come up with something
that protects from malicious code, but still allows most basic/common shell usages.
Due to the lack of professional background, specially on this topic, 
i'll need help to improve this function, to keep functionaly and improve protection/security.

I did my best and will continue to do so, but i need to know what.